{"version":3,"sources":["/home/runner/work/proc-app/proc-app/out/process-co/ui/dist/index.js","../../../node_modules/.pnpm/clsx@2.1.1/node_modules/clsx/dist/clsx.mjs","../../../node_modules/.pnpm/tailwind-merge@3.1.0/node_modules/tailwind-merge/src/lib/class-group-utils.ts","../../../node_modules/.pnpm/tailwind-merge@3.1.0/node_modules/tailwind-merge/src/lib/lru-cache.ts","../../../node_modules/.pnpm/tailwind-merge@3.1.0/node_modules/tailwind-merge/src/lib/parse-class-name.ts","../../../node_modules/.pnpm/tailwind-merge@3.1.0/node_modules/tailwind-merge/src/lib/sort-modifiers.ts","../../../node_modules/.pnpm/tailwind-merge@3.1.0/node_modules/tailwind-merge/src/lib/config-utils.ts","../../../node_modules/.pnpm/tailwind-merge@3.1.0/node_modules/tailwind-merge/src/lib/merge-classlist.ts","../../../node_modules/.pnpm/tailwind-merge@3.1.0/node_modules/tailwind-merge/src/lib/tw-join.ts","../../../node_modules/.pnpm/tailwind-merge@3.1.0/node_modules/tailwind-merge/src/lib/create-tailwind-merge.ts","../../../node_modules/.pnpm/tailwind-merge@3.1.0/node_modules/tailwind-merge/src/lib/from-theme.ts","../../../node_modules/.pnpm/tailwind-merge@3.1.0/node_modules/tailwind-merge/src/lib/validators.ts","../../../node_modules/.pnpm/tailwind-merge@3.1.0/node_modules/tailwind-merge/src/lib/default-config.ts","../../../node_modules/.pnpm/tailwind-merge@3.1.0/node_modules/tailwind-merge/src/lib/tw-merge.ts","../src/lib/utils.ts","../src/components/ui/input.tsx","../src/stores/expressionModeStore.ts","../src/hooks/useExpressionMode.ts","../src/components/expression/ExpressionEditor.tsx","../src/hooks/useASTParser.ts","../src/components/expression/ASTRenderer.tsx","../src/components/expression/ExpressionWrapper.tsx","../src/components/input.tsx","../../../node_modules/.pnpm/class-variance-authority@0.7.1/node_modules/class-variance-authority/dist/index.mjs","../src/components/ui/button.tsx"],"names":["React4","React4__default","useState","useCallback","useEffect","useMemo","useRef","create","Editor","FontAwesomeIcon","faExpand","faSpinner","Slot","r","e","t","f","n","Array","isArray","o","length","clsx","arguments","clsx_default","CLASS_PART_SEPARATOR","createClassGroupUtils","config","classMap","createClassMap","conflictingClassGroups","conflictingClassGroupModifiers","getClassGroupId","className","classParts","split","shift","getGroupRecursive","getGroupIdForArbitraryProperty","getConflictingClassGroupIds","classGroupId","hasPostfixModifier","conflicts","classPartObject","currentClassPart","nextClassPartObject","nextPart","get","classGroupFromNextClassPart","slice","undefined","validators","classRest","join","find","validator","arbitraryPropertyRegex","test","arbitraryPropertyClassName","exec","property","substring","indexOf","theme","classGroups","Map","processClassesRecursively","classGroup","forEach","classDefinition","classPartObjectToEdit","getPart","isThemeGetter","push","Object","entries","key","path","currentClassPartObject","pathPart","has","set","func","createLruCache","maxCacheSize","cacheSize","cache","previousCache","update","value","IMPORTANT_MODIFIER","MODIFIER_SEPARATOR","MODIFIER_SEPARATOR_LENGTH","createParseClassName","prefix","experimentalParseClassName","parseClassName","modifiers","bracketDepth","parenDepth","modifierStart","postfixModifierPosition","index","currentCharacter","baseClassNameWithImportantModifier","baseClassName","stripImportantModifier","hasImportantModifier","maybePostfixModifierPosition","fullPrefix","parseClassNameOriginal","startsWith","isExternal","endsWith","createSortModifiers","orderSensitiveModifiers","fromEntries","map","modifier","sortModifiers","sortedModifiers","unsortedModifiers","isPositionSensitive","sort","createConfigUtils","SPLIT_CLASSES_REGEX","mergeClassList","classList","configUtils","classGroupsInConflict","classNames","trim","result","originalClassName","variantModifier","modifierId","classId","includes","conflictGroups","i","group","twJoin","argument","resolvedValue","string","toValue","mix","k","createTailwindMerge","createConfigFirst","createConfigRest","cacheGet","cacheSet","functionToCall","initTailwindMerge","reduce","previousConfig","createConfigCurrent","tailwindMerge","cachedResult","callTailwindMerge","apply","fromTheme","themeGetter","arbitraryValueRegex","arbitraryVariableRegex","fractionRegex","tshirtUnitRegex","lengthUnitRegex","colorFunctionRegex","shadowRegex","imageRegex","isFraction","isNumber","Boolean","Number","isNaN","isInteger","isPercent","isTshirtSize","isAny","isLengthOnly","isNever","isShadow","isImage","isAnyNonArbitrary","isArbitraryValue","isArbitraryVariable","isArbitrarySize","getIsArbitraryValue","isLabelSize","isArbitraryLength","isLabelLength","isArbitraryNumber","isLabelNumber","isArbitraryPosition","isLabelPosition","isArbitraryImage","isLabelImage","isArbitraryShadow","isArbitraryVariableLength","getIsArbitraryVariable","isArbitraryVariableFamilyName","isLabelFamilyName","isArbitraryVariablePosition","isArbitraryVariableSize","isArbitraryVariableImage","isArbitraryVariableShadow","isLabelShadow","testLabel","testValue","shouldMatchNoLabel","label","imageLabels","Set","sizeLabels","getDefaultConfig","themeColor","themeFont","themeText","themeFontWeight","themeTracking","themeLeading","themeBreakpoint","themeContainer","themeSpacing","themeRadius","themeShadow","themeInsetShadow","themeDropShadow","themeBlur","themePerspective","themeAspect","themeEase","themeAnimate","scaleBreak","scalePosition","scaleOverflow","scaleOverscroll","scaleUnambiguousSpacing","scaleInset","scaleGridTemplateColsRows","scaleGridColRowStartAndEnd","span","scaleGridColRowStartOrEnd","scaleGridAutoColsRows","scaleAlignPrimaryAxis","scaleAlignSecondaryAxis","scaleMargin","scaleSizing","scaleColor","scaleGradientStopPosition","scaleRadius","scaleBorderWidth","scaleLineStyle","scaleBlendMode","scaleBlur","scaleOrigin","scaleRotate","scaleScale","scaleSkew","scaleTranslate","animate","aspect","blur","breakpoint","color","container","ease","font","leading","perspective","radius","shadow","spacing","text","tracking","columns","box","display","sr","float","clear","isolation","object","overflow","overscroll","position","inset","start","end","top","right","bottom","left","visibility","z","basis","flex","grow","shrink","order","col","row","gap","justify","content","items","self","p","px","py","ps","pe","pt","pr","pb","pl","m","mx","my","ms","me","mt","mr","mb","ml","size","w","screen","h","list","placeholder","decoration","indent","align","whitespace","break","hyphens","bg","repeat","linear","to","radial","conic","from","via","rounded","border","divide","outline","ring","opacity","filter","brightness","contrast","grayscale","invert","saturate","sepia","table","caption","transition","duration","delay","backface","rotate","scale","skew","transform","origin","translate","accent","appearance","caret","scheme","cursor","resize","scroll","snap","touch","select","fill","stroke","twMerge","cn","inputs","Input","wrapperClassName","type","required","error","props","createElement","React","defaultState","expression","mode","isEditing","currentValue","isFullScreen","useExpressionModeStore","states","setState","fieldName","state","store","getState","switchToValue","currentState","switchToExpression","switchToEditor","setExpression","setEditing","setFullScreen","setCurrentValue","useExpressionMode","expr","editing","current","isExpressionMode","isEditorMode","inferTypeFromMonaco","editor","monaco","logPrefix","currentModel","markers","hasErrors","wrappedCode","tempModel","worker","client","exprIndex","quickInfo","extractedType","foundColon","typeParts","part","prevPart","typeString","console","log","hasTextFocus","getModel","getModelMarkers","resource","uri","some","marker","severity","MarkerSeverity","Error","createModel","languages","typescript","getTypeScriptWorker","getPositionAt","getQuickInfoAtPosition","toString","getOffsetAt","displayParts","kind","dispose","warn","InlineEditorOptions","fontSize","fontWeight","wordWrap","lineNumbers","lineNumbersMinChars","overviewRulerLanes","overviewRulerBorder","hideCursorInOverviewRuler","lineDecorationsWidth","glyphMargin","folding","scrollBeyondLastColumn","scrollbar","horizontal","vertical","alwaysConsumeMouseWheel","addExtraSpaceOnTop","autoFindInSelection","seedSearchStringFromSelection","minimap","enabled","wordBasedSuggestions","links","occurrencesHighlight","cursorStyle","renderLineHighlight","contextmenu","roundedSelection","hover","acceptSuggestionOnEnter","automaticLayout","fixedOverflowWidgets","padding","fontFamily","letterSpacing","lineHeight","FullPanelEditorOptions","readOnly","domReadOnly","InlineExpressionEditor","onChange","onBlur","onEnter","onTypeInferred","onValidationChange","context","editorRef","monacoRef","typeInferenceTimeoutRef","handleEditorWillMount","contextKeys","keys","javascriptDefaults","addExtraLib","handleEditorDidMount","updateOptions","getDomNode","findCommand","addCommand","KeyMod","CtrlCmd","KeyCode","KEY_F","enterKeyDisposable","onKeyDown","keyCode","Enter","contextKeyService","shiftKey","preventDefault","stopPropagation","suggestWidget","_contentWidgets","isSuggestVisible","widget","_hidden","_contextKeyService","suggestWidgetVisible","getContextKeyValue","trigger","onDidPaste","endLineNumber","newContent","textModel","lineCount","getLineCount","getLineContent","setValue","setPosition","column","lineNumber","onDidBlurEditorText","getValue","onDidChangeModelContent","model","clearTimeout","setTimeout","expressionToAnalyze","inferredType","markerChangeDisposable","onDidChangeMarkers","uris","isOurModel","F1","cursorDisposable","onDidChangeCursorPosition","window","requestAnimationFrame","focus","_inlineDisposables","disposables","handleEditorChange","newValue","height","language","onMount","beforeMount","width","loading","Fragment","icon","options","FullPanelExpressionEditor","onClose","handleFPEditorDidMount","getOption","EditorOption","escapeKeyDisposable","Escape","changeCount","changeDisposable","lastLineLength","getLineLength","_fullScreenDisposables","onClick","useASTParser","controlKey","ast","setAST","tokens","setTokens","dependencies","setDependencies","isLoading","setIsLoading","setError","requestIdRef","messageHandlerRef","controlKeyRef","navigator","serviceWorker","handleMessage","event","data","payload","id","receivedId","expectedId","receivedKey","expectedKey","addEventListener","removeEventListener","controller","postMessage","ASTRenderer","variant","showTokens","getNodeColor","renderInlineNode","node","depth","name","operator","callee","renderTreeNode","children","child","renderTokens","displayTokens","token","ExpressionWrapper","valuesLoading","onValueChange","onDependenciesChange","metadata","expressionContext","availableNodes","myInterface","contextTypeDefinitions","inlineEditor","editorClassName","expressionPlaceholder","evaluateExpression","expressionResult","isEvaluating","isExpressionValid","expectedType","initialMetadata","expressionMetadata","setExpressionMetadata","originalValue","setOriginalValue","formatValue","parseFloat","parseInt","currentEditorValue","setCurrentEditorValue","currentExpressionValueExt","isExpressionValue","isInitialMount","exprValue","exprString","expressionMode","isMetadataOutOfSync","syncedMetadata","isParsing","parseError","dependencyList","dep","exists","typeScriptInferredType","setTypeScriptInferredType","handleTypeInferred","expressionHasNewlines","inferredReturnType","hasTypeMismatch","normalizedInferred","toLowerCase","normalizedExpected","internalExpressionResult","setInternalExpressionResult","internalIsEvaluating","setInternalIsEvaluating","isHovering","setIsHovering","internalIsExpressionValid","setInternalIsExpressionValid","syntax","security","validationState","setValidationState","hasExpressionError","isProgrammaticallyClearing","isSwitchingToFullScreen","isBlur","handleValidationChange","isValid","errors","prev","checkForMultiLine","hasNewlines","isLong","internalEvaluateExpression","message","validation","currentMetadata","currentExpressionValue","handleValueChange","handleExpressionChange","newExpression","handleExpressionBlur","forceBlur","handleModeChange","newMode","shouldBeFullScreen","editorMetadata","handleClear","localInput","setLocalInput","controlProps","onExpressionClick","hasError","renderContent","onMouseDown","title","JSON","stringify","onMouseEnter","onMouseLeave","htmlFor","React5","val","onChangeExpression","expressionValue","target","falsyToString","cx","cva","base","_config_compoundVariants","variants","class","defaultVariants","getVariantClassNames","variantProp","defaultVariantProp","variantKey","propsWithoutUndefined","acc","param","getCompoundVariantClassNames","compoundVariants","cvClass","cvClassName","compoundVariantOptions","every","buttonVariants","default","destructive","secondary","ghost","link","sm","lg","Button","asChild","Comp","React6","Input2"],"mappings":"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","sourcesContent":["import * as React4 from 'react';\nimport React4__default, { useState, useCallback, useEffect, useMemo, useRef } from 'react';\nimport { create } from 'zustand';\nimport { Editor } from '@monaco-editor/react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExpand, faSpinner } from '@fortawesome/pro-regular-svg-icons';\nimport { Slot } from '@radix-ui/react-slot';\n\n// src/components/input.tsx\n\n// ../../node_modules/.pnpm/clsx@2.1.1/node_modules/clsx/dist/clsx.mjs\nfunction r(e) {\n  var t, f, n = \"\";\n  if (\"string\" == typeof e || \"number\" == typeof e) n += e;\n  else if (\"object\" == typeof e) if (Array.isArray(e)) {\n    var o = e.length;\n    for (t = 0; t < o; t++) e[t] && (f = r(e[t])) && (n && (n += \" \"), n += f);\n  } else for (f in e) e[f] && (n && (n += \" \"), n += f);\n  return n;\n}\nfunction clsx() {\n  for (var e, t, f = 0, n = \"\", o = arguments.length; f < o; f++) (e = arguments[f]) && (t = r(e)) && (n && (n += \" \"), n += t);\n  return n;\n}\nvar clsx_default = clsx;\n\n// ../../node_modules/.pnpm/tailwind-merge@3.1.0/node_modules/tailwind-merge/dist/bundle-mjs.mjs\nvar CLASS_PART_SEPARATOR = \"-\";\nvar createClassGroupUtils = (config) => {\n  const classMap = createClassMap(config);\n  const {\n    conflictingClassGroups,\n    conflictingClassGroupModifiers\n  } = config;\n  const getClassGroupId = (className) => {\n    const classParts = className.split(CLASS_PART_SEPARATOR);\n    if (classParts[0] === \"\" && classParts.length !== 1) {\n      classParts.shift();\n    }\n    return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);\n  };\n  const getConflictingClassGroupIds = (classGroupId, hasPostfixModifier) => {\n    const conflicts = conflictingClassGroups[classGroupId] || [];\n    if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {\n      return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]];\n    }\n    return conflicts;\n  };\n  return {\n    getClassGroupId,\n    getConflictingClassGroupIds\n  };\n};\nvar getGroupRecursive = (classParts, classPartObject) => {\n  if (classParts.length === 0) {\n    return classPartObject.classGroupId;\n  }\n  const currentClassPart = classParts[0];\n  const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);\n  const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;\n  if (classGroupFromNextClassPart) {\n    return classGroupFromNextClassPart;\n  }\n  if (classPartObject.validators.length === 0) {\n    return void 0;\n  }\n  const classRest = classParts.join(CLASS_PART_SEPARATOR);\n  return classPartObject.validators.find(({\n    validator\n  }) => validator(classRest))?.classGroupId;\n};\nvar arbitraryPropertyRegex = /^\\[(.+)\\]$/;\nvar getGroupIdForArbitraryProperty = (className) => {\n  if (arbitraryPropertyRegex.test(className)) {\n    const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];\n    const property = arbitraryPropertyClassName?.substring(0, arbitraryPropertyClassName.indexOf(\":\"));\n    if (property) {\n      return \"arbitrary..\" + property;\n    }\n  }\n};\nvar createClassMap = (config) => {\n  const {\n    theme,\n    classGroups\n  } = config;\n  const classMap = {\n    nextPart: /* @__PURE__ */ new Map(),\n    validators: []\n  };\n  for (const classGroupId in classGroups) {\n    processClassesRecursively(classGroups[classGroupId], classMap, classGroupId, theme);\n  }\n  return classMap;\n};\nvar processClassesRecursively = (classGroup, classPartObject, classGroupId, theme) => {\n  classGroup.forEach((classDefinition) => {\n    if (typeof classDefinition === \"string\") {\n      const classPartObjectToEdit = classDefinition === \"\" ? classPartObject : getPart(classPartObject, classDefinition);\n      classPartObjectToEdit.classGroupId = classGroupId;\n      return;\n    }\n    if (typeof classDefinition === \"function\") {\n      if (isThemeGetter(classDefinition)) {\n        processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);\n        return;\n      }\n      classPartObject.validators.push({\n        validator: classDefinition,\n        classGroupId\n      });\n      return;\n    }\n    Object.entries(classDefinition).forEach(([key, classGroup2]) => {\n      processClassesRecursively(classGroup2, getPart(classPartObject, key), classGroupId, theme);\n    });\n  });\n};\nvar getPart = (classPartObject, path) => {\n  let currentClassPartObject = classPartObject;\n  path.split(CLASS_PART_SEPARATOR).forEach((pathPart) => {\n    if (!currentClassPartObject.nextPart.has(pathPart)) {\n      currentClassPartObject.nextPart.set(pathPart, {\n        nextPart: /* @__PURE__ */ new Map(),\n        validators: []\n      });\n    }\n    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);\n  });\n  return currentClassPartObject;\n};\nvar isThemeGetter = (func) => func.isThemeGetter;\nvar createLruCache = (maxCacheSize) => {\n  if (maxCacheSize < 1) {\n    return {\n      get: () => void 0,\n      set: () => {\n      }\n    };\n  }\n  let cacheSize = 0;\n  let cache = /* @__PURE__ */ new Map();\n  let previousCache = /* @__PURE__ */ new Map();\n  const update = (key, value) => {\n    cache.set(key, value);\n    cacheSize++;\n    if (cacheSize > maxCacheSize) {\n      cacheSize = 0;\n      previousCache = cache;\n      cache = /* @__PURE__ */ new Map();\n    }\n  };\n  return {\n    get(key) {\n      let value = cache.get(key);\n      if (value !== void 0) {\n        return value;\n      }\n      if ((value = previousCache.get(key)) !== void 0) {\n        update(key, value);\n        return value;\n      }\n    },\n    set(key, value) {\n      if (cache.has(key)) {\n        cache.set(key, value);\n      } else {\n        update(key, value);\n      }\n    }\n  };\n};\nvar IMPORTANT_MODIFIER = \"!\";\nvar MODIFIER_SEPARATOR = \":\";\nvar MODIFIER_SEPARATOR_LENGTH = MODIFIER_SEPARATOR.length;\nvar createParseClassName = (config) => {\n  const {\n    prefix,\n    experimentalParseClassName\n  } = config;\n  let parseClassName = (className) => {\n    const modifiers = [];\n    let bracketDepth = 0;\n    let parenDepth = 0;\n    let modifierStart = 0;\n    let postfixModifierPosition;\n    for (let index = 0; index < className.length; index++) {\n      let currentCharacter = className[index];\n      if (bracketDepth === 0 && parenDepth === 0) {\n        if (currentCharacter === MODIFIER_SEPARATOR) {\n          modifiers.push(className.slice(modifierStart, index));\n          modifierStart = index + MODIFIER_SEPARATOR_LENGTH;\n          continue;\n        }\n        if (currentCharacter === \"/\") {\n          postfixModifierPosition = index;\n          continue;\n        }\n      }\n      if (currentCharacter === \"[\") {\n        bracketDepth++;\n      } else if (currentCharacter === \"]\") {\n        bracketDepth--;\n      } else if (currentCharacter === \"(\") {\n        parenDepth++;\n      } else if (currentCharacter === \")\") {\n        parenDepth--;\n      }\n    }\n    const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);\n    const baseClassName = stripImportantModifier(baseClassNameWithImportantModifier);\n    const hasImportantModifier = baseClassName !== baseClassNameWithImportantModifier;\n    const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;\n    return {\n      modifiers,\n      hasImportantModifier,\n      baseClassName,\n      maybePostfixModifierPosition\n    };\n  };\n  if (prefix) {\n    const fullPrefix = prefix + MODIFIER_SEPARATOR;\n    const parseClassNameOriginal = parseClassName;\n    parseClassName = (className) => className.startsWith(fullPrefix) ? parseClassNameOriginal(className.substring(fullPrefix.length)) : {\n      isExternal: true,\n      modifiers: [],\n      hasImportantModifier: false,\n      baseClassName: className,\n      maybePostfixModifierPosition: void 0\n    };\n  }\n  if (experimentalParseClassName) {\n    const parseClassNameOriginal = parseClassName;\n    parseClassName = (className) => experimentalParseClassName({\n      className,\n      parseClassName: parseClassNameOriginal\n    });\n  }\n  return parseClassName;\n};\nvar stripImportantModifier = (baseClassName) => {\n  if (baseClassName.endsWith(IMPORTANT_MODIFIER)) {\n    return baseClassName.substring(0, baseClassName.length - 1);\n  }\n  if (baseClassName.startsWith(IMPORTANT_MODIFIER)) {\n    return baseClassName.substring(1);\n  }\n  return baseClassName;\n};\nvar createSortModifiers = (config) => {\n  const orderSensitiveModifiers = Object.fromEntries(config.orderSensitiveModifiers.map((modifier) => [modifier, true]));\n  const sortModifiers = (modifiers) => {\n    if (modifiers.length <= 1) {\n      return modifiers;\n    }\n    const sortedModifiers = [];\n    let unsortedModifiers = [];\n    modifiers.forEach((modifier) => {\n      const isPositionSensitive = modifier[0] === \"[\" || orderSensitiveModifiers[modifier];\n      if (isPositionSensitive) {\n        sortedModifiers.push(...unsortedModifiers.sort(), modifier);\n        unsortedModifiers = [];\n      } else {\n        unsortedModifiers.push(modifier);\n      }\n    });\n    sortedModifiers.push(...unsortedModifiers.sort());\n    return sortedModifiers;\n  };\n  return sortModifiers;\n};\nvar createConfigUtils = (config) => ({\n  cache: createLruCache(config.cacheSize),\n  parseClassName: createParseClassName(config),\n  sortModifiers: createSortModifiers(config),\n  ...createClassGroupUtils(config)\n});\nvar SPLIT_CLASSES_REGEX = /\\s+/;\nvar mergeClassList = (classList, configUtils) => {\n  const {\n    parseClassName,\n    getClassGroupId,\n    getConflictingClassGroupIds,\n    sortModifiers\n  } = configUtils;\n  const classGroupsInConflict = [];\n  const classNames = classList.trim().split(SPLIT_CLASSES_REGEX);\n  let result = \"\";\n  for (let index = classNames.length - 1; index >= 0; index -= 1) {\n    const originalClassName = classNames[index];\n    const {\n      isExternal,\n      modifiers,\n      hasImportantModifier,\n      baseClassName,\n      maybePostfixModifierPosition\n    } = parseClassName(originalClassName);\n    if (isExternal) {\n      result = originalClassName + (result.length > 0 ? \" \" + result : result);\n      continue;\n    }\n    let hasPostfixModifier = !!maybePostfixModifierPosition;\n    let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);\n    if (!classGroupId) {\n      if (!hasPostfixModifier) {\n        result = originalClassName + (result.length > 0 ? \" \" + result : result);\n        continue;\n      }\n      classGroupId = getClassGroupId(baseClassName);\n      if (!classGroupId) {\n        result = originalClassName + (result.length > 0 ? \" \" + result : result);\n        continue;\n      }\n      hasPostfixModifier = false;\n    }\n    const variantModifier = sortModifiers(modifiers).join(\":\");\n    const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;\n    const classId = modifierId + classGroupId;\n    if (classGroupsInConflict.includes(classId)) {\n      continue;\n    }\n    classGroupsInConflict.push(classId);\n    const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier);\n    for (let i = 0; i < conflictGroups.length; ++i) {\n      const group = conflictGroups[i];\n      classGroupsInConflict.push(modifierId + group);\n    }\n    result = originalClassName + (result.length > 0 ? \" \" + result : result);\n  }\n  return result;\n};\nfunction twJoin() {\n  let index = 0;\n  let argument;\n  let resolvedValue;\n  let string = \"\";\n  while (index < arguments.length) {\n    if (argument = arguments[index++]) {\n      if (resolvedValue = toValue(argument)) {\n        string && (string += \" \");\n        string += resolvedValue;\n      }\n    }\n  }\n  return string;\n}\nvar toValue = (mix) => {\n  if (typeof mix === \"string\") {\n    return mix;\n  }\n  let resolvedValue;\n  let string = \"\";\n  for (let k = 0; k < mix.length; k++) {\n    if (mix[k]) {\n      if (resolvedValue = toValue(mix[k])) {\n        string && (string += \" \");\n        string += resolvedValue;\n      }\n    }\n  }\n  return string;\n};\nfunction createTailwindMerge(createConfigFirst, ...createConfigRest) {\n  let configUtils;\n  let cacheGet;\n  let cacheSet;\n  let functionToCall = initTailwindMerge;\n  function initTailwindMerge(classList) {\n    const config = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst());\n    configUtils = createConfigUtils(config);\n    cacheGet = configUtils.cache.get;\n    cacheSet = configUtils.cache.set;\n    functionToCall = tailwindMerge;\n    return tailwindMerge(classList);\n  }\n  function tailwindMerge(classList) {\n    const cachedResult = cacheGet(classList);\n    if (cachedResult) {\n      return cachedResult;\n    }\n    const result = mergeClassList(classList, configUtils);\n    cacheSet(classList, result);\n    return result;\n  }\n  return function callTailwindMerge() {\n    return functionToCall(twJoin.apply(null, arguments));\n  };\n}\nvar fromTheme = (key) => {\n  const themeGetter = (theme) => theme[key] || [];\n  themeGetter.isThemeGetter = true;\n  return themeGetter;\n};\nvar arbitraryValueRegex = /^\\[(?:(\\w[\\w-]*):)?(.+)\\]$/i;\nvar arbitraryVariableRegex = /^\\((?:(\\w[\\w-]*):)?(.+)\\)$/i;\nvar fractionRegex = /^\\d+\\/\\d+$/;\nvar tshirtUnitRegex = /^(\\d+(\\.\\d+)?)?(xs|sm|md|lg|xl)$/;\nvar lengthUnitRegex = /\\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\\b(calc|min|max|clamp)\\(.+\\)|^0$/;\nvar colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\\(.+\\)$/;\nvar shadowRegex = /^(inset_)?-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/;\nvar imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\\(.+\\)$/;\nvar isFraction = (value) => fractionRegex.test(value);\nvar isNumber = (value) => Boolean(value) && !Number.isNaN(Number(value));\nvar isInteger = (value) => Boolean(value) && Number.isInteger(Number(value));\nvar isPercent = (value) => value.endsWith(\"%\") && isNumber(value.slice(0, -1));\nvar isTshirtSize = (value) => tshirtUnitRegex.test(value);\nvar isAny = () => true;\nvar isLengthOnly = (value) => (\n  // `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.\n  // For example, `hsl(0 0% 0%)` would be classified as a length without this check.\n  // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.\n  lengthUnitRegex.test(value) && !colorFunctionRegex.test(value)\n);\nvar isNever = () => false;\nvar isShadow = (value) => shadowRegex.test(value);\nvar isImage = (value) => imageRegex.test(value);\nvar isAnyNonArbitrary = (value) => !isArbitraryValue(value) && !isArbitraryVariable(value);\nvar isArbitrarySize = (value) => getIsArbitraryValue(value, isLabelSize, isNever);\nvar isArbitraryValue = (value) => arbitraryValueRegex.test(value);\nvar isArbitraryLength = (value) => getIsArbitraryValue(value, isLabelLength, isLengthOnly);\nvar isArbitraryNumber = (value) => getIsArbitraryValue(value, isLabelNumber, isNumber);\nvar isArbitraryPosition = (value) => getIsArbitraryValue(value, isLabelPosition, isNever);\nvar isArbitraryImage = (value) => getIsArbitraryValue(value, isLabelImage, isImage);\nvar isArbitraryShadow = (value) => getIsArbitraryValue(value, isNever, isShadow);\nvar isArbitraryVariable = (value) => arbitraryVariableRegex.test(value);\nvar isArbitraryVariableLength = (value) => getIsArbitraryVariable(value, isLabelLength);\nvar isArbitraryVariableFamilyName = (value) => getIsArbitraryVariable(value, isLabelFamilyName);\nvar isArbitraryVariablePosition = (value) => getIsArbitraryVariable(value, isLabelPosition);\nvar isArbitraryVariableSize = (value) => getIsArbitraryVariable(value, isLabelSize);\nvar isArbitraryVariableImage = (value) => getIsArbitraryVariable(value, isLabelImage);\nvar isArbitraryVariableShadow = (value) => getIsArbitraryVariable(value, isLabelShadow, true);\nvar getIsArbitraryValue = (value, testLabel, testValue) => {\n  const result = arbitraryValueRegex.exec(value);\n  if (result) {\n    if (result[1]) {\n      return testLabel(result[1]);\n    }\n    return testValue(result[2]);\n  }\n  return false;\n};\nvar getIsArbitraryVariable = (value, testLabel, shouldMatchNoLabel = false) => {\n  const result = arbitraryVariableRegex.exec(value);\n  if (result) {\n    if (result[1]) {\n      return testLabel(result[1]);\n    }\n    return shouldMatchNoLabel;\n  }\n  return false;\n};\nvar isLabelPosition = (label) => label === \"position\";\nvar imageLabels = /* @__PURE__ */ new Set([\"image\", \"url\"]);\nvar isLabelImage = (label) => imageLabels.has(label);\nvar sizeLabels = /* @__PURE__ */ new Set([\"length\", \"size\", \"percentage\"]);\nvar isLabelSize = (label) => sizeLabels.has(label);\nvar isLabelLength = (label) => label === \"length\";\nvar isLabelNumber = (label) => label === \"number\";\nvar isLabelFamilyName = (label) => label === \"family-name\";\nvar isLabelShadow = (label) => label === \"shadow\";\nvar getDefaultConfig = () => {\n  const themeColor = fromTheme(\"color\");\n  const themeFont = fromTheme(\"font\");\n  const themeText = fromTheme(\"text\");\n  const themeFontWeight = fromTheme(\"font-weight\");\n  const themeTracking = fromTheme(\"tracking\");\n  const themeLeading = fromTheme(\"leading\");\n  const themeBreakpoint = fromTheme(\"breakpoint\");\n  const themeContainer = fromTheme(\"container\");\n  const themeSpacing = fromTheme(\"spacing\");\n  const themeRadius = fromTheme(\"radius\");\n  const themeShadow = fromTheme(\"shadow\");\n  const themeInsetShadow = fromTheme(\"inset-shadow\");\n  const themeDropShadow = fromTheme(\"drop-shadow\");\n  const themeBlur = fromTheme(\"blur\");\n  const themePerspective = fromTheme(\"perspective\");\n  const themeAspect = fromTheme(\"aspect\");\n  const themeEase = fromTheme(\"ease\");\n  const themeAnimate = fromTheme(\"animate\");\n  const scaleBreak = () => [\"auto\", \"avoid\", \"all\", \"avoid-page\", \"page\", \"left\", \"right\", \"column\"];\n  const scalePosition = () => [\"bottom\", \"center\", \"left\", \"left-bottom\", \"left-top\", \"right\", \"right-bottom\", \"right-top\", \"top\"];\n  const scaleOverflow = () => [\"auto\", \"hidden\", \"clip\", \"visible\", \"scroll\"];\n  const scaleOverscroll = () => [\"auto\", \"contain\", \"none\"];\n  const scaleUnambiguousSpacing = () => [isArbitraryVariable, isArbitraryValue, themeSpacing];\n  const scaleInset = () => [isFraction, \"full\", \"auto\", ...scaleUnambiguousSpacing()];\n  const scaleGridTemplateColsRows = () => [isInteger, \"none\", \"subgrid\", isArbitraryVariable, isArbitraryValue];\n  const scaleGridColRowStartAndEnd = () => [\"auto\", {\n    span: [\"full\", isInteger, isArbitraryVariable, isArbitraryValue]\n  }, isInteger, isArbitraryVariable, isArbitraryValue];\n  const scaleGridColRowStartOrEnd = () => [isInteger, \"auto\", isArbitraryVariable, isArbitraryValue];\n  const scaleGridAutoColsRows = () => [\"auto\", \"min\", \"max\", \"fr\", isArbitraryVariable, isArbitraryValue];\n  const scaleAlignPrimaryAxis = () => [\"start\", \"end\", \"center\", \"between\", \"around\", \"evenly\", \"stretch\", \"baseline\"];\n  const scaleAlignSecondaryAxis = () => [\"start\", \"end\", \"center\", \"stretch\"];\n  const scaleMargin = () => [\"auto\", ...scaleUnambiguousSpacing()];\n  const scaleSizing = () => [isFraction, \"auto\", \"full\", \"dvw\", \"dvh\", \"lvw\", \"lvh\", \"svw\", \"svh\", \"min\", \"max\", \"fit\", ...scaleUnambiguousSpacing()];\n  const scaleColor = () => [themeColor, isArbitraryVariable, isArbitraryValue];\n  const scaleGradientStopPosition = () => [isPercent, isArbitraryVariableLength, isArbitraryLength];\n  const scaleRadius = () => [\n    // Deprecated since Tailwind CSS v4.0.0\n    \"\",\n    \"none\",\n    \"full\",\n    themeRadius,\n    isArbitraryVariable,\n    isArbitraryValue\n  ];\n  const scaleBorderWidth = () => [\"\", isNumber, isArbitraryVariableLength, isArbitraryLength];\n  const scaleLineStyle = () => [\"solid\", \"dashed\", \"dotted\", \"double\"];\n  const scaleBlendMode = () => [\"normal\", \"multiply\", \"screen\", \"overlay\", \"darken\", \"lighten\", \"color-dodge\", \"color-burn\", \"hard-light\", \"soft-light\", \"difference\", \"exclusion\", \"hue\", \"saturation\", \"color\", \"luminosity\"];\n  const scaleBlur = () => [\n    // Deprecated since Tailwind CSS v4.0.0\n    \"\",\n    \"none\",\n    themeBlur,\n    isArbitraryVariable,\n    isArbitraryValue\n  ];\n  const scaleOrigin = () => [\"center\", \"top\", \"top-right\", \"right\", \"bottom-right\", \"bottom\", \"bottom-left\", \"left\", \"top-left\", isArbitraryVariable, isArbitraryValue];\n  const scaleRotate = () => [\"none\", isNumber, isArbitraryVariable, isArbitraryValue];\n  const scaleScale = () => [\"none\", isNumber, isArbitraryVariable, isArbitraryValue];\n  const scaleSkew = () => [isNumber, isArbitraryVariable, isArbitraryValue];\n  const scaleTranslate = () => [isFraction, \"full\", ...scaleUnambiguousSpacing()];\n  return {\n    cacheSize: 500,\n    theme: {\n      animate: [\"spin\", \"ping\", \"pulse\", \"bounce\"],\n      aspect: [\"video\"],\n      blur: [isTshirtSize],\n      breakpoint: [isTshirtSize],\n      color: [isAny],\n      container: [isTshirtSize],\n      \"drop-shadow\": [isTshirtSize],\n      ease: [\"in\", \"out\", \"in-out\"],\n      font: [isAnyNonArbitrary],\n      \"font-weight\": [\"thin\", \"extralight\", \"light\", \"normal\", \"medium\", \"semibold\", \"bold\", \"extrabold\", \"black\"],\n      \"inset-shadow\": [isTshirtSize],\n      leading: [\"none\", \"tight\", \"snug\", \"normal\", \"relaxed\", \"loose\"],\n      perspective: [\"dramatic\", \"near\", \"normal\", \"midrange\", \"distant\", \"none\"],\n      radius: [isTshirtSize],\n      shadow: [isTshirtSize],\n      spacing: [\"px\", isNumber],\n      text: [isTshirtSize],\n      tracking: [\"tighter\", \"tight\", \"normal\", \"wide\", \"wider\", \"widest\"]\n    },\n    classGroups: {\n      // --------------\n      // --- Layout ---\n      // --------------\n      /**\n       * Aspect Ratio\n       * @see https://tailwindcss.com/docs/aspect-ratio\n       */\n      aspect: [{\n        aspect: [\"auto\", \"square\", isFraction, isArbitraryValue, isArbitraryVariable, themeAspect]\n      }],\n      /**\n       * Container\n       * @see https://tailwindcss.com/docs/container\n       * @deprecated since Tailwind CSS v4.0.0\n       */\n      container: [\"container\"],\n      /**\n       * Columns\n       * @see https://tailwindcss.com/docs/columns\n       */\n      columns: [{\n        columns: [isNumber, isArbitraryValue, isArbitraryVariable, themeContainer]\n      }],\n      /**\n       * Break After\n       * @see https://tailwindcss.com/docs/break-after\n       */\n      \"break-after\": [{\n        \"break-after\": scaleBreak()\n      }],\n      /**\n       * Break Before\n       * @see https://tailwindcss.com/docs/break-before\n       */\n      \"break-before\": [{\n        \"break-before\": scaleBreak()\n      }],\n      /**\n       * Break Inside\n       * @see https://tailwindcss.com/docs/break-inside\n       */\n      \"break-inside\": [{\n        \"break-inside\": [\"auto\", \"avoid\", \"avoid-page\", \"avoid-column\"]\n      }],\n      /**\n       * Box Decoration Break\n       * @see https://tailwindcss.com/docs/box-decoration-break\n       */\n      \"box-decoration\": [{\n        \"box-decoration\": [\"slice\", \"clone\"]\n      }],\n      /**\n       * Box Sizing\n       * @see https://tailwindcss.com/docs/box-sizing\n       */\n      box: [{\n        box: [\"border\", \"content\"]\n      }],\n      /**\n       * Display\n       * @see https://tailwindcss.com/docs/display\n       */\n      display: [\"block\", \"inline-block\", \"inline\", \"flex\", \"inline-flex\", \"table\", \"inline-table\", \"table-caption\", \"table-cell\", \"table-column\", \"table-column-group\", \"table-footer-group\", \"table-header-group\", \"table-row-group\", \"table-row\", \"flow-root\", \"grid\", \"inline-grid\", \"contents\", \"list-item\", \"hidden\"],\n      /**\n       * Screen Reader Only\n       * @see https://tailwindcss.com/docs/display#screen-reader-only\n       */\n      sr: [\"sr-only\", \"not-sr-only\"],\n      /**\n       * Floats\n       * @see https://tailwindcss.com/docs/float\n       */\n      float: [{\n        float: [\"right\", \"left\", \"none\", \"start\", \"end\"]\n      }],\n      /**\n       * Clear\n       * @see https://tailwindcss.com/docs/clear\n       */\n      clear: [{\n        clear: [\"left\", \"right\", \"both\", \"none\", \"start\", \"end\"]\n      }],\n      /**\n       * Isolation\n       * @see https://tailwindcss.com/docs/isolation\n       */\n      isolation: [\"isolate\", \"isolation-auto\"],\n      /**\n       * Object Fit\n       * @see https://tailwindcss.com/docs/object-fit\n       */\n      \"object-fit\": [{\n        object: [\"contain\", \"cover\", \"fill\", \"none\", \"scale-down\"]\n      }],\n      /**\n       * Object Position\n       * @see https://tailwindcss.com/docs/object-position\n       */\n      \"object-position\": [{\n        object: [...scalePosition(), isArbitraryValue, isArbitraryVariable]\n      }],\n      /**\n       * Overflow\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      overflow: [{\n        overflow: scaleOverflow()\n      }],\n      /**\n       * Overflow X\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      \"overflow-x\": [{\n        \"overflow-x\": scaleOverflow()\n      }],\n      /**\n       * Overflow Y\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      \"overflow-y\": [{\n        \"overflow-y\": scaleOverflow()\n      }],\n      /**\n       * Overscroll Behavior\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      overscroll: [{\n        overscroll: scaleOverscroll()\n      }],\n      /**\n       * Overscroll Behavior X\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      \"overscroll-x\": [{\n        \"overscroll-x\": scaleOverscroll()\n      }],\n      /**\n       * Overscroll Behavior Y\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      \"overscroll-y\": [{\n        \"overscroll-y\": scaleOverscroll()\n      }],\n      /**\n       * Position\n       * @see https://tailwindcss.com/docs/position\n       */\n      position: [\"static\", \"fixed\", \"absolute\", \"relative\", \"sticky\"],\n      /**\n       * Top / Right / Bottom / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      inset: [{\n        inset: scaleInset()\n      }],\n      /**\n       * Right / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      \"inset-x\": [{\n        \"inset-x\": scaleInset()\n      }],\n      /**\n       * Top / Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      \"inset-y\": [{\n        \"inset-y\": scaleInset()\n      }],\n      /**\n       * Start\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      start: [{\n        start: scaleInset()\n      }],\n      /**\n       * End\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      end: [{\n        end: scaleInset()\n      }],\n      /**\n       * Top\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      top: [{\n        top: scaleInset()\n      }],\n      /**\n       * Right\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      right: [{\n        right: scaleInset()\n      }],\n      /**\n       * Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      bottom: [{\n        bottom: scaleInset()\n      }],\n      /**\n       * Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      left: [{\n        left: scaleInset()\n      }],\n      /**\n       * Visibility\n       * @see https://tailwindcss.com/docs/visibility\n       */\n      visibility: [\"visible\", \"invisible\", \"collapse\"],\n      /**\n       * Z-Index\n       * @see https://tailwindcss.com/docs/z-index\n       */\n      z: [{\n        z: [isInteger, \"auto\", isArbitraryVariable, isArbitraryValue]\n      }],\n      // ------------------------\n      // --- Flexbox and Grid ---\n      // ------------------------\n      /**\n       * Flex Basis\n       * @see https://tailwindcss.com/docs/flex-basis\n       */\n      basis: [{\n        basis: [isFraction, \"full\", \"auto\", themeContainer, ...scaleUnambiguousSpacing()]\n      }],\n      /**\n       * Flex Direction\n       * @see https://tailwindcss.com/docs/flex-direction\n       */\n      \"flex-direction\": [{\n        flex: [\"row\", \"row-reverse\", \"col\", \"col-reverse\"]\n      }],\n      /**\n       * Flex Wrap\n       * @see https://tailwindcss.com/docs/flex-wrap\n       */\n      \"flex-wrap\": [{\n        flex: [\"nowrap\", \"wrap\", \"wrap-reverse\"]\n      }],\n      /**\n       * Flex\n       * @see https://tailwindcss.com/docs/flex\n       */\n      flex: [{\n        flex: [isNumber, isFraction, \"auto\", \"initial\", \"none\", isArbitraryValue]\n      }],\n      /**\n       * Flex Grow\n       * @see https://tailwindcss.com/docs/flex-grow\n       */\n      grow: [{\n        grow: [\"\", isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Flex Shrink\n       * @see https://tailwindcss.com/docs/flex-shrink\n       */\n      shrink: [{\n        shrink: [\"\", isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Order\n       * @see https://tailwindcss.com/docs/order\n       */\n      order: [{\n        order: [isInteger, \"first\", \"last\", \"none\", isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Grid Template Columns\n       * @see https://tailwindcss.com/docs/grid-template-columns\n       */\n      \"grid-cols\": [{\n        \"grid-cols\": scaleGridTemplateColsRows()\n      }],\n      /**\n       * Grid Column Start / End\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      \"col-start-end\": [{\n        col: scaleGridColRowStartAndEnd()\n      }],\n      /**\n       * Grid Column Start\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      \"col-start\": [{\n        \"col-start\": scaleGridColRowStartOrEnd()\n      }],\n      /**\n       * Grid Column End\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      \"col-end\": [{\n        \"col-end\": scaleGridColRowStartOrEnd()\n      }],\n      /**\n       * Grid Template Rows\n       * @see https://tailwindcss.com/docs/grid-template-rows\n       */\n      \"grid-rows\": [{\n        \"grid-rows\": scaleGridTemplateColsRows()\n      }],\n      /**\n       * Grid Row Start / End\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      \"row-start-end\": [{\n        row: scaleGridColRowStartAndEnd()\n      }],\n      /**\n       * Grid Row Start\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      \"row-start\": [{\n        \"row-start\": scaleGridColRowStartOrEnd()\n      }],\n      /**\n       * Grid Row End\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      \"row-end\": [{\n        \"row-end\": scaleGridColRowStartOrEnd()\n      }],\n      /**\n       * Grid Auto Flow\n       * @see https://tailwindcss.com/docs/grid-auto-flow\n       */\n      \"grid-flow\": [{\n        \"grid-flow\": [\"row\", \"col\", \"dense\", \"row-dense\", \"col-dense\"]\n      }],\n      /**\n       * Grid Auto Columns\n       * @see https://tailwindcss.com/docs/grid-auto-columns\n       */\n      \"auto-cols\": [{\n        \"auto-cols\": scaleGridAutoColsRows()\n      }],\n      /**\n       * Grid Auto Rows\n       * @see https://tailwindcss.com/docs/grid-auto-rows\n       */\n      \"auto-rows\": [{\n        \"auto-rows\": scaleGridAutoColsRows()\n      }],\n      /**\n       * Gap\n       * @see https://tailwindcss.com/docs/gap\n       */\n      gap: [{\n        gap: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Gap X\n       * @see https://tailwindcss.com/docs/gap\n       */\n      \"gap-x\": [{\n        \"gap-x\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Gap Y\n       * @see https://tailwindcss.com/docs/gap\n       */\n      \"gap-y\": [{\n        \"gap-y\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Justify Content\n       * @see https://tailwindcss.com/docs/justify-content\n       */\n      \"justify-content\": [{\n        justify: [...scaleAlignPrimaryAxis(), \"normal\"]\n      }],\n      /**\n       * Justify Items\n       * @see https://tailwindcss.com/docs/justify-items\n       */\n      \"justify-items\": [{\n        \"justify-items\": [...scaleAlignSecondaryAxis(), \"normal\"]\n      }],\n      /**\n       * Justify Self\n       * @see https://tailwindcss.com/docs/justify-self\n       */\n      \"justify-self\": [{\n        \"justify-self\": [\"auto\", ...scaleAlignSecondaryAxis()]\n      }],\n      /**\n       * Align Content\n       * @see https://tailwindcss.com/docs/align-content\n       */\n      \"align-content\": [{\n        content: [\"normal\", ...scaleAlignPrimaryAxis()]\n      }],\n      /**\n       * Align Items\n       * @see https://tailwindcss.com/docs/align-items\n       */\n      \"align-items\": [{\n        items: [...scaleAlignSecondaryAxis(), \"baseline\"]\n      }],\n      /**\n       * Align Self\n       * @see https://tailwindcss.com/docs/align-self\n       */\n      \"align-self\": [{\n        self: [\"auto\", ...scaleAlignSecondaryAxis(), \"baseline\"]\n      }],\n      /**\n       * Place Content\n       * @see https://tailwindcss.com/docs/place-content\n       */\n      \"place-content\": [{\n        \"place-content\": scaleAlignPrimaryAxis()\n      }],\n      /**\n       * Place Items\n       * @see https://tailwindcss.com/docs/place-items\n       */\n      \"place-items\": [{\n        \"place-items\": [...scaleAlignSecondaryAxis(), \"baseline\"]\n      }],\n      /**\n       * Place Self\n       * @see https://tailwindcss.com/docs/place-self\n       */\n      \"place-self\": [{\n        \"place-self\": [\"auto\", ...scaleAlignSecondaryAxis()]\n      }],\n      // Spacing\n      /**\n       * Padding\n       * @see https://tailwindcss.com/docs/padding\n       */\n      p: [{\n        p: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding X\n       * @see https://tailwindcss.com/docs/padding\n       */\n      px: [{\n        px: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Y\n       * @see https://tailwindcss.com/docs/padding\n       */\n      py: [{\n        py: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Start\n       * @see https://tailwindcss.com/docs/padding\n       */\n      ps: [{\n        ps: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding End\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pe: [{\n        pe: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Top\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pt: [{\n        pt: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Right\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pr: [{\n        pr: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Bottom\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pb: [{\n        pb: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Left\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pl: [{\n        pl: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Margin\n       * @see https://tailwindcss.com/docs/margin\n       */\n      m: [{\n        m: scaleMargin()\n      }],\n      /**\n       * Margin X\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mx: [{\n        mx: scaleMargin()\n      }],\n      /**\n       * Margin Y\n       * @see https://tailwindcss.com/docs/margin\n       */\n      my: [{\n        my: scaleMargin()\n      }],\n      /**\n       * Margin Start\n       * @see https://tailwindcss.com/docs/margin\n       */\n      ms: [{\n        ms: scaleMargin()\n      }],\n      /**\n       * Margin End\n       * @see https://tailwindcss.com/docs/margin\n       */\n      me: [{\n        me: scaleMargin()\n      }],\n      /**\n       * Margin Top\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mt: [{\n        mt: scaleMargin()\n      }],\n      /**\n       * Margin Right\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mr: [{\n        mr: scaleMargin()\n      }],\n      /**\n       * Margin Bottom\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mb: [{\n        mb: scaleMargin()\n      }],\n      /**\n       * Margin Left\n       * @see https://tailwindcss.com/docs/margin\n       */\n      ml: [{\n        ml: scaleMargin()\n      }],\n      /**\n       * Space Between X\n       * @see https://tailwindcss.com/docs/margin#adding-space-between-children\n       */\n      \"space-x\": [{\n        \"space-x\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Space Between X Reverse\n       * @see https://tailwindcss.com/docs/margin#adding-space-between-children\n       */\n      \"space-x-reverse\": [\"space-x-reverse\"],\n      /**\n       * Space Between Y\n       * @see https://tailwindcss.com/docs/margin#adding-space-between-children\n       */\n      \"space-y\": [{\n        \"space-y\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Space Between Y Reverse\n       * @see https://tailwindcss.com/docs/margin#adding-space-between-children\n       */\n      \"space-y-reverse\": [\"space-y-reverse\"],\n      // --------------\n      // --- Sizing ---\n      // --------------\n      /**\n       * Size\n       * @see https://tailwindcss.com/docs/width#setting-both-width-and-height\n       */\n      size: [{\n        size: scaleSizing()\n      }],\n      /**\n       * Width\n       * @see https://tailwindcss.com/docs/width\n       */\n      w: [{\n        w: [themeContainer, \"screen\", ...scaleSizing()]\n      }],\n      /**\n       * Min-Width\n       * @see https://tailwindcss.com/docs/min-width\n       */\n      \"min-w\": [{\n        \"min-w\": [\n          themeContainer,\n          \"screen\",\n          /** Deprecated. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\n          \"none\",\n          ...scaleSizing()\n        ]\n      }],\n      /**\n       * Max-Width\n       * @see https://tailwindcss.com/docs/max-width\n       */\n      \"max-w\": [{\n        \"max-w\": [\n          themeContainer,\n          \"screen\",\n          \"none\",\n          /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\n          \"prose\",\n          /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\n          {\n            screen: [themeBreakpoint]\n          },\n          ...scaleSizing()\n        ]\n      }],\n      /**\n       * Height\n       * @see https://tailwindcss.com/docs/height\n       */\n      h: [{\n        h: [\"screen\", ...scaleSizing()]\n      }],\n      /**\n       * Min-Height\n       * @see https://tailwindcss.com/docs/min-height\n       */\n      \"min-h\": [{\n        \"min-h\": [\"screen\", \"none\", ...scaleSizing()]\n      }],\n      /**\n       * Max-Height\n       * @see https://tailwindcss.com/docs/max-height\n       */\n      \"max-h\": [{\n        \"max-h\": [\"screen\", ...scaleSizing()]\n      }],\n      // ------------------\n      // --- Typography ---\n      // ------------------\n      /**\n       * Font Size\n       * @see https://tailwindcss.com/docs/font-size\n       */\n      \"font-size\": [{\n        text: [\"base\", themeText, isArbitraryVariableLength, isArbitraryLength]\n      }],\n      /**\n       * Font Smoothing\n       * @see https://tailwindcss.com/docs/font-smoothing\n       */\n      \"font-smoothing\": [\"antialiased\", \"subpixel-antialiased\"],\n      /**\n       * Font Style\n       * @see https://tailwindcss.com/docs/font-style\n       */\n      \"font-style\": [\"italic\", \"not-italic\"],\n      /**\n       * Font Weight\n       * @see https://tailwindcss.com/docs/font-weight\n       */\n      \"font-weight\": [{\n        font: [themeFontWeight, isArbitraryVariable, isArbitraryNumber]\n      }],\n      /**\n       * Font Stretch\n       * @see https://tailwindcss.com/docs/font-stretch\n       */\n      \"font-stretch\": [{\n        \"font-stretch\": [\"ultra-condensed\", \"extra-condensed\", \"condensed\", \"semi-condensed\", \"normal\", \"semi-expanded\", \"expanded\", \"extra-expanded\", \"ultra-expanded\", isPercent, isArbitraryValue]\n      }],\n      /**\n       * Font Family\n       * @see https://tailwindcss.com/docs/font-family\n       */\n      \"font-family\": [{\n        font: [isArbitraryVariableFamilyName, isArbitraryValue, themeFont]\n      }],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-normal\": [\"normal-nums\"],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-ordinal\": [\"ordinal\"],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-slashed-zero\": [\"slashed-zero\"],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-figure\": [\"lining-nums\", \"oldstyle-nums\"],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-spacing\": [\"proportional-nums\", \"tabular-nums\"],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-fraction\": [\"diagonal-fractions\", \"stacked-fractions\"],\n      /**\n       * Letter Spacing\n       * @see https://tailwindcss.com/docs/letter-spacing\n       */\n      tracking: [{\n        tracking: [themeTracking, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Line Clamp\n       * @see https://tailwindcss.com/docs/line-clamp\n       */\n      \"line-clamp\": [{\n        \"line-clamp\": [isNumber, \"none\", isArbitraryVariable, isArbitraryNumber]\n      }],\n      /**\n       * Line Height\n       * @see https://tailwindcss.com/docs/line-height\n       */\n      leading: [{\n        leading: [\n          /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\n          themeLeading,\n          ...scaleUnambiguousSpacing()\n        ]\n      }],\n      /**\n       * List Style Image\n       * @see https://tailwindcss.com/docs/list-style-image\n       */\n      \"list-image\": [{\n        \"list-image\": [\"none\", isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * List Style Position\n       * @see https://tailwindcss.com/docs/list-style-position\n       */\n      \"list-style-position\": [{\n        list: [\"inside\", \"outside\"]\n      }],\n      /**\n       * List Style Type\n       * @see https://tailwindcss.com/docs/list-style-type\n       */\n      \"list-style-type\": [{\n        list: [\"disc\", \"decimal\", \"none\", isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Text Alignment\n       * @see https://tailwindcss.com/docs/text-align\n       */\n      \"text-alignment\": [{\n        text: [\"left\", \"center\", \"right\", \"justify\", \"start\", \"end\"]\n      }],\n      /**\n       * Placeholder Color\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://v3.tailwindcss.com/docs/placeholder-color\n       */\n      \"placeholder-color\": [{\n        placeholder: scaleColor()\n      }],\n      /**\n       * Text Color\n       * @see https://tailwindcss.com/docs/text-color\n       */\n      \"text-color\": [{\n        text: scaleColor()\n      }],\n      /**\n       * Text Decoration\n       * @see https://tailwindcss.com/docs/text-decoration\n       */\n      \"text-decoration\": [\"underline\", \"overline\", \"line-through\", \"no-underline\"],\n      /**\n       * Text Decoration Style\n       * @see https://tailwindcss.com/docs/text-decoration-style\n       */\n      \"text-decoration-style\": [{\n        decoration: [...scaleLineStyle(), \"wavy\"]\n      }],\n      /**\n       * Text Decoration Thickness\n       * @see https://tailwindcss.com/docs/text-decoration-thickness\n       */\n      \"text-decoration-thickness\": [{\n        decoration: [isNumber, \"from-font\", \"auto\", isArbitraryVariable, isArbitraryLength]\n      }],\n      /**\n       * Text Decoration Color\n       * @see https://tailwindcss.com/docs/text-decoration-color\n       */\n      \"text-decoration-color\": [{\n        decoration: scaleColor()\n      }],\n      /**\n       * Text Underline Offset\n       * @see https://tailwindcss.com/docs/text-underline-offset\n       */\n      \"underline-offset\": [{\n        \"underline-offset\": [isNumber, \"auto\", isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Text Transform\n       * @see https://tailwindcss.com/docs/text-transform\n       */\n      \"text-transform\": [\"uppercase\", \"lowercase\", \"capitalize\", \"normal-case\"],\n      /**\n       * Text Overflow\n       * @see https://tailwindcss.com/docs/text-overflow\n       */\n      \"text-overflow\": [\"truncate\", \"text-ellipsis\", \"text-clip\"],\n      /**\n       * Text Wrap\n       * @see https://tailwindcss.com/docs/text-wrap\n       */\n      \"text-wrap\": [{\n        text: [\"wrap\", \"nowrap\", \"balance\", \"pretty\"]\n      }],\n      /**\n       * Text Indent\n       * @see https://tailwindcss.com/docs/text-indent\n       */\n      indent: [{\n        indent: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Vertical Alignment\n       * @see https://tailwindcss.com/docs/vertical-align\n       */\n      \"vertical-align\": [{\n        align: [\"baseline\", \"top\", \"middle\", \"bottom\", \"text-top\", \"text-bottom\", \"sub\", \"super\", isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Whitespace\n       * @see https://tailwindcss.com/docs/whitespace\n       */\n      whitespace: [{\n        whitespace: [\"normal\", \"nowrap\", \"pre\", \"pre-line\", \"pre-wrap\", \"break-spaces\"]\n      }],\n      /**\n       * Word Break\n       * @see https://tailwindcss.com/docs/word-break\n       */\n      break: [{\n        break: [\"normal\", \"words\", \"all\", \"keep\"]\n      }],\n      /**\n       * Hyphens\n       * @see https://tailwindcss.com/docs/hyphens\n       */\n      hyphens: [{\n        hyphens: [\"none\", \"manual\", \"auto\"]\n      }],\n      /**\n       * Content\n       * @see https://tailwindcss.com/docs/content\n       */\n      content: [{\n        content: [\"none\", isArbitraryVariable, isArbitraryValue]\n      }],\n      // -------------------\n      // --- Backgrounds ---\n      // -------------------\n      /**\n       * Background Attachment\n       * @see https://tailwindcss.com/docs/background-attachment\n       */\n      \"bg-attachment\": [{\n        bg: [\"fixed\", \"local\", \"scroll\"]\n      }],\n      /**\n       * Background Clip\n       * @see https://tailwindcss.com/docs/background-clip\n       */\n      \"bg-clip\": [{\n        \"bg-clip\": [\"border\", \"padding\", \"content\", \"text\"]\n      }],\n      /**\n       * Background Origin\n       * @see https://tailwindcss.com/docs/background-origin\n       */\n      \"bg-origin\": [{\n        \"bg-origin\": [\"border\", \"padding\", \"content\"]\n      }],\n      /**\n       * Background Position\n       * @see https://tailwindcss.com/docs/background-position\n       */\n      \"bg-position\": [{\n        bg: [...scalePosition(), isArbitraryVariablePosition, isArbitraryPosition]\n      }],\n      /**\n       * Background Repeat\n       * @see https://tailwindcss.com/docs/background-repeat\n       */\n      \"bg-repeat\": [{\n        bg: [\"no-repeat\", {\n          repeat: [\"\", \"x\", \"y\", \"space\", \"round\"]\n        }]\n      }],\n      /**\n       * Background Size\n       * @see https://tailwindcss.com/docs/background-size\n       */\n      \"bg-size\": [{\n        bg: [\"auto\", \"cover\", \"contain\", isArbitraryVariableSize, isArbitrarySize]\n      }],\n      /**\n       * Background Image\n       * @see https://tailwindcss.com/docs/background-image\n       */\n      \"bg-image\": [{\n        bg: [\"none\", {\n          linear: [{\n            to: [\"t\", \"tr\", \"r\", \"br\", \"b\", \"bl\", \"l\", \"tl\"]\n          }, isInteger, isArbitraryVariable, isArbitraryValue],\n          radial: [\"\", isArbitraryVariable, isArbitraryValue],\n          conic: [isInteger, isArbitraryVariable, isArbitraryValue]\n        }, isArbitraryVariableImage, isArbitraryImage]\n      }],\n      /**\n       * Background Color\n       * @see https://tailwindcss.com/docs/background-color\n       */\n      \"bg-color\": [{\n        bg: scaleColor()\n      }],\n      /**\n       * Gradient Color Stops From Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-from-pos\": [{\n        from: scaleGradientStopPosition()\n      }],\n      /**\n       * Gradient Color Stops Via Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-via-pos\": [{\n        via: scaleGradientStopPosition()\n      }],\n      /**\n       * Gradient Color Stops To Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-to-pos\": [{\n        to: scaleGradientStopPosition()\n      }],\n      /**\n       * Gradient Color Stops From\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-from\": [{\n        from: scaleColor()\n      }],\n      /**\n       * Gradient Color Stops Via\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-via\": [{\n        via: scaleColor()\n      }],\n      /**\n       * Gradient Color Stops To\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-to\": [{\n        to: scaleColor()\n      }],\n      // ---------------\n      // --- Borders ---\n      // ---------------\n      /**\n       * Border Radius\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      rounded: [{\n        rounded: scaleRadius()\n      }],\n      /**\n       * Border Radius Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-s\": [{\n        \"rounded-s\": scaleRadius()\n      }],\n      /**\n       * Border Radius End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-e\": [{\n        \"rounded-e\": scaleRadius()\n      }],\n      /**\n       * Border Radius Top\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-t\": [{\n        \"rounded-t\": scaleRadius()\n      }],\n      /**\n       * Border Radius Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-r\": [{\n        \"rounded-r\": scaleRadius()\n      }],\n      /**\n       * Border Radius Bottom\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-b\": [{\n        \"rounded-b\": scaleRadius()\n      }],\n      /**\n       * Border Radius Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-l\": [{\n        \"rounded-l\": scaleRadius()\n      }],\n      /**\n       * Border Radius Start Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-ss\": [{\n        \"rounded-ss\": scaleRadius()\n      }],\n      /**\n       * Border Radius Start End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-se\": [{\n        \"rounded-se\": scaleRadius()\n      }],\n      /**\n       * Border Radius End End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-ee\": [{\n        \"rounded-ee\": scaleRadius()\n      }],\n      /**\n       * Border Radius End Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-es\": [{\n        \"rounded-es\": scaleRadius()\n      }],\n      /**\n       * Border Radius Top Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-tl\": [{\n        \"rounded-tl\": scaleRadius()\n      }],\n      /**\n       * Border Radius Top Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-tr\": [{\n        \"rounded-tr\": scaleRadius()\n      }],\n      /**\n       * Border Radius Bottom Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-br\": [{\n        \"rounded-br\": scaleRadius()\n      }],\n      /**\n       * Border Radius Bottom Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-bl\": [{\n        \"rounded-bl\": scaleRadius()\n      }],\n      /**\n       * Border Width\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w\": [{\n        border: scaleBorderWidth()\n      }],\n      /**\n       * Border Width X\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-x\": [{\n        \"border-x\": scaleBorderWidth()\n      }],\n      /**\n       * Border Width Y\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-y\": [{\n        \"border-y\": scaleBorderWidth()\n      }],\n      /**\n       * Border Width Start\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-s\": [{\n        \"border-s\": scaleBorderWidth()\n      }],\n      /**\n       * Border Width End\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-e\": [{\n        \"border-e\": scaleBorderWidth()\n      }],\n      /**\n       * Border Width Top\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-t\": [{\n        \"border-t\": scaleBorderWidth()\n      }],\n      /**\n       * Border Width Right\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-r\": [{\n        \"border-r\": scaleBorderWidth()\n      }],\n      /**\n       * Border Width Bottom\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-b\": [{\n        \"border-b\": scaleBorderWidth()\n      }],\n      /**\n       * Border Width Left\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-l\": [{\n        \"border-l\": scaleBorderWidth()\n      }],\n      /**\n       * Divide Width X\n       * @see https://tailwindcss.com/docs/border-width#between-children\n       */\n      \"divide-x\": [{\n        \"divide-x\": scaleBorderWidth()\n      }],\n      /**\n       * Divide Width X Reverse\n       * @see https://tailwindcss.com/docs/border-width#between-children\n       */\n      \"divide-x-reverse\": [\"divide-x-reverse\"],\n      /**\n       * Divide Width Y\n       * @see https://tailwindcss.com/docs/border-width#between-children\n       */\n      \"divide-y\": [{\n        \"divide-y\": scaleBorderWidth()\n      }],\n      /**\n       * Divide Width Y Reverse\n       * @see https://tailwindcss.com/docs/border-width#between-children\n       */\n      \"divide-y-reverse\": [\"divide-y-reverse\"],\n      /**\n       * Border Style\n       * @see https://tailwindcss.com/docs/border-style\n       */\n      \"border-style\": [{\n        border: [...scaleLineStyle(), \"hidden\", \"none\"]\n      }],\n      /**\n       * Divide Style\n       * @see https://tailwindcss.com/docs/border-style#setting-the-divider-style\n       */\n      \"divide-style\": [{\n        divide: [...scaleLineStyle(), \"hidden\", \"none\"]\n      }],\n      /**\n       * Border Color\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color\": [{\n        border: scaleColor()\n      }],\n      /**\n       * Border Color X\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-x\": [{\n        \"border-x\": scaleColor()\n      }],\n      /**\n       * Border Color Y\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-y\": [{\n        \"border-y\": scaleColor()\n      }],\n      /**\n       * Border Color S\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-s\": [{\n        \"border-s\": scaleColor()\n      }],\n      /**\n       * Border Color E\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-e\": [{\n        \"border-e\": scaleColor()\n      }],\n      /**\n       * Border Color Top\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-t\": [{\n        \"border-t\": scaleColor()\n      }],\n      /**\n       * Border Color Right\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-r\": [{\n        \"border-r\": scaleColor()\n      }],\n      /**\n       * Border Color Bottom\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-b\": [{\n        \"border-b\": scaleColor()\n      }],\n      /**\n       * Border Color Left\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-l\": [{\n        \"border-l\": scaleColor()\n      }],\n      /**\n       * Divide Color\n       * @see https://tailwindcss.com/docs/divide-color\n       */\n      \"divide-color\": [{\n        divide: scaleColor()\n      }],\n      /**\n       * Outline Style\n       * @see https://tailwindcss.com/docs/outline-style\n       */\n      \"outline-style\": [{\n        outline: [...scaleLineStyle(), \"none\", \"hidden\"]\n      }],\n      /**\n       * Outline Offset\n       * @see https://tailwindcss.com/docs/outline-offset\n       */\n      \"outline-offset\": [{\n        \"outline-offset\": [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Outline Width\n       * @see https://tailwindcss.com/docs/outline-width\n       */\n      \"outline-w\": [{\n        outline: [\"\", isNumber, isArbitraryVariableLength, isArbitraryLength]\n      }],\n      /**\n       * Outline Color\n       * @see https://tailwindcss.com/docs/outline-color\n       */\n      \"outline-color\": [{\n        outline: [themeColor]\n      }],\n      // ---------------\n      // --- Effects ---\n      // ---------------\n      /**\n       * Box Shadow\n       * @see https://tailwindcss.com/docs/box-shadow\n       */\n      shadow: [{\n        shadow: [\n          // Deprecated since Tailwind CSS v4.0.0\n          \"\",\n          \"none\",\n          themeShadow,\n          isArbitraryVariableShadow,\n          isArbitraryShadow\n        ]\n      }],\n      /**\n       * Box Shadow Color\n       * @see https://tailwindcss.com/docs/box-shadow#setting-the-shadow-color\n       */\n      \"shadow-color\": [{\n        shadow: scaleColor()\n      }],\n      /**\n       * Inset Box Shadow\n       * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-shadow\n       */\n      \"inset-shadow\": [{\n        \"inset-shadow\": [\"none\", isArbitraryVariable, isArbitraryValue, themeInsetShadow]\n      }],\n      /**\n       * Inset Box Shadow Color\n       * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-shadow-color\n       */\n      \"inset-shadow-color\": [{\n        \"inset-shadow\": scaleColor()\n      }],\n      /**\n       * Ring Width\n       * @see https://tailwindcss.com/docs/box-shadow#adding-a-ring\n       */\n      \"ring-w\": [{\n        ring: scaleBorderWidth()\n      }],\n      /**\n       * Ring Width Inset\n       * @see https://v3.tailwindcss.com/docs/ring-width#inset-rings\n       * @deprecated since Tailwind CSS v4.0.0\n       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158\n       */\n      \"ring-w-inset\": [\"ring-inset\"],\n      /**\n       * Ring Color\n       * @see https://tailwindcss.com/docs/box-shadow#setting-the-ring-color\n       */\n      \"ring-color\": [{\n        ring: scaleColor()\n      }],\n      /**\n       * Ring Offset Width\n       * @see https://v3.tailwindcss.com/docs/ring-offset-width\n       * @deprecated since Tailwind CSS v4.0.0\n       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158\n       */\n      \"ring-offset-w\": [{\n        \"ring-offset\": [isNumber, isArbitraryLength]\n      }],\n      /**\n       * Ring Offset Color\n       * @see https://v3.tailwindcss.com/docs/ring-offset-color\n       * @deprecated since Tailwind CSS v4.0.0\n       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158\n       */\n      \"ring-offset-color\": [{\n        \"ring-offset\": scaleColor()\n      }],\n      /**\n       * Inset Ring Width\n       * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-ring\n       */\n      \"inset-ring-w\": [{\n        \"inset-ring\": scaleBorderWidth()\n      }],\n      /**\n       * Inset Ring Color\n       * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-ring-color\n       */\n      \"inset-ring-color\": [{\n        \"inset-ring\": scaleColor()\n      }],\n      /**\n       * Opacity\n       * @see https://tailwindcss.com/docs/opacity\n       */\n      opacity: [{\n        opacity: [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Mix Blend Mode\n       * @see https://tailwindcss.com/docs/mix-blend-mode\n       */\n      \"mix-blend\": [{\n        \"mix-blend\": [...scaleBlendMode(), \"plus-darker\", \"plus-lighter\"]\n      }],\n      /**\n       * Background Blend Mode\n       * @see https://tailwindcss.com/docs/background-blend-mode\n       */\n      \"bg-blend\": [{\n        \"bg-blend\": scaleBlendMode()\n      }],\n      // ---------------\n      // --- Filters ---\n      // ---------------\n      /**\n       * Filter\n       * @see https://tailwindcss.com/docs/filter\n       */\n      filter: [{\n        filter: [\n          // Deprecated since Tailwind CSS v3.0.0\n          \"\",\n          \"none\",\n          isArbitraryVariable,\n          isArbitraryValue\n        ]\n      }],\n      /**\n       * Blur\n       * @see https://tailwindcss.com/docs/blur\n       */\n      blur: [{\n        blur: scaleBlur()\n      }],\n      /**\n       * Brightness\n       * @see https://tailwindcss.com/docs/brightness\n       */\n      brightness: [{\n        brightness: [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Contrast\n       * @see https://tailwindcss.com/docs/contrast\n       */\n      contrast: [{\n        contrast: [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Drop Shadow\n       * @see https://tailwindcss.com/docs/drop-shadow\n       */\n      \"drop-shadow\": [{\n        \"drop-shadow\": [\n          // Deprecated since Tailwind CSS v4.0.0\n          \"\",\n          \"none\",\n          themeDropShadow,\n          isArbitraryVariable,\n          isArbitraryValue\n        ]\n      }],\n      /**\n       * Grayscale\n       * @see https://tailwindcss.com/docs/grayscale\n       */\n      grayscale: [{\n        grayscale: [\"\", isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Hue Rotate\n       * @see https://tailwindcss.com/docs/hue-rotate\n       */\n      \"hue-rotate\": [{\n        \"hue-rotate\": [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Invert\n       * @see https://tailwindcss.com/docs/invert\n       */\n      invert: [{\n        invert: [\"\", isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Saturate\n       * @see https://tailwindcss.com/docs/saturate\n       */\n      saturate: [{\n        saturate: [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Sepia\n       * @see https://tailwindcss.com/docs/sepia\n       */\n      sepia: [{\n        sepia: [\"\", isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Filter\n       * @see https://tailwindcss.com/docs/backdrop-filter\n       */\n      \"backdrop-filter\": [{\n        \"backdrop-filter\": [\n          // Deprecated since Tailwind CSS v3.0.0\n          \"\",\n          \"none\",\n          isArbitraryVariable,\n          isArbitraryValue\n        ]\n      }],\n      /**\n       * Backdrop Blur\n       * @see https://tailwindcss.com/docs/backdrop-blur\n       */\n      \"backdrop-blur\": [{\n        \"backdrop-blur\": scaleBlur()\n      }],\n      /**\n       * Backdrop Brightness\n       * @see https://tailwindcss.com/docs/backdrop-brightness\n       */\n      \"backdrop-brightness\": [{\n        \"backdrop-brightness\": [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Contrast\n       * @see https://tailwindcss.com/docs/backdrop-contrast\n       */\n      \"backdrop-contrast\": [{\n        \"backdrop-contrast\": [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Grayscale\n       * @see https://tailwindcss.com/docs/backdrop-grayscale\n       */\n      \"backdrop-grayscale\": [{\n        \"backdrop-grayscale\": [\"\", isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Hue Rotate\n       * @see https://tailwindcss.com/docs/backdrop-hue-rotate\n       */\n      \"backdrop-hue-rotate\": [{\n        \"backdrop-hue-rotate\": [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Invert\n       * @see https://tailwindcss.com/docs/backdrop-invert\n       */\n      \"backdrop-invert\": [{\n        \"backdrop-invert\": [\"\", isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Opacity\n       * @see https://tailwindcss.com/docs/backdrop-opacity\n       */\n      \"backdrop-opacity\": [{\n        \"backdrop-opacity\": [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Saturate\n       * @see https://tailwindcss.com/docs/backdrop-saturate\n       */\n      \"backdrop-saturate\": [{\n        \"backdrop-saturate\": [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Sepia\n       * @see https://tailwindcss.com/docs/backdrop-sepia\n       */\n      \"backdrop-sepia\": [{\n        \"backdrop-sepia\": [\"\", isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      // --------------\n      // --- Tables ---\n      // --------------\n      /**\n       * Border Collapse\n       * @see https://tailwindcss.com/docs/border-collapse\n       */\n      \"border-collapse\": [{\n        border: [\"collapse\", \"separate\"]\n      }],\n      /**\n       * Border Spacing\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      \"border-spacing\": [{\n        \"border-spacing\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Border Spacing X\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      \"border-spacing-x\": [{\n        \"border-spacing-x\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Border Spacing Y\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      \"border-spacing-y\": [{\n        \"border-spacing-y\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Table Layout\n       * @see https://tailwindcss.com/docs/table-layout\n       */\n      \"table-layout\": [{\n        table: [\"auto\", \"fixed\"]\n      }],\n      /**\n       * Caption Side\n       * @see https://tailwindcss.com/docs/caption-side\n       */\n      caption: [{\n        caption: [\"top\", \"bottom\"]\n      }],\n      // ---------------------------------\n      // --- Transitions and Animation ---\n      // ---------------------------------\n      /**\n       * Transition Property\n       * @see https://tailwindcss.com/docs/transition-property\n       */\n      transition: [{\n        transition: [\"\", \"all\", \"colors\", \"opacity\", \"shadow\", \"transform\", \"none\", isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Transition Behavior\n       * @see https://tailwindcss.com/docs/transition-behavior\n       */\n      \"transition-behavior\": [{\n        transition: [\"normal\", \"discrete\"]\n      }],\n      /**\n       * Transition Duration\n       * @see https://tailwindcss.com/docs/transition-duration\n       */\n      duration: [{\n        duration: [isNumber, \"initial\", isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Transition Timing Function\n       * @see https://tailwindcss.com/docs/transition-timing-function\n       */\n      ease: [{\n        ease: [\"linear\", \"initial\", themeEase, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Transition Delay\n       * @see https://tailwindcss.com/docs/transition-delay\n       */\n      delay: [{\n        delay: [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Animation\n       * @see https://tailwindcss.com/docs/animation\n       */\n      animate: [{\n        animate: [\"none\", themeAnimate, isArbitraryVariable, isArbitraryValue]\n      }],\n      // ------------------\n      // --- Transforms ---\n      // ------------------\n      /**\n       * Backface Visibility\n       * @see https://tailwindcss.com/docs/backface-visibility\n       */\n      backface: [{\n        backface: [\"hidden\", \"visible\"]\n      }],\n      /**\n       * Perspective\n       * @see https://tailwindcss.com/docs/perspective\n       */\n      perspective: [{\n        perspective: [themePerspective, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Perspective Origin\n       * @see https://tailwindcss.com/docs/perspective-origin\n       */\n      \"perspective-origin\": [{\n        \"perspective-origin\": scaleOrigin()\n      }],\n      /**\n       * Rotate\n       * @see https://tailwindcss.com/docs/rotate\n       */\n      rotate: [{\n        rotate: scaleRotate()\n      }],\n      /**\n       * Rotate X\n       * @see https://tailwindcss.com/docs/rotate\n       */\n      \"rotate-x\": [{\n        \"rotate-x\": scaleRotate()\n      }],\n      /**\n       * Rotate Y\n       * @see https://tailwindcss.com/docs/rotate\n       */\n      \"rotate-y\": [{\n        \"rotate-y\": scaleRotate()\n      }],\n      /**\n       * Rotate Z\n       * @see https://tailwindcss.com/docs/rotate\n       */\n      \"rotate-z\": [{\n        \"rotate-z\": scaleRotate()\n      }],\n      /**\n       * Scale\n       * @see https://tailwindcss.com/docs/scale\n       */\n      scale: [{\n        scale: scaleScale()\n      }],\n      /**\n       * Scale X\n       * @see https://tailwindcss.com/docs/scale\n       */\n      \"scale-x\": [{\n        \"scale-x\": scaleScale()\n      }],\n      /**\n       * Scale Y\n       * @see https://tailwindcss.com/docs/scale\n       */\n      \"scale-y\": [{\n        \"scale-y\": scaleScale()\n      }],\n      /**\n       * Scale Z\n       * @see https://tailwindcss.com/docs/scale\n       */\n      \"scale-z\": [{\n        \"scale-z\": scaleScale()\n      }],\n      /**\n       * Scale 3D\n       * @see https://tailwindcss.com/docs/scale\n       */\n      \"scale-3d\": [\"scale-3d\"],\n      /**\n       * Skew\n       * @see https://tailwindcss.com/docs/skew\n       */\n      skew: [{\n        skew: scaleSkew()\n      }],\n      /**\n       * Skew X\n       * @see https://tailwindcss.com/docs/skew\n       */\n      \"skew-x\": [{\n        \"skew-x\": scaleSkew()\n      }],\n      /**\n       * Skew Y\n       * @see https://tailwindcss.com/docs/skew\n       */\n      \"skew-y\": [{\n        \"skew-y\": scaleSkew()\n      }],\n      /**\n       * Transform\n       * @see https://tailwindcss.com/docs/transform\n       */\n      transform: [{\n        transform: [isArbitraryVariable, isArbitraryValue, \"\", \"none\", \"gpu\", \"cpu\"]\n      }],\n      /**\n       * Transform Origin\n       * @see https://tailwindcss.com/docs/transform-origin\n       */\n      \"transform-origin\": [{\n        origin: scaleOrigin()\n      }],\n      /**\n       * Transform Style\n       * @see https://tailwindcss.com/docs/transform-style\n       */\n      \"transform-style\": [{\n        transform: [\"3d\", \"flat\"]\n      }],\n      /**\n       * Translate\n       * @see https://tailwindcss.com/docs/translate\n       */\n      translate: [{\n        translate: scaleTranslate()\n      }],\n      /**\n       * Translate X\n       * @see https://tailwindcss.com/docs/translate\n       */\n      \"translate-x\": [{\n        \"translate-x\": scaleTranslate()\n      }],\n      /**\n       * Translate Y\n       * @see https://tailwindcss.com/docs/translate\n       */\n      \"translate-y\": [{\n        \"translate-y\": scaleTranslate()\n      }],\n      /**\n       * Translate Z\n       * @see https://tailwindcss.com/docs/translate\n       */\n      \"translate-z\": [{\n        \"translate-z\": scaleTranslate()\n      }],\n      /**\n       * Translate None\n       * @see https://tailwindcss.com/docs/translate\n       */\n      \"translate-none\": [\"translate-none\"],\n      // ---------------------\n      // --- Interactivity ---\n      // ---------------------\n      /**\n       * Accent Color\n       * @see https://tailwindcss.com/docs/accent-color\n       */\n      accent: [{\n        accent: scaleColor()\n      }],\n      /**\n       * Appearance\n       * @see https://tailwindcss.com/docs/appearance\n       */\n      appearance: [{\n        appearance: [\"none\", \"auto\"]\n      }],\n      /**\n       * Caret Color\n       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities\n       */\n      \"caret-color\": [{\n        caret: scaleColor()\n      }],\n      /**\n       * Color Scheme\n       * @see https://tailwindcss.com/docs/color-scheme\n       */\n      \"color-scheme\": [{\n        scheme: [\"normal\", \"dark\", \"light\", \"light-dark\", \"only-dark\", \"only-light\"]\n      }],\n      /**\n       * Cursor\n       * @see https://tailwindcss.com/docs/cursor\n       */\n      cursor: [{\n        cursor: [\"auto\", \"default\", \"pointer\", \"wait\", \"text\", \"move\", \"help\", \"not-allowed\", \"none\", \"context-menu\", \"progress\", \"cell\", \"crosshair\", \"vertical-text\", \"alias\", \"copy\", \"no-drop\", \"grab\", \"grabbing\", \"all-scroll\", \"col-resize\", \"row-resize\", \"n-resize\", \"e-resize\", \"s-resize\", \"w-resize\", \"ne-resize\", \"nw-resize\", \"se-resize\", \"sw-resize\", \"ew-resize\", \"ns-resize\", \"nesw-resize\", \"nwse-resize\", \"zoom-in\", \"zoom-out\", isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Field Sizing\n       * @see https://tailwindcss.com/docs/field-sizing\n       */\n      \"field-sizing\": [{\n        \"field-sizing\": [\"fixed\", \"content\"]\n      }],\n      /**\n       * Pointer Events\n       * @see https://tailwindcss.com/docs/pointer-events\n       */\n      \"pointer-events\": [{\n        \"pointer-events\": [\"auto\", \"none\"]\n      }],\n      /**\n       * Resize\n       * @see https://tailwindcss.com/docs/resize\n       */\n      resize: [{\n        resize: [\"none\", \"\", \"y\", \"x\"]\n      }],\n      /**\n       * Scroll Behavior\n       * @see https://tailwindcss.com/docs/scroll-behavior\n       */\n      \"scroll-behavior\": [{\n        scroll: [\"auto\", \"smooth\"]\n      }],\n      /**\n       * Scroll Margin\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-m\": [{\n        \"scroll-m\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin X\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-mx\": [{\n        \"scroll-mx\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Y\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-my\": [{\n        \"scroll-my\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Start\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-ms\": [{\n        \"scroll-ms\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin End\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-me\": [{\n        \"scroll-me\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Top\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-mt\": [{\n        \"scroll-mt\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Right\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-mr\": [{\n        \"scroll-mr\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Bottom\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-mb\": [{\n        \"scroll-mb\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Left\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-ml\": [{\n        \"scroll-ml\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-p\": [{\n        \"scroll-p\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding X\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-px\": [{\n        \"scroll-px\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Y\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-py\": [{\n        \"scroll-py\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Start\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-ps\": [{\n        \"scroll-ps\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding End\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-pe\": [{\n        \"scroll-pe\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Top\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-pt\": [{\n        \"scroll-pt\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Right\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-pr\": [{\n        \"scroll-pr\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Bottom\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-pb\": [{\n        \"scroll-pb\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Left\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-pl\": [{\n        \"scroll-pl\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Snap Align\n       * @see https://tailwindcss.com/docs/scroll-snap-align\n       */\n      \"snap-align\": [{\n        snap: [\"start\", \"end\", \"center\", \"align-none\"]\n      }],\n      /**\n       * Scroll Snap Stop\n       * @see https://tailwindcss.com/docs/scroll-snap-stop\n       */\n      \"snap-stop\": [{\n        snap: [\"normal\", \"always\"]\n      }],\n      /**\n       * Scroll Snap Type\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */\n      \"snap-type\": [{\n        snap: [\"none\", \"x\", \"y\", \"both\"]\n      }],\n      /**\n       * Scroll Snap Type Strictness\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */\n      \"snap-strictness\": [{\n        snap: [\"mandatory\", \"proximity\"]\n      }],\n      /**\n       * Touch Action\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      touch: [{\n        touch: [\"auto\", \"none\", \"manipulation\"]\n      }],\n      /**\n       * Touch Action X\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      \"touch-x\": [{\n        \"touch-pan\": [\"x\", \"left\", \"right\"]\n      }],\n      /**\n       * Touch Action Y\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      \"touch-y\": [{\n        \"touch-pan\": [\"y\", \"up\", \"down\"]\n      }],\n      /**\n       * Touch Action Pinch Zoom\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      \"touch-pz\": [\"touch-pinch-zoom\"],\n      /**\n       * User Select\n       * @see https://tailwindcss.com/docs/user-select\n       */\n      select: [{\n        select: [\"none\", \"text\", \"all\", \"auto\"]\n      }],\n      /**\n       * Will Change\n       * @see https://tailwindcss.com/docs/will-change\n       */\n      \"will-change\": [{\n        \"will-change\": [\"auto\", \"scroll\", \"contents\", \"transform\", isArbitraryVariable, isArbitraryValue]\n      }],\n      // -----------\n      // --- SVG ---\n      // -----------\n      /**\n       * Fill\n       * @see https://tailwindcss.com/docs/fill\n       */\n      fill: [{\n        fill: [\"none\", ...scaleColor()]\n      }],\n      /**\n       * Stroke Width\n       * @see https://tailwindcss.com/docs/stroke-width\n       */\n      \"stroke-w\": [{\n        stroke: [isNumber, isArbitraryVariableLength, isArbitraryLength, isArbitraryNumber]\n      }],\n      /**\n       * Stroke\n       * @see https://tailwindcss.com/docs/stroke\n       */\n      stroke: [{\n        stroke: [\"none\", ...scaleColor()]\n      }],\n      // ---------------------\n      // --- Accessibility ---\n      // ---------------------\n      /**\n       * Forced Color Adjust\n       * @see https://tailwindcss.com/docs/forced-color-adjust\n       */\n      \"forced-color-adjust\": [{\n        \"forced-color-adjust\": [\"auto\", \"none\"]\n      }]\n    },\n    conflictingClassGroups: {\n      overflow: [\"overflow-x\", \"overflow-y\"],\n      overscroll: [\"overscroll-x\", \"overscroll-y\"],\n      inset: [\"inset-x\", \"inset-y\", \"start\", \"end\", \"top\", \"right\", \"bottom\", \"left\"],\n      \"inset-x\": [\"right\", \"left\"],\n      \"inset-y\": [\"top\", \"bottom\"],\n      flex: [\"basis\", \"grow\", \"shrink\"],\n      gap: [\"gap-x\", \"gap-y\"],\n      p: [\"px\", \"py\", \"ps\", \"pe\", \"pt\", \"pr\", \"pb\", \"pl\"],\n      px: [\"pr\", \"pl\"],\n      py: [\"pt\", \"pb\"],\n      m: [\"mx\", \"my\", \"ms\", \"me\", \"mt\", \"mr\", \"mb\", \"ml\"],\n      mx: [\"mr\", \"ml\"],\n      my: [\"mt\", \"mb\"],\n      size: [\"w\", \"h\"],\n      \"font-size\": [\"leading\"],\n      \"fvn-normal\": [\"fvn-ordinal\", \"fvn-slashed-zero\", \"fvn-figure\", \"fvn-spacing\", \"fvn-fraction\"],\n      \"fvn-ordinal\": [\"fvn-normal\"],\n      \"fvn-slashed-zero\": [\"fvn-normal\"],\n      \"fvn-figure\": [\"fvn-normal\"],\n      \"fvn-spacing\": [\"fvn-normal\"],\n      \"fvn-fraction\": [\"fvn-normal\"],\n      \"line-clamp\": [\"display\", \"overflow\"],\n      rounded: [\"rounded-s\", \"rounded-e\", \"rounded-t\", \"rounded-r\", \"rounded-b\", \"rounded-l\", \"rounded-ss\", \"rounded-se\", \"rounded-ee\", \"rounded-es\", \"rounded-tl\", \"rounded-tr\", \"rounded-br\", \"rounded-bl\"],\n      \"rounded-s\": [\"rounded-ss\", \"rounded-es\"],\n      \"rounded-e\": [\"rounded-se\", \"rounded-ee\"],\n      \"rounded-t\": [\"rounded-tl\", \"rounded-tr\"],\n      \"rounded-r\": [\"rounded-tr\", \"rounded-br\"],\n      \"rounded-b\": [\"rounded-br\", \"rounded-bl\"],\n      \"rounded-l\": [\"rounded-tl\", \"rounded-bl\"],\n      \"border-spacing\": [\"border-spacing-x\", \"border-spacing-y\"],\n      \"border-w\": [\"border-w-s\", \"border-w-e\", \"border-w-t\", \"border-w-r\", \"border-w-b\", \"border-w-l\"],\n      \"border-w-x\": [\"border-w-r\", \"border-w-l\"],\n      \"border-w-y\": [\"border-w-t\", \"border-w-b\"],\n      \"border-color\": [\"border-color-s\", \"border-color-e\", \"border-color-t\", \"border-color-r\", \"border-color-b\", \"border-color-l\"],\n      \"border-color-x\": [\"border-color-r\", \"border-color-l\"],\n      \"border-color-y\": [\"border-color-t\", \"border-color-b\"],\n      translate: [\"translate-x\", \"translate-y\", \"translate-none\"],\n      \"translate-none\": [\"translate\", \"translate-x\", \"translate-y\", \"translate-z\"],\n      \"scroll-m\": [\"scroll-mx\", \"scroll-my\", \"scroll-ms\", \"scroll-me\", \"scroll-mt\", \"scroll-mr\", \"scroll-mb\", \"scroll-ml\"],\n      \"scroll-mx\": [\"scroll-mr\", \"scroll-ml\"],\n      \"scroll-my\": [\"scroll-mt\", \"scroll-mb\"],\n      \"scroll-p\": [\"scroll-px\", \"scroll-py\", \"scroll-ps\", \"scroll-pe\", \"scroll-pt\", \"scroll-pr\", \"scroll-pb\", \"scroll-pl\"],\n      \"scroll-px\": [\"scroll-pr\", \"scroll-pl\"],\n      \"scroll-py\": [\"scroll-pt\", \"scroll-pb\"],\n      touch: [\"touch-x\", \"touch-y\", \"touch-pz\"],\n      \"touch-x\": [\"touch\"],\n      \"touch-y\": [\"touch\"],\n      \"touch-pz\": [\"touch\"]\n    },\n    conflictingClassGroupModifiers: {\n      \"font-size\": [\"leading\"]\n    },\n    orderSensitiveModifiers: [\"before\", \"after\", \"placeholder\", \"file\", \"marker\", \"selection\", \"first-line\", \"first-letter\", \"backdrop\", \"*\", \"**\"]\n  };\n};\nvar twMerge = /* @__PURE__ */ createTailwindMerge(getDefaultConfig);\n\n// src/lib/utils.ts\nfunction cn(...inputs) {\n  return twMerge(clsx(inputs));\n}\n\n// src/components/ui/input.tsx\nfunction Input({\n  className,\n  wrapperClassName,\n  type,\n  required,\n  error,\n  ...props\n}) {\n  return /* @__PURE__ */ React4.createElement(\"div\", { className: cn(\"uii:relative\", wrapperClassName) }, /* @__PURE__ */ React4.createElement(\n    \"input\",\n    {\n      \"aria-invalid\": error,\n      type,\n      \"data-slot\": \"input\",\n      className: cn(\n        \"uii:border-input uii:file:text-foreground uii:placeholder:text-muted-foreground uii:selection:bg-primary uii:selection:text-primary-foreground uii:flex uii:h-9 uii:w-full uii:min-w-0 uii:rounded-sm uii:border uii:bg-transparent uii:px-3 uii:py-1 uii:text-base uii:shadow-xs uii:transition-[color,box-shadow] uii:outline-none uii:file:inline-flex uii:file:h-7 uii:file:border-0 uii:file:bg-transparent uii:file:text-sm uii:file:font-medium uii:disabled:pointer-events-none uii:disabled:cursor-not-allowed uii:disabled:opacity-50 uii:md:text-sm\",\n        \"uii:focus-visible:border-ring uii:focus-visible:ring-ring/50 uii:focus-visible:ring-[3px]\",\n        \"uii:aria-invalid:ring-destructive/20 uii:dark:aria-invalid:ring-destructive/40 uii:aria-invalid:border-destructive\",\n        {\n          \"uii:pr-30\": error\n        },\n        className\n      ),\n      ...props\n    }\n  ), error && /* @__PURE__ */ React4.createElement(\"span\", { className: \"uii:absolute uii:inset-y-0 uii:right-0 uii:flex uii:items-center uii:pr-2 uii:border-l-10 uii:border-l-background uii:my-[6px] uii:pointer-events-none \" }, /* @__PURE__ */ React4.createElement(\"span\", { className: \"uii:bg-destructive uii:text-white uii:px-1.5 uii:py-1.5 uii:rounded-xs uii:uppercase uii:tracking-wide uii:font-medium uii:text-xs uii:leading-none uii:font-sans\" }, error && required ? \"required\" : \"error\")));\n}\nvar defaultState = {\n  expression: \"\",\n  mode: \"value\",\n  isEditing: false,\n  currentValue: void 0,\n  isFullScreen: false\n};\nvar useExpressionModeStore = create((set, get) => ({\n  states: {},\n  setState: (fieldName, state) => {\n    set((store) => ({\n      states: {\n        ...store.states,\n        [fieldName]: state\n      }\n    }));\n  },\n  getState: (fieldName) => {\n    const store = get();\n    return store.states[fieldName] || defaultState;\n  },\n  clear: (fieldName) => {\n    set((store) => ({\n      states: {\n        ...store.states,\n        [fieldName]: defaultState\n      }\n    }));\n  },\n  switchToValue: (fieldName) => {\n    const currentState = get().getState(fieldName);\n    get().setState(fieldName, {\n      ...currentState,\n      mode: \"value\",\n      isEditing: false\n    });\n  },\n  switchToExpression: (fieldName) => {\n    const currentState = get().getState(fieldName);\n    get().setState(fieldName, {\n      ...currentState,\n      mode: \"expression\",\n      isEditing: false\n    });\n  },\n  switchToEditor: (fieldName) => {\n    const currentState = get().getState(fieldName);\n    get().setState(fieldName, {\n      ...currentState,\n      mode: \"expression\",\n      isEditing: true\n    });\n  },\n  setExpression: (fieldName, expression) => {\n    const currentState = get().getState(fieldName);\n    get().setState(fieldName, {\n      ...currentState,\n      expression\n    });\n  },\n  setEditing: (fieldName, isEditing) => {\n    const currentState = get().getState(fieldName);\n    get().setState(fieldName, {\n      ...currentState,\n      isEditing\n    });\n  },\n  setFullScreen: (fieldName, isFullScreen) => {\n    const currentState = get().getState(fieldName);\n    get().setState(fieldName, {\n      ...currentState,\n      isFullScreen\n    });\n  },\n  setCurrentValue: (fieldName, value) => {\n    const currentState = get().getState(fieldName);\n    get().setState(fieldName, {\n      ...currentState,\n      currentValue: value\n    });\n  }\n}));\n\n// src/hooks/useExpressionMode.ts\nfunction useExpressionMode(fieldName) {\n  const store = useExpressionModeStore();\n  const state = store.getState(fieldName);\n  const switchToValue = useCallback(() => {\n    store.switchToValue(fieldName);\n  }, [store, fieldName]);\n  const switchToExpression = useCallback(() => {\n    store.switchToExpression(fieldName);\n  }, [store, fieldName]);\n  const switchToEditor = useCallback(() => {\n    store.switchToEditor(fieldName);\n  }, [store, fieldName]);\n  const clear = useCallback(() => {\n    store.clear(fieldName);\n  }, [store, fieldName]);\n  const setExpression = useCallback((expr) => {\n    store.setExpression(fieldName, expr);\n  }, [store, fieldName]);\n  const setEditing = useCallback((editing) => {\n    store.setEditing(fieldName, editing);\n  }, [store, fieldName]);\n  const setCurrentValue = useCallback((value) => {\n    store.setCurrentValue(fieldName, value);\n  }, [store, fieldName]);\n  const setFullScreen = useCallback((isFullScreen) => {\n    store.setFullScreen(fieldName, isFullScreen);\n  }, [store, fieldName]);\n  return {\n    current: state.mode,\n    switchToValue,\n    switchToExpression,\n    switchToEditor,\n    clear,\n    isExpressionMode: state.mode === \"expression\",\n    isEditorMode: state.isEditing,\n    expression: state.expression,\n    setExpression,\n    isEditing: state.isEditing,\n    setEditing,\n    currentValue: state.currentValue,\n    setCurrentValue,\n    isFullScreen: state.isFullScreen,\n    setFullScreen\n  };\n}\nasync function inferTypeFromMonaco(editor, monaco, expression, logPrefix = \"\\u{1F537}\") {\n  if (!expression.trim()) {\n    console.log(`${logPrefix} Type inference skipped - no expression`);\n    return null;\n  }\n  if (!editor.hasTextFocus()) {\n    console.log(`${logPrefix} Skipping type inference - editor does not have focus`);\n    return null;\n  }\n  console.log(`${logPrefix} Running type inference, expression:`, expression);\n  try {\n    const currentModel = editor.getModel();\n    if (currentModel) {\n      const markers = monaco.editor.getModelMarkers({ resource: currentModel.uri });\n      const hasErrors = markers.some((marker) => marker.severity === monaco.MarkerSeverity.Error);\n      if (hasErrors) {\n        console.log(`${logPrefix} Type inference skipped - expression has validation errors`);\n        return \"error\";\n      }\n    }\n    const wrappedCode = `const __expr__ = (${expression});`;\n    const tempModel = monaco.editor.createModel(wrappedCode, \"typescript\");\n    const worker = await monaco.languages.typescript.getTypeScriptWorker();\n    const client = await worker(tempModel.uri);\n    const exprIndex = wrappedCode.indexOf(\"__expr__\");\n    const position = tempModel.getPositionAt(exprIndex);\n    const quickInfo = await client.getQuickInfoAtPosition(\n      tempModel.uri.toString(),\n      tempModel.getOffsetAt(position)\n    );\n    console.log(`${logPrefix} QuickInfo response:`, quickInfo);\n    let extractedType = null;\n    if (quickInfo && quickInfo.displayParts) {\n      let foundColon = false;\n      const typeParts = [];\n      for (const part of quickInfo.displayParts) {\n        if (foundColon) typeParts.push(part);\n        if (part.kind === \"punctuation\" && part.text === \":\" && !foundColon) {\n          const prevPart = quickInfo.displayParts[quickInfo.displayParts.indexOf(part) - 1];\n          if (prevPart && (prevPart.kind === \"localName\" || prevPart.kind === \"parameterName\")) {\n            foundColon = true;\n          }\n        }\n      }\n      if (typeParts.length > 0) {\n        const typeString = typeParts.map((p) => p.text).join(\"\").trim();\n        console.log(`${logPrefix} Extracted type:`, typeString);\n        if (typeString && typeString !== \"any\") {\n          extractedType = typeString;\n        }\n      }\n    }\n    tempModel.dispose();\n    return extractedType;\n  } catch (error) {\n    console.warn(`${logPrefix} Type inference failed:`, error);\n    return null;\n  }\n}\nvar InlineEditorOptions = {\n  fontSize: \"14px\",\n  // md:text-sm\n  fontWeight: \"normal\",\n  wordWrap: \"off\",\n  lineNumbers: \"off\",\n  lineNumbersMinChars: 0,\n  overviewRulerLanes: 0,\n  overviewRulerBorder: false,\n  hideCursorInOverviewRuler: true,\n  lineDecorationsWidth: 0,\n  glyphMargin: false,\n  folding: false,\n  scrollBeyondLastColumn: 0,\n  scrollbar: {\n    horizontal: \"hidden\",\n    vertical: \"hidden\",\n    alwaysConsumeMouseWheel: false\n  },\n  find: {\n    addExtraSpaceOnTop: false,\n    autoFindInSelection: \"never\",\n    seedSearchStringFromSelection: false\n  },\n  minimap: { enabled: false },\n  wordBasedSuggestions: true,\n  // Enable for better UX\n  links: false,\n  occurrencesHighlight: false,\n  cursorStyle: \"line\",\n  // Match input cursor\n  renderLineHighlight: \"none\",\n  contextmenu: false,\n  roundedSelection: false,\n  hover: {\n    delay: 300\n  },\n  acceptSuggestionOnEnter: \"on\",\n  automaticLayout: true,\n  fixedOverflowWidgets: true,\n  // Match Input component styling\n  padding: { top: 4, bottom: 4 },\n  // py-1 equivalent\n  fontFamily: \"inherit\",\n  // Use system font\n  letterSpacing: \"normal\",\n  lineHeight: \"normal\"\n};\nvar FullPanelEditorOptions = {\n  fontSize: \"14px\",\n  fontWeight: \"normal\",\n  wordWrap: \"on\",\n  lineNumbers: \"on\",\n  lineNumbersMinChars: 3,\n  overviewRulerLanes: 3,\n  overviewRulerBorder: true,\n  hideCursorInOverviewRuler: false,\n  lineDecorationsWidth: 10,\n  glyphMargin: true,\n  folding: true,\n  scrollBeyondLastColumn: 5,\n  scrollbar: {\n    horizontal: \"auto\",\n    vertical: \"auto\",\n    alwaysConsumeMouseWheel: false\n  },\n  find: {\n    addExtraSpaceOnTop: false,\n    autoFindInSelection: \"never\",\n    seedSearchStringFromSelection: false\n  },\n  minimap: { enabled: true },\n  wordBasedSuggestions: true,\n  links: true,\n  occurrencesHighlight: true,\n  cursorStyle: \"line\",\n  renderLineHighlight: \"line\",\n  contextmenu: true,\n  roundedSelection: true,\n  hover: {\n    delay: 300\n  },\n  // IMPORTANT: Don't accept suggestions on Enter - let Enter create new lines\n  acceptSuggestionOnEnter: \"off\",\n  automaticLayout: true,\n  fixedOverflowWidgets: true,\n  readOnly: false,\n  // Explicitly allow editing\n  domReadOnly: false\n  // Allow DOM manipulation\n};\nfunction InlineExpressionEditor({\n  value,\n  onChange,\n  onBlur,\n  onEnter,\n  onTypeInferred,\n  onValidationChange,\n  context = {},\n  className,\n  placeholder = \"Enter expression...\"\n}) {\n  const editorRef = useRef(null);\n  const monacoRef = useRef(null);\n  const typeInferenceTimeoutRef = useRef(null);\n  const handleEditorWillMount = (monaco) => {\n    monacoRef.current = monaco;\n    const contextKeys = Object.keys(context);\n    if (contextKeys.length > 0) {\n      monaco.languages.typescript.javascriptDefaults.addExtraLib(`\n        declare const ${contextKeys.join(\", \")}: any;\n      `, \"context.d.ts\");\n    }\n  };\n  const handleEditorDidMount = (editor, monaco) => {\n    editorRef.current = editor;\n    editor.updateOptions(InlineEditorOptions);\n    console.log(\"\\u{1F537} Inline editor mounted!\");\n    editor.getDomNode();\n    const findCommand = editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_F, () => {\n    });\n    const enterKeyDisposable = editor.onKeyDown((e) => {\n      if (e.keyCode === monaco.KeyCode.Enter) {\n        if (!editor.hasTextFocus()) {\n          console.log(\"\\u{1F537} Enter keydown but inline editor does NOT have focus - allowing default\");\n          return;\n        }\n        if (e.shiftKey) {\n          console.log(\"\\u{1F537} Shift+Enter in INLINE editor - switching to full-screen\");\n          e.preventDefault();\n          e.stopPropagation();\n          if (onEnter) {\n            onEnter();\n          }\n          return;\n        }\n        const suggestWidget = editor._contentWidgets?.[\"editor.widget.suggestWidget\"];\n        const isSuggestVisible = suggestWidget?.widget && !suggestWidget.widget._hidden && suggestWidget.widget.state !== void 0 && suggestWidget.widget.state !== 0;\n        const contextKeyService = editor._contextKeyService;\n        const suggestWidgetVisible = contextKeyService?.getContextKeyValue?.(\"suggestWidgetVisible\");\n        if (isSuggestVisible || suggestWidgetVisible) {\n          console.log(\"\\u{1F537} Enter in INLINE editor - accepting autocomplete\");\n          e.preventDefault();\n          e.stopPropagation();\n          editor.trigger(\"\", \"acceptSelectedSuggestion\");\n        } else {\n          console.log(\"\\u{1F537} Enter in INLINE editor - blurring (finishing edit)\");\n          e.preventDefault();\n          e.stopPropagation();\n          onBlur?.({});\n        }\n      }\n    });\n    editor.onDidPaste((e) => {\n      if (e.endLineNumber <= 1) {\n        return;\n      }\n      let newContent = \"\";\n      const textModel = editor.getModel();\n      const lineCount = textModel.getLineCount();\n      for (let i = 0; i < lineCount; i += 1) {\n        newContent += textModel.getLineContent(i + 1);\n      }\n      textModel.setValue(newContent);\n      editor.setPosition({ column: newContent.length + 1, lineNumber: 1 });\n    });\n    editor.onDidBlurEditorText((e) => {\n      const currentValue = editor.getValue();\n      onBlur?.({ ...e, currentValue });\n    });\n    editor.onDidChangeModelContent(() => {\n      const model = editor.getModel();\n      if (model) {\n        if (onValidationChange) {\n          const markers = monaco.editor.getModelMarkers({ resource: model.uri });\n          const hasErrors = markers.some((marker) => marker.severity === monaco.MarkerSeverity.Error);\n          onValidationChange(!hasErrors, markers);\n        }\n        if (onTypeInferred) {\n          if (typeInferenceTimeoutRef.current) {\n            clearTimeout(typeInferenceTimeoutRef.current);\n          }\n          console.log(\"\\u{1F537} Content changed - debouncing type inference\");\n          typeInferenceTimeoutRef.current = setTimeout(async () => {\n            const expressionToAnalyze = model.getValue();\n            const inferredType = await inferTypeFromMonaco(editor, monaco, expressionToAnalyze, \"\\u{1F537}\");\n            if (inferredType) {\n              onTypeInferred(inferredType);\n            }\n          }, 200);\n        }\n      }\n    });\n    const markerChangeDisposable = monaco.editor.onDidChangeMarkers((uris) => {\n      const model = editor.getModel();\n      if (!model || !onTypeInferred) return;\n      const isOurModel = uris.some((uri) => uri.toString() === model.uri.toString());\n      if (!isOurModel) return;\n      const markers = monaco.editor.getModelMarkers({ resource: model.uri });\n      const hasErrors = markers.some((marker) => marker.severity === monaco.MarkerSeverity.Error);\n      console.log(\"\\u{1F537} Monaco markers changed - hasErrors:\", hasErrors);\n      if (hasErrors) {\n        if (typeInferenceTimeoutRef.current) {\n          clearTimeout(typeInferenceTimeoutRef.current);\n          typeInferenceTimeoutRef.current = null;\n        }\n        console.log(\"\\u{1F537} ERROR detected - immediately setting type to error\");\n        onTypeInferred(\"error\");\n      } else {\n        if (typeInferenceTimeoutRef.current) {\n          clearTimeout(typeInferenceTimeoutRef.current);\n        }\n        console.log(\"\\u{1F537} Errors cleared - triggering type inference\");\n        typeInferenceTimeoutRef.current = setTimeout(async () => {\n          const expressionToAnalyze = model.getValue();\n          const inferredType = await inferTypeFromMonaco(editor, monaco, expressionToAnalyze, \"\\u{1F537}\");\n          if (inferredType) {\n            onTypeInferred(inferredType);\n          }\n        }, 100);\n      }\n    });\n    editor.addCommand(monaco.KeyCode.F1, () => {\n    });\n    const cursorDisposable = editor.onDidChangeCursorPosition(async () => {\n      if (onTypeInferred && editor.hasTextFocus()) {\n        const model = editor.getModel();\n        if (model && model.getValue().trim()) {\n          if (typeInferenceTimeoutRef.current) {\n            clearTimeout(typeInferenceTimeoutRef.current);\n          }\n          const expressionToAnalyze = model.getValue();\n          const inferredType = await inferTypeFromMonaco(editor, monaco, expressionToAnalyze, \"\\u{1F537}\");\n          if (inferredType) {\n            onTypeInferred(inferredType);\n          }\n        }\n      }\n    });\n    editor.setPosition({\n      lineNumber: 1,\n      column: 999999\n    });\n    window.requestAnimationFrame(() => {\n      editor.focus();\n      setTimeout(async () => {\n        const model = editor.getModel();\n        if (onTypeInferred && model && model.getValue()) {\n          console.log(\"\\u{1F537} Triggering initial type inference for inline editor\");\n          const markers = monaco.editor.getModelMarkers({ resource: model.uri });\n          const hasErrors = markers.some((marker) => marker.severity === monaco.MarkerSeverity.Error);\n          if (hasErrors) {\n            onTypeInferred(\"error\");\n          } else {\n            const expressionToAnalyze = model.getValue();\n            const inferredType = await inferTypeFromMonaco(editor, monaco, expressionToAnalyze, \"\\u{1F537}\");\n            if (inferredType) {\n              onTypeInferred(inferredType);\n            }\n          }\n        }\n      }, 100);\n    });\n    editorRef.current._inlineDisposables = {\n      enterKeyDisposable,\n      findCommand,\n      markerChangeDisposable,\n      cursorDisposable\n    };\n  };\n  useEffect(() => {\n    return () => {\n      if (editorRef.current) {\n        console.log(\"\\u{1F537} Inline editor unmounting - cleaning up\");\n        if (typeInferenceTimeoutRef.current) {\n          clearTimeout(typeInferenceTimeoutRef.current);\n        }\n        if (editorRef.current._inlineDisposables) {\n          const disposables = editorRef.current._inlineDisposables;\n          disposables.enterKeyDisposable?.dispose?.();\n          disposables.findCommand?.dispose?.();\n          disposables.markerChangeDisposable?.dispose?.();\n          disposables.cursorDisposable?.dispose?.();\n        }\n        editorRef.current = null;\n      }\n    };\n  }, []);\n  const handleEditorChange = (newValue) => {\n    onChange(newValue || \"\");\n  };\n  return /* @__PURE__ */ React4__default.createElement(\"div\", { className: cn(\"uii:relative uii:flex-1\", className) }, /* @__PURE__ */ React4__default.createElement(\n    Editor,\n    {\n      theme: \"vs-dark\",\n      height: \"26px\",\n      language: \"typescript\",\n      value,\n      onChange: handleEditorChange,\n      onMount: handleEditorDidMount,\n      beforeMount: handleEditorWillMount,\n      width: \"100%\",\n      loading: /* @__PURE__ */ React4__default.createElement(React4__default.Fragment, null, /* @__PURE__ */ React4__default.createElement(FontAwesomeIcon, { icon: faSpinner, className: \"uii:animate-spin\" })),\n      options: InlineEditorOptions,\n      className: \"uii:-ml-[4px] uii:-mt-[1px] inline-editor\"\n    }\n  ), !value && /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:absolute uii:inset-0 uii:flex uii:items-center uii:pointer-events-none uii:text-muted-foreground uii:text-sm\" }, placeholder));\n}\nfunction FullPanelExpressionEditor({\n  value,\n  onChange,\n  onClose,\n  onBlur,\n  onTypeInferred,\n  context = {},\n  className,\n  placeholder = \"Enter expression...\"\n}) {\n  const editorRef = useRef(null);\n  const monacoRef = useRef(null);\n  const typeInferenceTimeoutRef = useRef(null);\n  const handleEditorWillMount = (monaco) => {\n    monacoRef.current = monaco;\n    const contextKeys = Object.keys(context);\n    if (contextKeys.length > 0) {\n      monaco.languages.typescript.javascriptDefaults.addExtraLib(`\n        declare const ${contextKeys.join(\", \")}: any;\n      `, \"context.d.ts\");\n    }\n  };\n  const handleFPEditorDidMount = (editor, monaco) => {\n    editorRef.current = editor;\n    editor.updateOptions(FullPanelEditorOptions);\n    console.log(\"\\u{1F7E6} FULL-SCREEN panel editor mounted!\");\n    console.log(\"Full-screen editor is read-only?\", editor.getOption(monaco.editor.EditorOption.readOnly));\n    const escapeKeyDisposable = editor.onKeyDown((e) => {\n      if (e.keyCode === monaco.KeyCode.Escape) {\n        console.log(\"\\u{1F7E6} Escape pressed in FULL-SCREEN editor - closing\");\n        e.preventDefault();\n        e.stopPropagation();\n        onClose();\n      }\n      if (e.keyCode === monaco.KeyCode.Enter) {\n        const suggestWidget = editor._contentWidgets?.[\"editor.widget.suggestWidget\"];\n        const isSuggestVisible = suggestWidget?.widget && !suggestWidget.widget._hidden && suggestWidget.widget.state !== void 0 && suggestWidget.widget.state !== 0;\n        const contextKeyService = editor._contextKeyService;\n        const suggestWidgetVisible = contextKeyService?.getContextKeyValue?.(\"suggestWidgetVisible\");\n        if (isSuggestVisible || suggestWidgetVisible) {\n          console.log(\"\\u{1F7E6} Enter in FULL-SCREEN - accepting autocomplete\");\n          e.preventDefault();\n          e.stopPropagation();\n          editor.trigger(\"\", \"acceptSelectedSuggestion\");\n        } else {\n          console.log(\"\\u{1F7E6} Enter in FULL-SCREEN - allowing newline (default behavior)\");\n        }\n      }\n    });\n    let changeCount = 0;\n    const changeDisposable = editor.onDidChangeModelContent((e) => {\n      changeCount++;\n      const newValue = editor.getValue();\n      console.log(`\\u{1F7E6} FULL-SCREEN content changed (${changeCount}):`, newValue);\n      console.log(`\\u{1F7E6} Line count: ${editor.getModel()?.getLineCount()}`);\n      if (onTypeInferred) {\n        if (typeInferenceTimeoutRef.current) {\n          clearTimeout(typeInferenceTimeoutRef.current);\n        }\n        console.log(\"\\u{1F7E6} Content changed - debouncing type inference\");\n        typeInferenceTimeoutRef.current = setTimeout(async () => {\n          const expressionToAnalyze = newValue;\n          const inferredType = await inferTypeFromMonaco(editor, monaco, expressionToAnalyze, \"\\u{1F7E6}\");\n          if (inferredType) {\n            onTypeInferred(inferredType);\n          }\n        }, 200);\n      }\n    });\n    const markerChangeDisposable = monaco.editor.onDidChangeMarkers((uris) => {\n      const model2 = editor.getModel();\n      if (!model2 || !onTypeInferred) return;\n      const isOurModel = uris.some((uri) => uri.toString() === model2.uri.toString());\n      if (!isOurModel) return;\n      const markers = monaco.editor.getModelMarkers({ resource: model2.uri });\n      const hasErrors = markers.some((marker) => marker.severity === monaco.MarkerSeverity.Error);\n      console.log(\"\\u{1F7E6} Monaco markers changed - hasErrors:\", hasErrors);\n      if (hasErrors) {\n        if (typeInferenceTimeoutRef.current) {\n          clearTimeout(typeInferenceTimeoutRef.current);\n          typeInferenceTimeoutRef.current = null;\n        }\n        console.log(\"\\u{1F7E6} ERROR detected - immediately setting type to error\");\n        onTypeInferred(\"error\");\n      } else {\n        if (typeInferenceTimeoutRef.current) {\n          clearTimeout(typeInferenceTimeoutRef.current);\n        }\n        console.log(\"\\u{1F7E6} Errors cleared - triggering type inference\");\n        typeInferenceTimeoutRef.current = setTimeout(async () => {\n          const expressionToAnalyze = model2.getValue();\n          const inferredType = await inferTypeFromMonaco(editor, monaco, expressionToAnalyze, \"\\u{1F7E6}\");\n          if (inferredType) {\n            onTypeInferred(inferredType);\n          }\n        }, 100);\n      }\n    });\n    editor.onDidBlurEditorText((e) => {\n      const currentValue = editor.getValue();\n      onBlur?.({ ...e, currentValue });\n    });\n    const model = editor.getModel();\n    if (model) {\n      const lineCount = model.getLineCount();\n      const lastLineLength = model.getLineLength(lineCount);\n      editor.setPosition({ lineNumber: lineCount, column: lastLineLength + 1 });\n    }\n    editor.focus();\n    setTimeout(async () => {\n      if (onTypeInferred && model) {\n        console.log(\"\\u{1F7E6} Triggering initial type inference for full-screen editor\");\n        const markers = monaco.editor.getModelMarkers({ resource: model.uri });\n        const hasErrors = markers.some((marker) => marker.severity === monaco.MarkerSeverity.Error);\n        if (hasErrors) {\n          console.log(\"\\u{1F7E6} Initial load has error - setting type to error\");\n          onTypeInferred(\"error\");\n        } else {\n          const expressionToAnalyze = model.getValue();\n          const inferredType = await inferTypeFromMonaco(editor, monaco, expressionToAnalyze, \"\\u{1F7E6}\");\n          if (inferredType) {\n            onTypeInferred(inferredType);\n          }\n        }\n      }\n    }, 100);\n    const cursorDisposable = editor.onDidChangeCursorPosition(async () => {\n      if (onTypeInferred && editor.hasTextFocus()) {\n        const model2 = editor.getModel();\n        if (model2 && model2.getValue().trim()) {\n          if (typeInferenceTimeoutRef.current) {\n            clearTimeout(typeInferenceTimeoutRef.current);\n          }\n          const expressionToAnalyze = model2.getValue();\n          const inferredType = await inferTypeFromMonaco(editor, monaco, expressionToAnalyze, \"\\u{1F7E6}\");\n          if (inferredType) {\n            onTypeInferred(inferredType);\n          }\n        }\n      }\n    });\n    editorRef.current._fullScreenDisposables = {\n      escapeKeyDisposable,\n      changeDisposable,\n      markerChangeDisposable,\n      cursorDisposable\n    };\n  };\n  useEffect(() => {\n    return () => {\n      if (editorRef.current) {\n        console.log(\"\\u{1F7E6} Full-screen editor unmounting - cleaning up\");\n        if (typeInferenceTimeoutRef.current) {\n          clearTimeout(typeInferenceTimeoutRef.current);\n        }\n        if (editorRef.current._fullScreenDisposables) {\n          const disposables = editorRef.current._fullScreenDisposables;\n          disposables.escapeKeyDisposable?.dispose?.();\n          disposables.changeDisposable?.dispose?.();\n          disposables.markerChangeDisposable?.dispose?.();\n          disposables.cursorDisposable?.dispose?.();\n        }\n        editorRef.current = null;\n      }\n    };\n  }, []);\n  const handleEditorChange = (newValue) => {\n    onChange(newValue || \"\");\n  };\n  return /* @__PURE__ */ React4__default.createElement(\n    \"div\",\n    {\n      className: cn(\n        \"uii:relative uii:border uii:rounded-md uii:bg-background\",\n        className\n      )\n    },\n    /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:flex uii:items-center uii:justify-between uii:p-2 uii:border-b uii:bg-muted/50\" }, /* @__PURE__ */ React4__default.createElement(\"span\", { className: \"uii:text-sm uii:font-medium\" }, \"Expression Editor\"), /* @__PURE__ */ React4__default.createElement(\n      \"button\",\n      {\n        type: \"button\",\n        onClick: onClose,\n        className: \"uii:text-muted-foreground hover:uii:text-foreground uii:p-1 uii:rounded uii:cursor-pointer uii:text-xs\"\n      },\n      \"\\u2715\"\n    )),\n    /* @__PURE__ */ React4__default.createElement(\n      Editor,\n      {\n        height: \"300px\",\n        theme: \"vs-dark\",\n        language: \"typescript\",\n        value,\n        onChange: handleEditorChange,\n        onMount: handleFPEditorDidMount,\n        beforeMount: handleEditorWillMount,\n        options: FullPanelEditorOptions\n      }\n    ),\n    !value && /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:absolute uii:inset-0 uii:flex uii:items-center uii:justify-center uii:pointer-events-none uii:text-muted-foreground\" }, placeholder)\n  );\n}\nfunction useASTParser(expression, controlKey) {\n  const [ast, setAST] = useState(null);\n  const [tokens, setTokens] = useState([]);\n  const [dependencies, setDependencies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const requestIdRef = useRef(0);\n  const messageHandlerRef = useRef(null);\n  const controlKeyRef = useRef(controlKey || \"default\");\n  useEffect(() => {\n    controlKeyRef.current = controlKey || \"default\";\n  }, [controlKey]);\n  useEffect(() => {\n    if (typeof window === \"undefined\" || !navigator.serviceWorker) {\n      setError(\"Service worker not available\");\n      return;\n    }\n    const handleMessage = (event) => {\n      if (event.data.type === \"AST_PARSE_RESULT\") {\n        const { id, controlKey: controlKey2, result } = event.data.payload;\n        if (id === requestIdRef.current && controlKey2 === controlKeyRef.current) {\n          console.log(\"Service worker AST response:\", { id, controlKey: controlKey2, result });\n          setAST(result.ast);\n          setTokens(result.tokens);\n          setDependencies(result.dependencies || []);\n          setError(result.error || null);\n          setIsLoading(false);\n        } else {\n          console.log(\"Ignoring AST response - wrong control:\", {\n            receivedId: id,\n            expectedId: requestIdRef.current,\n            receivedKey: controlKey2,\n            expectedKey: controlKeyRef.current\n          });\n        }\n      }\n    };\n    messageHandlerRef.current = handleMessage;\n    navigator.serviceWorker.addEventListener(\"message\", handleMessage);\n    return () => {\n      if (messageHandlerRef.current) {\n        navigator.serviceWorker.removeEventListener(\"message\", messageHandlerRef.current);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (!expression.trim()) {\n      setAST(null);\n      setTokens([]);\n      setDependencies([]);\n      setError(null);\n      setIsLoading(false);\n      return;\n    }\n    if (!navigator.serviceWorker || !navigator.serviceWorker.controller) {\n      setError(\"Service worker not ready\");\n      setIsLoading(false);\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    requestIdRef.current++;\n    console.log(\"Sending expression to service worker:\", {\n      expression: expression.trim(),\n      controlKey: controlKeyRef.current,\n      id: requestIdRef.current\n    });\n    navigator.serviceWorker.controller.postMessage({\n      type: \"PARSE_AST\",\n      payload: {\n        expression: expression.trim(),\n        id: requestIdRef.current,\n        controlKey: controlKeyRef.current\n      }\n    });\n  }, [expression]);\n  return {\n    ast,\n    tokens,\n    dependencies,\n    isLoading,\n    error\n  };\n}\nfunction ASTRenderer({\n  ast,\n  key,\n  className,\n  variant = \"inline\",\n  showTokens = false,\n  tokens = []\n}) {\n  const getNodeColor = (type) => {\n    switch (type) {\n      case \"StringLiteral\":\n        return \"uii:text-green-600 uii:bg-green-100\";\n      case \"NumericLiteral\":\n        return \"uii:text-purple-600 uii:bg-purple-100\";\n      case \"Identifier\":\n        return \"uii:text-blue-600 uii:bg-blue-100\";\n      case \"Keyword\":\n      case \"Literal\":\n        return \"uii:text-orange-600 uii:bg-orange-100\";\n      case \"BinaryExpression\":\n        return \"uii:text-gray-700 uii:bg-gray-100\";\n      case \"CallExpression\":\n        return \"uii:text-indigo-600 uii:bg-indigo-100\";\n      case \"MemberExpression\":\n        return \"uii:text-cyan-600 uii:bg-cyan-100\";\n      case \"UnaryExpression\":\n        return \"uii:text-pink-600 uii:bg-pink-100\";\n      case \"ParenthesizedExpression\":\n        return \"uii:text-yellow-600 uii:bg-yellow-100\";\n      default:\n        return \"uii:text-gray-600 uii:bg-gray-100\";\n    }\n  };\n  const renderInlineNode = (node, depth = 0) => {\n    if (depth > 2) return null;\n    if (node.type === \"Identifier\") {\n      return /* @__PURE__ */ React4__default.createElement(\"span\", { key: `${node.start}-${node.end}`, className: \"uii:inline-flex uii:items-center uii:mr-1\" }, /* @__PURE__ */ React4__default.createElement(\"span\", { className: \"uii:px-1 uii:py-0.5 uii:rounded uii:text-xs uii:bg-blue-100 uii:text-blue-800 uii:font-mono\" }, node.name || node.value));\n    }\n    if (node.type === \"StringLiteral\" || node.type === \"NumericLiteral\") {\n      return /* @__PURE__ */ React4__default.createElement(\"span\", { key: `${node.start}-${node.end}`, className: \"uii:inline-flex uii:items-center uii:mr-1\" }, /* @__PURE__ */ React4__default.createElement(\"span\", { className: \"uii:px-1 uii:py-0.5 uii:rounded uii:text-xs uii:bg-green-100 uii:text-green-800 uii:font-mono\" }, node.value));\n    }\n    if (node.type === \"BinaryExpression\") {\n      return /* @__PURE__ */ React4__default.createElement(\"span\", { key: `${node.start}-${node.end}`, className: \"uii:inline-flex uii:items-center uii:mr-1\" }, node.left && renderInlineNode(node.left, depth + 1), /* @__PURE__ */ React4__default.createElement(\"span\", { className: \"uii:px-1 uii:py-0.5 uii:rounded uii:text-xs uii:bg-purple-100 uii:text-purple-800 uii:font-mono uii:mx-1\" }, node.operator), node.right && renderInlineNode(node.right, depth + 1));\n    }\n    if (node.type === \"CallExpression\") {\n      return /* @__PURE__ */ React4__default.createElement(\"span\", { key: `${node.start}-${node.end}`, className: \"uii:inline-flex uii:items-center uii:mr-1\" }, node.callee && renderInlineNode(node.callee, depth + 1), /* @__PURE__ */ React4__default.createElement(\"span\", { className: \"text-xs text-gray-600\" }, \"()\"));\n    }\n    if (node.type === \"PropertyAccessExpression\") {\n      return /* @__PURE__ */ React4__default.createElement(\"span\", { key: `${node.start}-${node.end}`, className: \"uii:inline-flex uii:items-center uii:mr-1\" }, node.object && renderInlineNode(node.object, depth + 1), /* @__PURE__ */ React4__default.createElement(\"span\", { className: \"text-xs text-gray-600\" }, \".\"), node.property && renderInlineNode(node.property, depth + 1));\n    }\n    return /* @__PURE__ */ React4__default.createElement(\"span\", { key: `${node.start}-${node.end}`, className: \"uii:inline-flex uii:items-center uii:mr-1\" }, /* @__PURE__ */ React4__default.createElement(\"span\", { className: \"px-1 py-0.5 rounded text-xs bg-gray-100 text-gray-600 font-mono\" }, node.type));\n  };\n  const renderTreeNode = (node, depth = 0) => {\n    if (depth > 4) return null;\n    const indent = \"  \".repeat(depth);\n    return /* @__PURE__ */ React4__default.createElement(\"div\", { key: `${node.start}-${node.end}`, className: \"font-mono text-xs\" }, /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:flex uii:items-start uii:gap-2\" }, /* @__PURE__ */ React4__default.createElement(\"span\", { className: \"uii:text-gray-400\" }, indent), /* @__PURE__ */ React4__default.createElement(\"span\", { className: cn(\"uii:px-1 uii:py-0.5 uii:rounded uii:text-xs uii:font-semibold\", getNodeColor(node.type)) }, node.type), node.value && /* @__PURE__ */ React4__default.createElement(\"span\", { className: \"uii:text-green-600\" }, '\"', node.value, '\"'), node.operator && /* @__PURE__ */ React4__default.createElement(\"span\", { className: \"uii:text-purple-600\" }, node.operator), node.name && /* @__PURE__ */ React4__default.createElement(\"span\", { className: \"uii:text-blue-600\" }, node.name)), node.left && /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:ml-2\" }, /* @__PURE__ */ React4__default.createElement(\"span\", { className: \"uii:text-gray-500 uii:text-xs\" }, \"left: \"), renderTreeNode(node.left, depth + 1)), node.right && /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:ml-2\" }, /* @__PURE__ */ React4__default.createElement(\"span\", { className: \"uii:text-gray-500 uii:text-xs\" }, \"right: \"), renderTreeNode(node.right, depth + 1)), node.argument && /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:ml-2\" }, /* @__PURE__ */ React4__default.createElement(\"span\", { className: \"uii:text-gray-500 uii:text-xs\" }, \"arg: \"), renderTreeNode(node.argument, depth + 1)), node.object && /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:ml-2\" }, /* @__PURE__ */ React4__default.createElement(\"span\", { className: \"uii:text-gray-500 uii:text-xs\" }, \"obj: \"), renderTreeNode(node.object, depth + 1)), node.property && /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:ml-2\" }, /* @__PURE__ */ React4__default.createElement(\"span\", { className: \"uii:text-gray-500 uii:text-xs\" }, \"prop: \"), renderTreeNode(node.property, depth + 1)), node.index && /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:ml-2\" }, /* @__PURE__ */ React4__default.createElement(\"span\", { className: \"uii:text-gray-500 uii:text-xs\" }, \"idx: \"), renderTreeNode(node.index, depth + 1)), !node.left && !node.right && !node.argument && !node.object && !node.property && !node.index && node.children && node.children.length > 0 && /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:ml-2\" }, node.children.slice(0, 3).map((child, index) => renderTreeNode(child, depth + 1)), node.children.length > 3 && /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:ml-2 uii:text-gray-500 uii:text-xs\" }, \"... and \", node.children.length - 3, \" more\")));\n  };\n  const renderTokens = () => {\n    if (tokens.length === 0) return null;\n    const displayTokens = tokens.slice(0, 10);\n    return /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:space-y-2\" }, /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:text-sm uii:font-semibold uii:text-gray-700\" }, \"Tokens \", tokens.length > 10 && `(${tokens.length} total)`, \":\"), /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:flex uii:flex-wrap uii:gap-1\" }, displayTokens.map((token, index) => /* @__PURE__ */ React4__default.createElement(\n      \"span\",\n      {\n        key: index,\n        className: cn(\n          \"uii:px-1 uii:py-0.5 uii:rounded uii:text-xs uii:font-mono\",\n          token.type.includes(\"Keyword\") && \"uii:bg-blue-100 uii:text-blue-800\",\n          token.type.includes(\"Identifier\") && \"uii:bg-green-100 uii:text-green-800\",\n          token.type.includes(\"String\") && \"uii:bg-yellow-100 uii:text-yellow-800\",\n          token.type.includes(\"Numeric\") && \"uii:bg-purple-100 uii:text-purple-800\",\n          token.type.includes(\"Punctuation\") && \"uii:bg-gray-100 uii:text-gray-800\",\n          \"uii:bg-gray-100 uii:text-gray-600\"\n        )\n      },\n      token.value\n    )), tokens.length > 10 && /* @__PURE__ */ React4__default.createElement(\"span\", { className: \"uii:px-1 uii:py-0.5 uii:rounded uii:text-xs uii:bg-gray-200 uii:text-gray-600\" }, \"+\", tokens.length - 10, \" more\")));\n  };\n  if (!ast) {\n    return /* @__PURE__ */ React4__default.createElement(\"div\", { className: cn(\"uii:text-gray-500 uii:text-sm uii:italic\", className) }, \"No AST available\");\n  }\n  if (variant === \"inline\") {\n    return /* @__PURE__ */ React4__default.createElement(\"div\", { className: cn(\"uii:inline-flex uii:items-center uii:gap-2\", className) }, renderInlineNode(ast));\n  }\n  if (variant === \"compact\") {\n    return /* @__PURE__ */ React4__default.createElement(\"div\", { className: cn(\"uii:space-y-2\", className) }, /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:flex uii:flex-wrap uii:gap-1\" }, renderInlineNode(ast)), showTokens && renderTokens());\n  }\n  return /* @__PURE__ */ React4__default.createElement(\"div\", { className: cn(\"uii:space-y-3\", className) }, /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:space-y-2\" }, /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:text-sm uii:font-semibold uii:text-gray-700\" }, \"AST Tree:\"), /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:p-3 uii:border uii:rounded-md uii:bg-gray-50 uii:max-h-64 uii:overflow-auto\" }, renderTreeNode(ast))), showTokens && renderTokens());\n}\nfunction ExpressionWrapper({\n  label,\n  value,\n  type,\n  valuesLoading = false,\n  key,\n  onValueChange,\n  onDependenciesChange,\n  metadata,\n  children,\n  fieldName,\n  expressionContext = {},\n  availableNodes,\n  myInterface,\n  contextTypeDefinitions,\n  inlineEditor = true,\n  className,\n  editorClassName,\n  expressionPlaceholder = \"Enter expression...\",\n  evaluateExpression,\n  expressionResult,\n  isEvaluating = false,\n  isExpressionValid = true,\n  expectedType = \"any\"\n}) {\n  const [expressionMetadata, setExpressionMetadata] = useState(\n    () => {\n      const initialMetadata = metadata || {\n        expression: \"\",\n        mode: \"value\",\n        isEditing: false,\n        isFullScreen: false,\n        value: void 0\n      };\n      return {\n        ...initialMetadata,\n        isEditing: false,\n        isFullScreen: false,\n        mode: \"value\"\n        // Always start in value mode\n      };\n    }\n  );\n  const [originalValue, setOriginalValue] = useState(\n    value && typeof value === \"object\" && \"expression\" in value && \"type\" in value && value.type === \"expression\" ? value.value : value\n  );\n  const [currentValue, setCurrentValue] = useState(\n    value && typeof value === \"object\" && \"expression\" in value && \"type\" in value && value.type === \"expression\" ? value.value : value\n  );\n  const formatValue = useCallback((value2) => {\n    switch (type) {\n      case \"float\": {\n        return typeof value2 === \"string\" && !isNaN(parseFloat(value2)) ? parseFloat(value2) : value2;\n      }\n      case \"integer\":\n      case \"number\": {\n        return typeof value2 === \"string\" && !isNaN(parseInt(value2)) ? parseInt(value2) : value2;\n      }\n      case \"string[]\": {\n        return typeof value2 === \"string\" ? value2.split(\",\") : value2;\n      }\n      case \"string\":\n      default: {\n        return value2;\n      }\n    }\n  }, [type]);\n  const [currentEditorValue, setCurrentEditorValue] = useState();\n  const currentExpressionValueExt = useExpressionModeStore.getState().getState(fieldName).expression;\n  useEffect(() => {\n    if (metadata) {\n      setExpressionMetadata({\n        ...metadata,\n        // Don't restore editing/fullscreen state from metadata\n        // User needs to explicitly click to edit\n        isEditing: false,\n        isFullScreen: false\n      });\n    }\n  }, [metadata]);\n  const isExpressionValue = useMemo(() => {\n    return value && typeof value === \"object\" && \"expression\" in value && \"type\" in value && value.type === \"expression\";\n  }, [value]);\n  const isInitialMount = useRef(true);\n  useEffect(() => {\n    if (value && typeof value === \"object\" && \"expression\" in value && \"type\" in value && value.type === \"expression\") {\n      const exprValue = value.value;\n      const exprString = value.expression;\n      if (exprValue !== void 0) {\n        setCurrentValue(formatValue(exprValue));\n        setOriginalValue(formatValue(exprValue));\n      }\n      if (exprString && expressionMode.expression !== exprString) {\n        expressionMode.setExpression(exprString);\n        if (isInitialMount.current && !expressionMode.isEditing) {\n          expressionMode.switchToExpression();\n        }\n      }\n      const isMetadataOutOfSync = !metadata || metadata.expression !== exprString || metadata.mode === \"value\" || // If value has expression but mode is 'value', it's out of sync\n      metadata.isEditing === true || // Should never start editing on load\n      metadata.isFullScreen === true;\n      if (isInitialMount.current && isMetadataOutOfSync) {\n        const syncedMetadata = {\n          expression: exprString || \"\",\n          value: formatValue(exprValue),\n          mode: \"expression\",\n          // Show expression display (not editing)\n          isEditing: false,\n          isFullScreen: false\n        };\n        setTimeout(() => {\n          onValueChange(value, { ...syncedMetadata, value: formatValue(value) });\n        }, 0);\n      }\n    } else {\n      if (!valuesLoading) {\n        setCurrentValue(formatValue(value));\n        setOriginalValue(formatValue(value));\n        if (isInitialMount.current && (metadata?.expression || metadata?.mode === \"expression\")) {\n          const syncedMetadata = {\n            expression: \"\",\n            value: formatValue(value),\n            mode: \"value\",\n            isEditing: false,\n            isFullScreen: false\n          };\n          setTimeout(() => {\n            onValueChange(formatValue(value), { ...syncedMetadata, value: formatValue(value) });\n          }, 0);\n        }\n      }\n    }\n    if (isInitialMount.current) {\n      setTimeout(() => {\n        isInitialMount.current = false;\n      }, 100);\n    }\n  }, [value, valuesLoading]);\n  const expressionMode = useExpressionMode(fieldName);\n  const {\n    ast,\n    tokens,\n    dependencies,\n    isLoading: isParsing,\n    error: parseError\n  } = useASTParser(expressionMode.expression, fieldName);\n  const dependencyList = useMemo(() => {\n    if (!ast || dependencies.length === 0) {\n      return [];\n    }\n    return dependencies.map((dep) => ({\n      name: dep,\n      exists: expressionContext ? dep in expressionContext : false,\n      value: expressionContext ? expressionContext[dep] : void 0\n    }));\n  }, [dependencies, expressionContext, ast]);\n  const [typeScriptInferredType, setTypeScriptInferredType] = useState(null);\n  const handleTypeInferred = useCallback((type2) => {\n    setTypeScriptInferredType(type2);\n  }, []);\n  const expressionHasNewlines = useMemo(() => {\n    return expressionMode.expression.includes(\"\\n\") || expressionMode.expression.includes(\"\\r\");\n  }, [expressionMode.expression]);\n  const inferredReturnType = useMemo(() => {\n    return typeScriptInferredType || \"unknown\";\n  }, [typeScriptInferredType]);\n  const hasTypeMismatch = useMemo(() => {\n    if (!inferredReturnType || inferredReturnType === \"unknown\" || inferredReturnType === \"any\" || inferredReturnType === \"error\") {\n      return false;\n    }\n    const normalizedInferred = inferredReturnType.toLowerCase().trim();\n    const normalizedExpected = (type || expectedType || \"any\").toLowerCase().trim();\n    if (normalizedExpected === \"array\" && normalizedInferred.endsWith(\"[]\")) {\n      return false;\n    }\n    if (normalizedInferred === normalizedExpected) {\n      return false;\n    }\n    if (normalizedExpected === \"any\") {\n      return false;\n    }\n    if (normalizedExpected === \"string\" && (normalizedInferred.startsWith('\"') || normalizedInferred.startsWith(\"'\"))) {\n      return false;\n    }\n    if (normalizedExpected === \"number\" && /^-?\\d+(\\.\\d+)?([eE][+-]?\\d+)?$/.test(normalizedInferred)) {\n      return false;\n    }\n    if (normalizedExpected === \"integer\" && /^-?\\d+(\\.\\d+)?([eE][+-]?\\d+)?$/.test(normalizedInferred)) {\n      return false;\n    }\n    if (normalizedExpected === \"integer\" && normalizedInferred === \"number\") {\n      return false;\n    }\n    if (normalizedExpected === \"float\" && /^-?\\d+(\\.\\d+)?([eE][+-]?\\d+)?$/.test(normalizedInferred)) {\n      return false;\n    }\n    if (normalizedExpected === \"float\" && normalizedInferred === \"number\") {\n      return false;\n    }\n    if (normalizedExpected === \"boolean\" && (normalizedInferred === \"true\" || normalizedInferred === \"false\")) {\n      return false;\n    }\n    return true;\n  }, [inferredReturnType, type, expectedType]);\n  const [internalExpressionResult, setInternalExpressionResult] = useState(null);\n  const [internalIsEvaluating, setInternalIsEvaluating] = useState(false);\n  const [isHovering, setIsHovering] = useState(false);\n  const [internalIsExpressionValid, setInternalIsExpressionValid] = useState(true);\n  const [validationState, setValidationState] = useState({\n    syntax: true,\n    expression: true,\n    context: true,\n    type: true,\n    security: true\n  });\n  const hasExpressionError = useMemo(() => {\n    if (!expressionMode.expression || !expressionMode.expression.trim()) {\n      return false;\n    }\n    if (!internalIsExpressionValid || !isExpressionValid) {\n      return true;\n    }\n    if (parseError) {\n      return true;\n    }\n    if (!validationState.syntax || !validationState.expression) {\n      return true;\n    }\n    if (expressionResult?.error || internalExpressionResult?.error) {\n      return true;\n    }\n    return false;\n  }, [\n    expressionMode.expression,\n    internalIsExpressionValid,\n    isExpressionValid,\n    parseError,\n    validationState,\n    expressionResult,\n    internalExpressionResult\n  ]);\n  const isProgrammaticallyClearing = useRef(false);\n  const isSwitchingToFullScreen = useRef(false);\n  const isBlur = useRef(false);\n  const handleValidationChange = useCallback(\n    (isValid, errors) => {\n      setInternalIsExpressionValid(isValid);\n      setValidationState((prev) => ({\n        ...prev,\n        syntax: isValid\n      }));\n    },\n    []\n  );\n  const checkForMultiLine = useCallback(\n    (expression) => {\n      const hasNewlines = expression.includes(\"\\n\");\n      const isLong = expression.length > 80;\n      if (!expressionMode.isFullScreen) {\n        expressionMode.setFullScreen(hasNewlines || isLong);\n      }\n    },\n    [expressionMode.isFullScreen]\n  );\n  const internalEvaluateExpression = useCallback(\n    async (expression, context) => {\n      if (!evaluateExpression || !expression.trim()) return;\n      setInternalIsEvaluating(true);\n      try {\n        const result = await evaluateExpression(expression, context);\n        setInternalExpressionResult(result);\n      } catch (error) {\n        setInternalExpressionResult({\n          value: null,\n          ast: { kind: 0, text: \"\", color: \"#ff0000\" },\n          error: error instanceof Error ? error.message : \"Unknown error\",\n          isValid: false,\n          validation: {\n            syntax: false,\n            expression: false,\n            context: false,\n            type: false,\n            security: false\n          }\n        });\n      } finally {\n        setInternalIsEvaluating(false);\n      }\n    },\n    [evaluateExpression]\n  );\n  const currentMetadata = useMemo(() => {\n    return {\n      expression: expressionMode.expression,\n      value: currentValue,\n      mode: expressionMode.current,\n      isEditing: expressionMode.isEditing,\n      isFullScreen: expressionMode.isFullScreen\n    };\n  }, [\n    expressionMode.expression,\n    expressionMode.current,\n    expressionMode.isFullScreen,\n    expressionMode.isEditing,\n    currentValue\n  ]);\n  const currentExpressionValue = useMemo(() => {\n    return { expression: expressionMode.expression, type: \"expression\" };\n  }, [expressionMode.currentValue || expressionMode.expression]);\n  const handleValueChange = useCallback(\n    (newValue) => {\n      onValueChange(formatValue(newValue), { ...currentMetadata, value: formatValue(newValue) });\n    },\n    [onValueChange, expressionMode, isExpressionValue, currentValue]\n  );\n  const handleExpressionChange = useCallback(\n    (newExpression) => {\n      isProgrammaticallyClearing.current = false;\n      expressionMode.setExpression(newExpression);\n      setCurrentEditorValue(newExpression);\n      checkForMultiLine(newExpression);\n      onValueChange({ expression: newExpression, type: \"expression\" }, {\n        ...currentMetadata,\n        expression: newExpression\n      });\n    },\n    [\n      expressionMode,\n      expressionContext,\n      onValueChange,\n      evaluateExpression,\n      internalEvaluateExpression,\n      checkForMultiLine\n    ]\n  );\n  const handleExpressionBlur = useCallback(\n    async (e, forceBlur = false) => {\n      if (isProgrammaticallyClearing.current) {\n        isProgrammaticallyClearing.current = false;\n        return;\n      }\n      if (isSwitchingToFullScreen.current) {\n        isSwitchingToFullScreen.current = false;\n        return;\n      }\n      if (expressionMode.isFullScreen && !forceBlur) {\n        return;\n      }\n      if (expressionHasNewlines && !forceBlur) {\n        return;\n      }\n      isBlur.current = true;\n      expressionMode.setEditing(false);\n      expressionMode.setFullScreen(false);\n    },\n    [\n      expressionMode,\n      expressionResult,\n      internalExpressionResult,\n      expressionContext,\n      onValueChange,\n      currentValue,\n      isEvaluating,\n      internalIsEvaluating,\n      currentExpressionValue,\n      expressionHasNewlines\n    ]\n  );\n  useEffect(() => {\n    onValueChange(currentValue, {\n      ...currentMetadata,\n      isFullScreen: expressionMode.isFullScreen\n    });\n  }, [expressionMode.isFullScreen]);\n  useEffect(() => {\n    if (expressionMode.isEditing && expressionHasNewlines && !expressionMode.isFullScreen) {\n      expressionMode.setFullScreen(true);\n    }\n  }, [expressionHasNewlines, expressionMode.isEditing, expressionMode.isFullScreen]);\n  const handleModeChange = useCallback(\n    (newMode) => {\n      switch (newMode) {\n        case \"value\":\n          expressionMode.switchToValue();\n          expressionMode.setFullScreen(false);\n          onValueChange(originalValue || value, void 0);\n          break;\n        case \"editor\":\n          expressionMode.switchToEditor();\n          const shouldBeFullScreen = expressionHasNewlines;\n          if (shouldBeFullScreen) {\n            expressionMode.setFullScreen(true);\n          }\n          const editorMetadata = {\n            expression: expressionMode.expression,\n            value: currentValue,\n            mode: \"expression\",\n            isEditing: true,\n            isFullScreen: shouldBeFullScreen\n          };\n          onValueChange(\n            expressionMode.expression ? { expression: expressionMode.expression, type: \"expression\" } : currentValue,\n            editorMetadata\n          );\n          break;\n        case \"expression\":\n          setOriginalValue(currentValue);\n          expressionMode.switchToExpression();\n          if (expressionHasNewlines) {\n            expressionMode.setFullScreen(true);\n          }\n          break;\n      }\n    },\n    [expressionMode, currentValue, onValueChange, expressionHasNewlines, originalValue, value]\n  );\n  useEffect(() => {\n    if (isBlur.current) {\n      if (!(expressionMode.expression && expressionMode.expression.trim())) {\n        expressionMode.switchToValue();\n        onValueChange(currentMetadata.value ?? \"\", {\n          ...currentMetadata,\n          mode: \"value\",\n          expression: \"\",\n          isEditing: false,\n          isFullScreen: false\n        });\n      } else {\n        onValueChange(\n          currentMetadata.mode === \"value\" ? currentMetadata.value ?? \"\" : {\n            expression: currentMetadata.expression.trim(),\n            type: \"expression\"\n          },\n          { ...currentMetadata, isEditing: false, isFullScreen: false }\n        );\n      }\n      isBlur.current = false;\n    }\n  }, [expressionMode.isEditing, expressionMode.isFullScreen, isBlur.current]);\n  useEffect(() => {\n    if (onDependenciesChange) {\n      onDependenciesChange(dependencies);\n    }\n  }, [dependencies, onDependenciesChange]);\n  const handleClear = useCallback(() => {\n    isProgrammaticallyClearing.current = true;\n    onValueChange(currentValue, currentMetadata);\n    handleModeChange(\"value\");\n    expressionMode.setFullScreen(false);\n  }, [onValueChange, expressionMode, originalValue]);\n  const [localInput, setLocalInput] = useState(currentValue);\n  useEffect(() => {\n    setLocalInput(currentValue);\n  }, [currentValue]);\n  const controlProps = useMemo(\n    () => ({\n      value: currentValue,\n      onChange: handleValueChange,\n      onExpressionClick: () => handleModeChange(\"editor\"),\n      // Click handler to trigger expression mode\n      inferredType: inferredReturnType,\n      // Inferred TypeScript type\n      hasTypeMismatch,\n      // Whether inferred type matches expected\n      hasError: hasExpressionError,\n      // Whether expression has syntax/validation errors\n      localInput,\n      setLocalInput,\n      expressionMode: {\n        current: expressionMode.current,\n        switchToValue: () => handleModeChange(\"value\"),\n        switchToExpression: () => handleModeChange(\"expression\"),\n        switchToEditor: () => handleModeChange(\"editor\"),\n        clear: handleClear,\n        isExpressionMode: expressionMode.isExpressionMode,\n        isEditorMode: expressionMode.isEditorMode,\n        expression: expressionMode.expression,\n        setExpression: handleExpressionChange,\n        isEditing: expressionMode.isEditing,\n        setEditing: expressionMode.setEditing,\n        isFullScreen: expressionMode.isFullScreen,\n        setFullScreen: expressionMode.setFullScreen\n      }\n    }),\n    [\n      currentValue,\n      handleValueChange,\n      expressionMode,\n      handleModeChange,\n      handleClear,\n      handleExpressionChange,\n      inferredReturnType,\n      hasTypeMismatch,\n      hasExpressionError\n    ]\n  );\n  const renderContent = () => {\n    switch (expressionMode.current) {\n      // case 'value':\n      //   return children(controlProps);\n      case \"expression\":\n        expressionMode.expression && expressionMode.expression.trim();\n        (expressionResult || internalExpressionResult)?.isValid;\n        return controlProps.expressionMode.isEditing ? /* @__PURE__ */ React4__default.createElement(\"div\", { key: `${key}-expression`, className: cn(\"relative\", className) }, inlineEditor && !expressionMode.isFullScreen && !expressionHasNewlines ? /* @__PURE__ */ React4__default.createElement(\n          \"div\",\n          {\n            className: cn(\n              `uii:flex uii:h-9 uii:w-full \n              uii:min-w-0 uii:rounded-sm \n              uii:border uii:border-ring \n              uii:bg-background uii:px-3 uii:py-1 uii:text-base uii:shadow-xs \n              uii:ring-ring/50 uii:ring-[3px] uii:transition-[color,box-shadow] \n              uii:outline-none uii:md:text-sm uii:cursor-pointer\n              uii:mt-0.5 `,\n              editorClassName\n            )\n          },\n          /* @__PURE__ */ React4__default.createElement(\n            InlineExpressionEditor,\n            {\n              value: expressionMode.expression,\n              onChange: (newValue) => {\n                handleExpressionChange(newValue);\n              },\n              onEnter: () => {\n                isSwitchingToFullScreen.current = true;\n                expressionMode.setFullScreen(true);\n                setTimeout(() => {\n                  isSwitchingToFullScreen.current = false;\n                }, 100);\n              },\n              onBlur: handleExpressionBlur,\n              onTypeInferred: handleTypeInferred,\n              onValidationChange: handleValidationChange,\n              context: expressionContext,\n              placeholder: expressionPlaceholder\n            }\n          ),\n          /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:flex uii:items-center uii:gap-2 uii:mt-0.5\" }, /* @__PURE__ */ React4__default.createElement(\n            \"span\",\n            {\n              className: \"uii:text-xs uii:font-mono uii:cursor-pointer uii:text-muted-foreground\",\n              onMouseDown: (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                isSwitchingToFullScreen.current = true;\n                expressionMode.setFullScreen(true);\n                setTimeout(() => {\n                  isSwitchingToFullScreen.current = false;\n                }, 100);\n              }\n            },\n            /* @__PURE__ */ React4__default.createElement(FontAwesomeIcon, { icon: faExpand })\n          ), /* @__PURE__ */ React4__default.createElement(\n            \"span\",\n            {\n              className: \"uii:text-xs uii:font-mono uii:cursor-pointer uii:text-muted-foreground\",\n              onMouseDown: (e) => {\n                e.preventDefault();\n                handleClear();\n              }\n            },\n            \"Clear\"\n          ))\n        ) : /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:space-y-4\" }, /* @__PURE__ */ React4__default.createElement(\n          FullPanelExpressionEditor,\n          {\n            value: expressionMode.expression,\n            onChange: (newValue) => {\n              handleExpressionChange(newValue);\n            },\n            onClose: () => {\n              handleExpressionBlur(void 0, true);\n              expressionMode.setFullScreen(false);\n            },\n            onBlur: handleExpressionBlur,\n            onTypeInferred: handleTypeInferred,\n            context: expressionContext,\n            placeholder: expressionPlaceholder\n          }\n        ), (ast || dependencies.length > 0) && /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:space-y-3\" }, inferredReturnType && inferredReturnType !== \"unknown\" && /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:space-y-2\" }, /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:flex uii:items-center uii:gap-2\" }, /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:text-sm uii:font-semibold uii:text-gray-700\" }, \"Inferred Return Type:\"), typeScriptInferredType && inferredReturnType !== \"error\" && /* @__PURE__ */ React4__default.createElement(\"span\", { className: \"uii:px-1.5 uii:py-0.5 uii:text-xs uii:rounded uii:bg-blue-100 uii:text-blue-700 uii:border uii:border-blue-200\" }, \"TypeScript\")), /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:flex uii:items-center uii:gap-2\" }, inferredReturnType === \"error\" ? /* @__PURE__ */ React4__default.createElement(\"span\", { className: \"uii:px-3 uii:py-1.5 uii:text-sm uii:font-mono uii:rounded uii:border uii:bg-red-50 uii:text-red-800 uii:border-red-200\" }, \"\\u274C Syntax Error\") : /* @__PURE__ */ React4__default.createElement(React4__default.Fragment, null, /* @__PURE__ */ React4__default.createElement(\"span\", { className: \"uii:px-3 uii:py-1.5 uii:text-sm uii:font-mono uii:rounded uii:border uii:bg-purple-50 uii:text-purple-800 uii:border-purple-200\" }, inferredReturnType), hasTypeMismatch && /* @__PURE__ */ React4__default.createElement(\"span\", { className: \"uii:text-xs uii:text-orange-600 uii:font-semibold\" }, \"\\u26A0\\uFE0F Expected: \", type || expectedType)))), dependencyList.length > 0 && /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:space-y-2\" }, /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:text-sm uii:font-semibold uii:text-gray-700\" }, \"Dependencies (\", dependencyList.length, \"):\"), /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:flex uii:flex-wrap uii:gap-2\" }, dependencyList.map((dep, index) => /* @__PURE__ */ React4__default.createElement(\n          \"span\",\n          {\n            key: index,\n            className: cn(\n              \"uii:px-2 uii:py-1 uii:text-sm uii:rounded uii:border\",\n              dep.exists ? \"uii:bg-blue-100 uii:text-blue-800 uii:border-blue-200\" : \"uii:bg-red-100 uii:text-red-800 uii:border-red-200\"\n            ),\n            title: dep.exists ? `Value: ${JSON.stringify(dep.value)}` : \"Not found in context\"\n          },\n          dep.name\n        )))), ast && /* @__PURE__ */ React4__default.createElement(\n          ASTRenderer,\n          {\n            ast,\n            tokens,\n            variant: \"tree\",\n            showTokens: true,\n            className: \"uii:w-full\"\n          }\n        ), isParsing && /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:text-sm uii:text-gray-500 uii:italic\" }, \"Parsing expression...\"), parseError && /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:text-sm uii:text-red-600\" }, \"Parse Error: \", parseError)))) : /* @__PURE__ */ React4__default.createElement(\n          \"div\",\n          {\n            className: cn(\"uii:relative\", className),\n            key: `${key}-expression-display`\n          },\n          /* @__PURE__ */ React4__default.createElement(\n            \"div\",\n            {\n              className: clsx_default(\n                \"uii:flex uii:h-9 uii:w-full uii:min-w-0 uii:rounded-sm uii:border uii:border-input uii:bg-transparent uii:px-3 uii:py-1 uii:text-base uii:shadow-xs uii:transition-[color,box-shadow] uii:outline-none uii:focus-visible:border-ring uii:focus-visible:ring-ring/50 uii:focus-visible:ring-[3px] uii:md:text-sm uii:cursor-pointer uii:hover:bg-muted/50\",\n                \"uii:mt-0.5 uii:bg-white uii:rounded-md uii:items-center\"\n              ),\n              onClick: () => handleModeChange(\"editor\"),\n              onMouseEnter: () => setIsHovering(true),\n              onMouseLeave: () => setIsHovering(false)\n            },\n            /* @__PURE__ */ React4__default.createElement(\"span\", { className: \"uii:flex-1 uii:truncate uii:text-foreground uii:items-center\" }, isHovering ? (\n              // Hover state: show AST preview with dependencies\n              /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:flex uii:items-center uii:gap-2\" }, ast ? /* @__PURE__ */ React4__default.createElement(\n                ASTRenderer,\n                {\n                  key: `${key}-ast`,\n                  ast,\n                  tokens,\n                  variant: \"inline\",\n                  showTokens: false,\n                  className: \"uii:text-xs\"\n                }\n              ) : /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:text-xs uii:text-gray-500\" }, isParsing ? \"Parsing...\" : parseError ? `Error: ${parseError}` : \"No AST available\"), dependencies.length > 0 && /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:flex uii:gap-1\" }, dependencies.map((dep, index) => /* @__PURE__ */ React4__default.createElement(\n                \"span\",\n                {\n                  key: index,\n                  className: \"uii:px-1 uii:py-0.5 uii:bg-blue-100 uii:text-blue-800 uii:text-xs uii:rounded\"\n                },\n                dep\n              ))))\n            ) : (\n              // At rest: show the expression text\n              /* @__PURE__ */ React4__default.createElement(\"span\", { className: \"uii:font-mono uii:text-sm\" }, currentExpressionValueExt || \"No expression\")\n            ))\n          )\n        );\n      default:\n        return children(controlProps);\n    }\n  };\n  return /* @__PURE__ */ React4__default.createElement(React4__default.Fragment, null, /* @__PURE__ */ React4__default.createElement(\"div\", { className: \"uii:flex uii:items-center uii:gap-2 uii:mt-2\" }, /* @__PURE__ */ React4__default.createElement(\"label\", { className: \"uii:text-xs uii:text-muted-foreground uii:font-bold\", htmlFor: key }, label, \":\"), /* @__PURE__ */ React4__default.createElement(\"span\", { className: \"uii:-mt-2 uii:inline-flex uii:px-1 uii:py-0.5 uii:bg-gray-200 uii:rounded-sm uii:text-[10px] uii:font-mono uii:text-muted-foreground uii:font-light\" }, type), hasTypeMismatch || inferredReturnType === \"error\" ? /* @__PURE__ */ React4__default.createElement(React4__default.Fragment, null, expressionMode.current === \"expression\" ? /* @__PURE__ */ React4__default.createElement(React4__default.Fragment, null, /* @__PURE__ */ React4__default.createElement(\"span\", { className: \"uii:-mt-2 uii:inline-flex uii:px-1 uii:py-0.5 uii:bg-gray-200 uii:rounded-sm uii:text-[10px] uii:font-mono uii:text-muted-foreground uii:font-light\" }, expressionMode.expression.trim() !== \"\" ? inferredReturnType : \"empty\"), /* @__PURE__ */ React4__default.createElement(\"span\", { className: \"uii:-mt-2 uii:inline-flex uii:px-1 uii:py-0.5 uii:bg-gray-200 uii:rounded-sm uii:text-[10px] uii:font-mono uii:font-light uii:text-orange-600 \" }, \"\\u26A0\\uFE0F Expected: \", type || expectedType)) : /* @__PURE__ */ React4__default.createElement(React4__default.Fragment, null)) : /* @__PURE__ */ React4__default.createElement(React4__default.Fragment, null)), renderContent());\n}\n\n// src/components/input.tsx\nfunction Input2({ className, expectedType, ...props }) {\n  return /* @__PURE__ */ React4.createElement(\n    ExpressionWrapper,\n    {\n      label: props.label ?? \"Test Entry\",\n      key: props.key ?? props.name,\n      type: expectedType ?? \"string\",\n      valuesLoading: false,\n      value: props.value,\n      onValueChange: (val, metadata) => {\n        props.onChange && props.onChange(val);\n      },\n      expectedType,\n      fieldName: props.name ?? props.key,\n      children: ({ onExpressionClick, onChange: onChangeExpression, value: expressionValue, localInput, setLocalInput }) => /* @__PURE__ */ React4.createElement(\"div\", { className: \"uii:relative uii:text-xs uii:mt-0.5\" }, /* @__PURE__ */ React4.createElement(\n        Input,\n        {\n          type: \"text\",\n          value: localInput,\n          onChange: (e) => {\n            setLocalInput(e.target.value);\n            onChangeExpression(e.target.value);\n          },\n          placeholder: props.placeholder ?? \"Enter value...\"\n        }\n      ), /* @__PURE__ */ React4.createElement(\"div\", { className: \"uii:flex uii:bg-white uii:border-white/40 uii:border-l-8 uii:items-center uii:gap-1 uii:absolute uii:right-1.5 uii:top-2.5 uii:cursor-pointer uii:truncate\", onClick: () => onExpressionClick() }, /* @__PURE__ */ React4.createElement(\"span\", { className: \"uii:border-l uii:border-gray-200 uii:px-2\" }, \"Custom Expression\")))\n    }\n  );\n}\n\n// ../../node_modules/.pnpm/class-variance-authority@0.7.1/node_modules/class-variance-authority/dist/index.mjs\nvar falsyToString = (value) => typeof value === \"boolean\" ? `${value}` : value === 0 ? \"0\" : value;\nvar cx = clsx;\nvar cva = (base, config) => (props) => {\n  var _config_compoundVariants;\n  if ((config === null || config === void 0 ? void 0 : config.variants) == null) return cx(base, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);\n  const { variants, defaultVariants } = config;\n  const getVariantClassNames = Object.keys(variants).map((variant) => {\n    const variantProp = props === null || props === void 0 ? void 0 : props[variant];\n    const defaultVariantProp = defaultVariants === null || defaultVariants === void 0 ? void 0 : defaultVariants[variant];\n    if (variantProp === null) return null;\n    const variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);\n    return variants[variant][variantKey];\n  });\n  const propsWithoutUndefined = props && Object.entries(props).reduce((acc, param) => {\n    let [key, value] = param;\n    if (value === void 0) {\n      return acc;\n    }\n    acc[key] = value;\n    return acc;\n  }, {});\n  const getCompoundVariantClassNames = config === null || config === void 0 ? void 0 : (_config_compoundVariants = config.compoundVariants) === null || _config_compoundVariants === void 0 ? void 0 : _config_compoundVariants.reduce((acc, param) => {\n    let { class: cvClass, className: cvClassName, ...compoundVariantOptions } = param;\n    return Object.entries(compoundVariantOptions).every((param2) => {\n      let [key, value] = param2;\n      return Array.isArray(value) ? value.includes({\n        ...defaultVariants,\n        ...propsWithoutUndefined\n      }[key]) : {\n        ...defaultVariants,\n        ...propsWithoutUndefined\n      }[key] === value;\n    }) ? [\n      ...acc,\n      cvClass,\n      cvClassName\n    ] : acc;\n  }, []);\n  return cx(base, getVariantClassNames, getCompoundVariantClassNames, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);\n};\n\n// src/components/ui/button.tsx\nvar buttonVariants = cva(\n  \"ui:inline-flex ui:items-center ui:justify-center ui:gap-2 ui:whitespace-nowrap ui:rounded-sm ui:text-sm ui:font-medium ui:transition-[color,box-shadow] ui:disabled:pointer-events-none ui:disabled:opacity-50 ui:[&_svg]:pointer-events-none ui:[&_svg:not([class*=size-])]:size-4 ui:shrink-0 ui:[&_svg]:shrink-0 ui:outline-none ui:focus-visible:border-ring ui:focus-visible:ring-ring/50 ui:focus-visible:ring-[3px] ui:aria-invalid:ring-destructive/20 ui:dark:aria-invalid:ring-destructive/40 ui:aria-invalid:border-destructive ui:cursor-pointer\",\n  {\n    variants: {\n      variant: {\n        default: \"ui:bg-primary ui:text-primary-foreground ui:shadow-xs ui:hover:bg-primary/90 ui:select-none\",\n        destructive: \"ui:bg-destructive ui:text-white ui:shadow-xs ui:hover:bg-destructive/90 ui:focus-visible:ring-destructive/20 ui:dark:focus-visible:ring-destructive/40\",\n        outline: \"ui:border ui:border-input ui:bg-background ui:shadow-xs ui:hover:bg-accent ui:hover:text-accent-foreground\",\n        secondary: \"ui:bg-secondary ui:text-secondary-foreground ui:shadow-xs ui:hover:bg-secondary/80\",\n        ghost: \"ui:hover:bg-accent ui:hover:text-accent-foreground\",\n        link: \"ui:text-primary ui:underline-offset-4 ui:hover:underline\"\n      },\n      size: {\n        default: \"ui:h-9 ui:px-4 ui:py-2 ui:has-[>svg]:px-3\",\n        sm: \"ui:h-8 ui:rounded-sm ui:gap-1.5 ui:px-3 ui:has-[>svg]:px-2.5\",\n        lg: \"ui:h-10 ui:rounded-sm ui:px-6 ui:has-[>svg]:px-4\",\n        icon: \"ui:size-9\"\n      }\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\"\n    }\n  }\n);\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}) {\n  const Comp = asChild ? Slot : \"button\";\n  return /* @__PURE__ */ React4.createElement(\n    Comp,\n    {\n      \"data-slot\": \"button\",\n      className: cn(buttonVariants({ variant, size, className })),\n      ...props\n    }\n  );\n}\n\nexport { Button, Input2 as Input, buttonVariants };\n//# sourceMappingURL=index.js.map\n","function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f)}else for(f in e)e[f]&&(n&&(n+=\" \"),n+=f);return n}export function clsx(){for(var e,t,f=0,n=\"\",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","import {\n    AnyClassGroupIds,\n    AnyConfig,\n    AnyThemeGroupIds,\n    ClassGroup,\n    ClassValidator,\n    Config,\n    ThemeGetter,\n    ThemeObject,\n} from './types'\n\nexport interface ClassPartObject {\n    nextPart: Map<string, ClassPartObject>\n    validators: ClassValidatorObject[]\n    classGroupId?: AnyClassGroupIds\n}\n\ninterface ClassValidatorObject {\n    classGroupId: AnyClassGroupIds\n    validator: ClassValidator\n}\n\nconst CLASS_PART_SEPARATOR = '-'\n\nexport const createClassGroupUtils = (config: AnyConfig) => {\n    const classMap = createClassMap(config)\n    const { conflictingClassGroups, conflictingClassGroupModifiers } = config\n\n    const getClassGroupId = (className: string) => {\n        const classParts = className.split(CLASS_PART_SEPARATOR)\n\n        // Classes like `-inset-1` produce an empty string as first classPart. We assume that classes for negative values are used correctly and remove it from classParts.\n        if (classParts[0] === '' && classParts.length !== 1) {\n            classParts.shift()\n        }\n\n        return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className)\n    }\n\n    const getConflictingClassGroupIds = (\n        classGroupId: AnyClassGroupIds,\n        hasPostfixModifier: boolean,\n    ) => {\n        const conflicts = conflictingClassGroups[classGroupId] || []\n\n        if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {\n            return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]!]\n        }\n\n        return conflicts\n    }\n\n    return {\n        getClassGroupId,\n        getConflictingClassGroupIds,\n    }\n}\n\nconst getGroupRecursive = (\n    classParts: string[],\n    classPartObject: ClassPartObject,\n): AnyClassGroupIds | undefined => {\n    if (classParts.length === 0) {\n        return classPartObject.classGroupId\n    }\n\n    const currentClassPart = classParts[0]!\n    const nextClassPartObject = classPartObject.nextPart.get(currentClassPart)\n    const classGroupFromNextClassPart = nextClassPartObject\n        ? getGroupRecursive(classParts.slice(1), nextClassPartObject)\n        : undefined\n\n    if (classGroupFromNextClassPart) {\n        return classGroupFromNextClassPart\n    }\n\n    if (classPartObject.validators.length === 0) {\n        return undefined\n    }\n\n    const classRest = classParts.join(CLASS_PART_SEPARATOR)\n\n    return classPartObject.validators.find(({ validator }) => validator(classRest))?.classGroupId\n}\n\nconst arbitraryPropertyRegex = /^\\[(.+)\\]$/\n\nconst getGroupIdForArbitraryProperty = (className: string) => {\n    if (arbitraryPropertyRegex.test(className)) {\n        const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)![1]\n        const property = arbitraryPropertyClassName?.substring(\n            0,\n            arbitraryPropertyClassName.indexOf(':'),\n        )\n\n        if (property) {\n            // I use two dots here because one dot is used as prefix for class groups in plugins\n            return 'arbitrary..' + property\n        }\n    }\n}\n\n/**\n * Exported for testing only\n */\nexport const createClassMap = (config: Config<AnyClassGroupIds, AnyThemeGroupIds>) => {\n    const { theme, classGroups } = config\n    const classMap: ClassPartObject = {\n        nextPart: new Map<string, ClassPartObject>(),\n        validators: [],\n    }\n\n    for (const classGroupId in classGroups) {\n        processClassesRecursively(classGroups[classGroupId]!, classMap, classGroupId, theme)\n    }\n\n    return classMap\n}\n\nconst processClassesRecursively = (\n    classGroup: ClassGroup<AnyThemeGroupIds>,\n    classPartObject: ClassPartObject,\n    classGroupId: AnyClassGroupIds,\n    theme: ThemeObject<AnyThemeGroupIds>,\n) => {\n    classGroup.forEach((classDefinition) => {\n        if (typeof classDefinition === 'string') {\n            const classPartObjectToEdit =\n                classDefinition === '' ? classPartObject : getPart(classPartObject, classDefinition)\n            classPartObjectToEdit.classGroupId = classGroupId\n            return\n        }\n\n        if (typeof classDefinition === 'function') {\n            if (isThemeGetter(classDefinition)) {\n                processClassesRecursively(\n                    classDefinition(theme),\n                    classPartObject,\n                    classGroupId,\n                    theme,\n                )\n                return\n            }\n\n            classPartObject.validators.push({\n                validator: classDefinition,\n                classGroupId,\n            })\n\n            return\n        }\n\n        Object.entries(classDefinition).forEach(([key, classGroup]) => {\n            processClassesRecursively(\n                classGroup,\n                getPart(classPartObject, key),\n                classGroupId,\n                theme,\n            )\n        })\n    })\n}\n\nconst getPart = (classPartObject: ClassPartObject, path: string) => {\n    let currentClassPartObject = classPartObject\n\n    path.split(CLASS_PART_SEPARATOR).forEach((pathPart) => {\n        if (!currentClassPartObject.nextPart.has(pathPart)) {\n            currentClassPartObject.nextPart.set(pathPart, {\n                nextPart: new Map(),\n                validators: [],\n            })\n        }\n\n        currentClassPartObject = currentClassPartObject.nextPart.get(pathPart)!\n    })\n\n    return currentClassPartObject\n}\n\nconst isThemeGetter = (func: ClassValidator | ThemeGetter): func is ThemeGetter =>\n    (func as ThemeGetter).isThemeGetter\n","// Export is needed because TypeScript complains about an error otherwise:\n// Error: …/tailwind-merge/src/config-utils.ts(8,17): semantic error TS4058: Return type of exported function has or is using name 'LruCache' from external module \"…/tailwind-merge/src/lru-cache\" but cannot be named.\nexport interface LruCache<Key, Value> {\n    get(key: Key): Value | undefined\n    set(key: Key, value: Value): void\n}\n\n// LRU cache inspired from hashlru (https://github.com/dominictarr/hashlru/blob/v1.0.4/index.js) but object replaced with Map to improve performance\nexport const createLruCache = <Key, Value>(maxCacheSize: number): LruCache<Key, Value> => {\n    if (maxCacheSize < 1) {\n        return {\n            get: () => undefined,\n            set: () => {},\n        }\n    }\n\n    let cacheSize = 0\n    let cache = new Map<Key, Value>()\n    let previousCache = new Map<Key, Value>()\n\n    const update = (key: Key, value: Value) => {\n        cache.set(key, value)\n        cacheSize++\n\n        if (cacheSize > maxCacheSize) {\n            cacheSize = 0\n            previousCache = cache\n            cache = new Map()\n        }\n    }\n\n    return {\n        get(key) {\n            let value = cache.get(key)\n\n            if (value !== undefined) {\n                return value\n            }\n            if ((value = previousCache.get(key)) !== undefined) {\n                update(key, value)\n                return value\n            }\n        },\n        set(key, value) {\n            if (cache.has(key)) {\n                cache.set(key, value)\n            } else {\n                update(key, value)\n            }\n        },\n    }\n}\n","import { AnyConfig, ParsedClassName } from './types'\n\nexport const IMPORTANT_MODIFIER = '!'\nconst MODIFIER_SEPARATOR = ':'\nconst MODIFIER_SEPARATOR_LENGTH = MODIFIER_SEPARATOR.length\n\nexport const createParseClassName = (config: AnyConfig) => {\n    const { prefix, experimentalParseClassName } = config\n\n    /**\n     * Parse class name into parts.\n     *\n     * Inspired by `splitAtTopLevelOnly` used in Tailwind CSS\n     * @see https://github.com/tailwindlabs/tailwindcss/blob/v3.2.2/src/util/splitAtTopLevelOnly.js\n     */\n    let parseClassName = (className: string): ParsedClassName => {\n        const modifiers = []\n\n        let bracketDepth = 0\n        let parenDepth = 0\n        let modifierStart = 0\n        let postfixModifierPosition: number | undefined\n\n        for (let index = 0; index < className.length; index++) {\n            let currentCharacter = className[index]\n\n            if (bracketDepth === 0 && parenDepth === 0) {\n                if (currentCharacter === MODIFIER_SEPARATOR) {\n                    modifiers.push(className.slice(modifierStart, index))\n                    modifierStart = index + MODIFIER_SEPARATOR_LENGTH\n                    continue\n                }\n\n                if (currentCharacter === '/') {\n                    postfixModifierPosition = index\n                    continue\n                }\n            }\n\n            if (currentCharacter === '[') {\n                bracketDepth++\n            } else if (currentCharacter === ']') {\n                bracketDepth--\n            } else if (currentCharacter === '(') {\n                parenDepth++\n            } else if (currentCharacter === ')') {\n                parenDepth--\n            }\n        }\n\n        const baseClassNameWithImportantModifier =\n            modifiers.length === 0 ? className : className.substring(modifierStart)\n        const baseClassName = stripImportantModifier(baseClassNameWithImportantModifier)\n        const hasImportantModifier = baseClassName !== baseClassNameWithImportantModifier\n        const maybePostfixModifierPosition =\n            postfixModifierPosition && postfixModifierPosition > modifierStart\n                ? postfixModifierPosition - modifierStart\n                : undefined\n\n        return {\n            modifiers,\n            hasImportantModifier,\n            baseClassName,\n            maybePostfixModifierPosition,\n        }\n    }\n\n    if (prefix) {\n        const fullPrefix = prefix + MODIFIER_SEPARATOR\n        const parseClassNameOriginal = parseClassName\n        parseClassName = (className) =>\n            className.startsWith(fullPrefix)\n                ? parseClassNameOriginal(className.substring(fullPrefix.length))\n                : {\n                      isExternal: true,\n                      modifiers: [],\n                      hasImportantModifier: false,\n                      baseClassName: className,\n                      maybePostfixModifierPosition: undefined,\n                  }\n    }\n\n    if (experimentalParseClassName) {\n        const parseClassNameOriginal = parseClassName\n        parseClassName = (className) =>\n            experimentalParseClassName({ className, parseClassName: parseClassNameOriginal })\n    }\n\n    return parseClassName\n}\n\nconst stripImportantModifier = (baseClassName: string) => {\n    if (baseClassName.endsWith(IMPORTANT_MODIFIER)) {\n        return baseClassName.substring(0, baseClassName.length - 1)\n    }\n\n    /**\n     * In Tailwind CSS v3 the important modifier was at the start of the base class name. This is still supported for legacy reasons.\n     * @see https://github.com/dcastil/tailwind-merge/issues/513#issuecomment-2614029864\n     */\n    if (baseClassName.startsWith(IMPORTANT_MODIFIER)) {\n        return baseClassName.substring(1)\n    }\n\n    return baseClassName\n}\n","import { AnyConfig } from './types'\n\n/**\n * Sorts modifiers according to following schema:\n * - Predefined modifiers are sorted alphabetically\n * - When an arbitrary variant appears, it must be preserved which modifiers are before and after it\n */\nexport const createSortModifiers = (config: AnyConfig) => {\n    const orderSensitiveModifiers = Object.fromEntries(\n        config.orderSensitiveModifiers.map((modifier) => [modifier, true]),\n    )\n\n    const sortModifiers = (modifiers: string[]) => {\n        if (modifiers.length <= 1) {\n            return modifiers\n        }\n\n        const sortedModifiers: string[] = []\n        let unsortedModifiers: string[] = []\n\n        modifiers.forEach((modifier) => {\n            const isPositionSensitive = modifier[0] === '[' || orderSensitiveModifiers[modifier]\n\n            if (isPositionSensitive) {\n                sortedModifiers.push(...unsortedModifiers.sort(), modifier)\n                unsortedModifiers = []\n            } else {\n                unsortedModifiers.push(modifier)\n            }\n        })\n\n        sortedModifiers.push(...unsortedModifiers.sort())\n\n        return sortedModifiers\n    }\n\n    return sortModifiers\n}\n","import { createClassGroupUtils } from './class-group-utils'\nimport { createLruCache } from './lru-cache'\nimport { createParseClassName } from './parse-class-name'\nimport { createSortModifiers } from './sort-modifiers'\nimport { AnyConfig } from './types'\n\nexport type ConfigUtils = ReturnType<typeof createConfigUtils>\n\nexport const createConfigUtils = (config: AnyConfig) => ({\n    cache: createLruCache<string, string>(config.cacheSize),\n    parseClassName: createParseClassName(config),\n    sortModifiers: createSortModifiers(config),\n    ...createClassGroupUtils(config),\n})\n","import { ConfigUtils } from './config-utils'\nimport { IMPORTANT_MODIFIER } from './parse-class-name'\n\nconst SPLIT_CLASSES_REGEX = /\\s+/\n\nexport const mergeClassList = (classList: string, configUtils: ConfigUtils) => {\n    const { parseClassName, getClassGroupId, getConflictingClassGroupIds, sortModifiers } =\n        configUtils\n\n    /**\n     * Set of classGroupIds in following format:\n     * `{importantModifier}{variantModifiers}{classGroupId}`\n     * @example 'float'\n     * @example 'hover:focus:bg-color'\n     * @example 'md:!pr'\n     */\n    const classGroupsInConflict: string[] = []\n    const classNames = classList.trim().split(SPLIT_CLASSES_REGEX)\n\n    let result = ''\n\n    for (let index = classNames.length - 1; index >= 0; index -= 1) {\n        const originalClassName = classNames[index]!\n\n        const {\n            isExternal,\n            modifiers,\n            hasImportantModifier,\n            baseClassName,\n            maybePostfixModifierPosition,\n        } = parseClassName(originalClassName)\n\n        if (isExternal) {\n            result = originalClassName + (result.length > 0 ? ' ' + result : result)\n            continue\n        }\n\n        let hasPostfixModifier = !!maybePostfixModifierPosition\n        let classGroupId = getClassGroupId(\n            hasPostfixModifier\n                ? baseClassName.substring(0, maybePostfixModifierPosition)\n                : baseClassName,\n        )\n\n        if (!classGroupId) {\n            if (!hasPostfixModifier) {\n                // Not a Tailwind class\n                result = originalClassName + (result.length > 0 ? ' ' + result : result)\n                continue\n            }\n\n            classGroupId = getClassGroupId(baseClassName)\n\n            if (!classGroupId) {\n                // Not a Tailwind class\n                result = originalClassName + (result.length > 0 ? ' ' + result : result)\n                continue\n            }\n\n            hasPostfixModifier = false\n        }\n\n        const variantModifier = sortModifiers(modifiers).join(':')\n\n        const modifierId = hasImportantModifier\n            ? variantModifier + IMPORTANT_MODIFIER\n            : variantModifier\n\n        const classId = modifierId + classGroupId\n\n        if (classGroupsInConflict.includes(classId)) {\n            // Tailwind class omitted due to conflict\n            continue\n        }\n\n        classGroupsInConflict.push(classId)\n\n        const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier)\n        for (let i = 0; i < conflictGroups.length; ++i) {\n            const group = conflictGroups[i]!\n            classGroupsInConflict.push(modifierId + group)\n        }\n\n        // Tailwind class not in conflict\n        result = originalClassName + (result.length > 0 ? ' ' + result : result)\n    }\n\n    return result\n}\n","/**\n * The code in this file is copied from https://github.com/lukeed/clsx and modified to suit the needs of tailwind-merge better.\n *\n * Specifically:\n * - Runtime code from https://github.com/lukeed/clsx/blob/v1.2.1/src/index.js\n * - TypeScript types from https://github.com/lukeed/clsx/blob/v1.2.1/clsx.d.ts\n *\n * Original code has MIT license: Copyright (c) Luke Edwards <luke.edwards05@gmail.com> (lukeed.com)\n */\n\nexport type ClassNameValue = ClassNameArray | string | null | undefined | 0 | 0n | false\ntype ClassNameArray = ClassNameValue[]\n\nexport function twJoin(...classLists: ClassNameValue[]): string\nexport function twJoin() {\n    let index = 0\n    let argument: ClassNameValue\n    let resolvedValue: string\n    let string = ''\n\n    while (index < arguments.length) {\n        if ((argument = arguments[index++])) {\n            if ((resolvedValue = toValue(argument))) {\n                string && (string += ' ')\n                string += resolvedValue\n            }\n        }\n    }\n    return string\n}\n\nconst toValue = (mix: ClassNameArray | string) => {\n    if (typeof mix === 'string') {\n        return mix\n    }\n\n    let resolvedValue: string\n    let string = ''\n\n    for (let k = 0; k < mix.length; k++) {\n        if (mix[k]) {\n            if ((resolvedValue = toValue(mix[k] as ClassNameArray | string))) {\n                string && (string += ' ')\n                string += resolvedValue\n            }\n        }\n    }\n\n    return string\n}\n","import { createConfigUtils } from './config-utils'\nimport { mergeClassList } from './merge-classlist'\nimport { ClassNameValue, twJoin } from './tw-join'\nimport { AnyConfig } from './types'\n\ntype CreateConfigFirst = () => AnyConfig\ntype CreateConfigSubsequent = (config: AnyConfig) => AnyConfig\ntype TailwindMerge = (...classLists: ClassNameValue[]) => string\ntype ConfigUtils = ReturnType<typeof createConfigUtils>\n\nexport function createTailwindMerge(\n    createConfigFirst: CreateConfigFirst,\n    ...createConfigRest: CreateConfigSubsequent[]\n): TailwindMerge {\n    let configUtils: ConfigUtils\n    let cacheGet: ConfigUtils['cache']['get']\n    let cacheSet: ConfigUtils['cache']['set']\n    let functionToCall = initTailwindMerge\n\n    function initTailwindMerge(classList: string) {\n        const config = createConfigRest.reduce(\n            (previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig),\n            createConfigFirst() as AnyConfig,\n        )\n\n        configUtils = createConfigUtils(config)\n        cacheGet = configUtils.cache.get\n        cacheSet = configUtils.cache.set\n        functionToCall = tailwindMerge\n\n        return tailwindMerge(classList)\n    }\n\n    function tailwindMerge(classList: string) {\n        const cachedResult = cacheGet(classList)\n\n        if (cachedResult) {\n            return cachedResult\n        }\n\n        const result = mergeClassList(classList, configUtils)\n        cacheSet(classList, result)\n\n        return result\n    }\n\n    return function callTailwindMerge() {\n        return functionToCall(twJoin.apply(null, arguments as any))\n    }\n}\n","import { DefaultThemeGroupIds, NoInfer, ThemeGetter, ThemeObject } from './types'\n\nexport const fromTheme = <\n    AdditionalThemeGroupIds extends string = never,\n    DefaultThemeGroupIdsInner extends string = DefaultThemeGroupIds,\n>(key: NoInfer<DefaultThemeGroupIdsInner | AdditionalThemeGroupIds>): ThemeGetter => {\n    const themeGetter = (theme: ThemeObject<DefaultThemeGroupIdsInner | AdditionalThemeGroupIds>) =>\n        theme[key] || []\n\n    themeGetter.isThemeGetter = true as const\n\n    return themeGetter\n}\n","const arbitraryValueRegex = /^\\[(?:(\\w[\\w-]*):)?(.+)\\]$/i\nconst arbitraryVariableRegex = /^\\((?:(\\w[\\w-]*):)?(.+)\\)$/i\nconst fractionRegex = /^\\d+\\/\\d+$/\nconst tshirtUnitRegex = /^(\\d+(\\.\\d+)?)?(xs|sm|md|lg|xl)$/\nconst lengthUnitRegex =\n    /\\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\\b(calc|min|max|clamp)\\(.+\\)|^0$/\nconst colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\\(.+\\)$/\n// Shadow always begins with x and y offset separated by underscore optionally prepended by inset\nconst shadowRegex = /^(inset_)?-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/\nconst imageRegex =\n    /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\\(.+\\)$/\n\nexport const isFraction = (value: string) => fractionRegex.test(value)\n\nexport const isNumber = (value: string) => Boolean(value) && !Number.isNaN(Number(value))\n\nexport const isInteger = (value: string) => Boolean(value) && Number.isInteger(Number(value))\n\nexport const isPercent = (value: string) => value.endsWith('%') && isNumber(value.slice(0, -1))\n\nexport const isTshirtSize = (value: string) => tshirtUnitRegex.test(value)\n\nexport const isAny = () => true\n\nconst isLengthOnly = (value: string) =>\n    // `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.\n    // For example, `hsl(0 0% 0%)` would be classified as a length without this check.\n    // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.\n    lengthUnitRegex.test(value) && !colorFunctionRegex.test(value)\n\nconst isNever = () => false\n\nconst isShadow = (value: string) => shadowRegex.test(value)\n\nconst isImage = (value: string) => imageRegex.test(value)\n\nexport const isAnyNonArbitrary = (value: string) =>\n    !isArbitraryValue(value) && !isArbitraryVariable(value)\n\nexport const isArbitrarySize = (value: string) => getIsArbitraryValue(value, isLabelSize, isNever)\n\nexport const isArbitraryValue = (value: string) => arbitraryValueRegex.test(value)\n\nexport const isArbitraryLength = (value: string) =>\n    getIsArbitraryValue(value, isLabelLength, isLengthOnly)\n\nexport const isArbitraryNumber = (value: string) =>\n    getIsArbitraryValue(value, isLabelNumber, isNumber)\n\nexport const isArbitraryPosition = (value: string) =>\n    getIsArbitraryValue(value, isLabelPosition, isNever)\n\nexport const isArbitraryImage = (value: string) => getIsArbitraryValue(value, isLabelImage, isImage)\n\nexport const isArbitraryShadow = (value: string) => getIsArbitraryValue(value, isNever, isShadow)\n\nexport const isArbitraryVariable = (value: string) => arbitraryVariableRegex.test(value)\n\nexport const isArbitraryVariableLength = (value: string) =>\n    getIsArbitraryVariable(value, isLabelLength)\n\nexport const isArbitraryVariableFamilyName = (value: string) =>\n    getIsArbitraryVariable(value, isLabelFamilyName)\n\nexport const isArbitraryVariablePosition = (value: string) =>\n    getIsArbitraryVariable(value, isLabelPosition)\n\nexport const isArbitraryVariableSize = (value: string) => getIsArbitraryVariable(value, isLabelSize)\n\nexport const isArbitraryVariableImage = (value: string) =>\n    getIsArbitraryVariable(value, isLabelImage)\n\nexport const isArbitraryVariableShadow = (value: string) =>\n    getIsArbitraryVariable(value, isLabelShadow, true)\n\n// Helpers\n\nconst getIsArbitraryValue = (\n    value: string,\n    testLabel: (label: string) => boolean,\n    testValue: (value: string) => boolean,\n) => {\n    const result = arbitraryValueRegex.exec(value)\n\n    if (result) {\n        if (result[1]) {\n            return testLabel(result[1])\n        }\n\n        return testValue(result[2]!)\n    }\n\n    return false\n}\n\nconst getIsArbitraryVariable = (\n    value: string,\n    testLabel: (label: string) => boolean,\n    shouldMatchNoLabel = false,\n) => {\n    const result = arbitraryVariableRegex.exec(value)\n\n    if (result) {\n        if (result[1]) {\n            return testLabel(result[1])\n        }\n        return shouldMatchNoLabel\n    }\n\n    return false\n}\n\n// Labels\n\nconst isLabelPosition = (label: string) => label === 'position'\n\nconst imageLabels = new Set(['image', 'url'])\n\nconst isLabelImage = (label: string) => imageLabels.has(label)\n\nconst sizeLabels = new Set(['length', 'size', 'percentage'])\n\nconst isLabelSize = (label: string) => sizeLabels.has(label)\n\nconst isLabelLength = (label: string) => label === 'length'\n\nconst isLabelNumber = (label: string) => label === 'number'\n\nconst isLabelFamilyName = (label: string) => label === 'family-name'\n\nconst isLabelShadow = (label: string) => label === 'shadow'\n","import { fromTheme } from './from-theme'\nimport { Config, DefaultClassGroupIds, DefaultThemeGroupIds } from './types'\nimport {\n    isAny,\n    isAnyNonArbitrary,\n    isArbitraryImage,\n    isArbitraryLength,\n    isArbitraryNumber,\n    isArbitraryPosition,\n    isArbitraryShadow,\n    isArbitrarySize,\n    isArbitraryValue,\n    isArbitraryVariable,\n    isArbitraryVariableFamilyName,\n    isArbitraryVariableImage,\n    isArbitraryVariableLength,\n    isArbitraryVariablePosition,\n    isArbitraryVariableShadow,\n    isArbitraryVariableSize,\n    isFraction,\n    isInteger,\n    isNumber,\n    isPercent,\n    isTshirtSize,\n} from './validators'\n\nexport const getDefaultConfig = () => {\n    /**\n     * Theme getters for theme variable namespaces\n     * @see https://tailwindcss.com/docs/theme#theme-variable-namespaces\n     */\n    /***/\n\n    const themeColor = fromTheme('color')\n    const themeFont = fromTheme('font')\n    const themeText = fromTheme('text')\n    const themeFontWeight = fromTheme('font-weight')\n    const themeTracking = fromTheme('tracking')\n    const themeLeading = fromTheme('leading')\n    const themeBreakpoint = fromTheme('breakpoint')\n    const themeContainer = fromTheme('container')\n    const themeSpacing = fromTheme('spacing')\n    const themeRadius = fromTheme('radius')\n    const themeShadow = fromTheme('shadow')\n    const themeInsetShadow = fromTheme('inset-shadow')\n    const themeDropShadow = fromTheme('drop-shadow')\n    const themeBlur = fromTheme('blur')\n    const themePerspective = fromTheme('perspective')\n    const themeAspect = fromTheme('aspect')\n    const themeEase = fromTheme('ease')\n    const themeAnimate = fromTheme('animate')\n\n    /**\n     * Helpers to avoid repeating the same scales\n     *\n     * We use functions that create a new array every time they're called instead of static arrays.\n     * This ensures that users who modify any scale by mutating the array (e.g. with `array.push(element)`) don't accidentally mutate arrays in other parts of the config.\n     */\n    /***/\n\n    const scaleBreak = () =>\n        ['auto', 'avoid', 'all', 'avoid-page', 'page', 'left', 'right', 'column'] as const\n    const scalePosition = () =>\n        [\n            'bottom',\n            'center',\n            'left',\n            'left-bottom',\n            'left-top',\n            'right',\n            'right-bottom',\n            'right-top',\n            'top',\n        ] as const\n    const scaleOverflow = () => ['auto', 'hidden', 'clip', 'visible', 'scroll'] as const\n    const scaleOverscroll = () => ['auto', 'contain', 'none'] as const\n    const scaleUnambiguousSpacing = () =>\n        [isArbitraryVariable, isArbitraryValue, themeSpacing] as const\n    const scaleInset = () => [isFraction, 'full', 'auto', ...scaleUnambiguousSpacing()] as const\n    const scaleGridTemplateColsRows = () =>\n        [isInteger, 'none', 'subgrid', isArbitraryVariable, isArbitraryValue] as const\n    const scaleGridColRowStartAndEnd = () =>\n        [\n            'auto',\n            { span: ['full', isInteger, isArbitraryVariable, isArbitraryValue] },\n            isInteger,\n            isArbitraryVariable,\n            isArbitraryValue,\n        ] as const\n    const scaleGridColRowStartOrEnd = () =>\n        [isInteger, 'auto', isArbitraryVariable, isArbitraryValue] as const\n    const scaleGridAutoColsRows = () =>\n        ['auto', 'min', 'max', 'fr', isArbitraryVariable, isArbitraryValue] as const\n    const scaleAlignPrimaryAxis = () =>\n        ['start', 'end', 'center', 'between', 'around', 'evenly', 'stretch', 'baseline'] as const\n    const scaleAlignSecondaryAxis = () => ['start', 'end', 'center', 'stretch'] as const\n    const scaleMargin = () => ['auto', ...scaleUnambiguousSpacing()] as const\n    const scaleSizing = () =>\n        [\n            isFraction,\n            'auto',\n            'full',\n            'dvw',\n            'dvh',\n            'lvw',\n            'lvh',\n            'svw',\n            'svh',\n            'min',\n            'max',\n            'fit',\n            ...scaleUnambiguousSpacing(),\n        ] as const\n    const scaleColor = () => [themeColor, isArbitraryVariable, isArbitraryValue] as const\n    const scaleGradientStopPosition = () =>\n        [isPercent, isArbitraryVariableLength, isArbitraryLength] as const\n    const scaleRadius = () =>\n        [\n            // Deprecated since Tailwind CSS v4.0.0\n            '',\n            'none',\n            'full',\n            themeRadius,\n            isArbitraryVariable,\n            isArbitraryValue,\n        ] as const\n    const scaleBorderWidth = () =>\n        ['', isNumber, isArbitraryVariableLength, isArbitraryLength] as const\n    const scaleLineStyle = () => ['solid', 'dashed', 'dotted', 'double'] as const\n    const scaleBlendMode = () =>\n        [\n            'normal',\n            'multiply',\n            'screen',\n            'overlay',\n            'darken',\n            'lighten',\n            'color-dodge',\n            'color-burn',\n            'hard-light',\n            'soft-light',\n            'difference',\n            'exclusion',\n            'hue',\n            'saturation',\n            'color',\n            'luminosity',\n        ] as const\n    const scaleBlur = () =>\n        [\n            // Deprecated since Tailwind CSS v4.0.0\n            '',\n            'none',\n            themeBlur,\n            isArbitraryVariable,\n            isArbitraryValue,\n        ] as const\n    const scaleOrigin = () =>\n        [\n            'center',\n            'top',\n            'top-right',\n            'right',\n            'bottom-right',\n            'bottom',\n            'bottom-left',\n            'left',\n            'top-left',\n            isArbitraryVariable,\n            isArbitraryValue,\n        ] as const\n    const scaleRotate = () => ['none', isNumber, isArbitraryVariable, isArbitraryValue] as const\n    const scaleScale = () => ['none', isNumber, isArbitraryVariable, isArbitraryValue] as const\n    const scaleSkew = () => [isNumber, isArbitraryVariable, isArbitraryValue] as const\n    const scaleTranslate = () => [isFraction, 'full', ...scaleUnambiguousSpacing()] as const\n\n    return {\n        cacheSize: 500,\n        theme: {\n            animate: ['spin', 'ping', 'pulse', 'bounce'],\n            aspect: ['video'],\n            blur: [isTshirtSize],\n            breakpoint: [isTshirtSize],\n            color: [isAny],\n            container: [isTshirtSize],\n            'drop-shadow': [isTshirtSize],\n            ease: ['in', 'out', 'in-out'],\n            font: [isAnyNonArbitrary],\n            'font-weight': [\n                'thin',\n                'extralight',\n                'light',\n                'normal',\n                'medium',\n                'semibold',\n                'bold',\n                'extrabold',\n                'black',\n            ],\n            'inset-shadow': [isTshirtSize],\n            leading: ['none', 'tight', 'snug', 'normal', 'relaxed', 'loose'],\n            perspective: ['dramatic', 'near', 'normal', 'midrange', 'distant', 'none'],\n            radius: [isTshirtSize],\n            shadow: [isTshirtSize],\n            spacing: ['px', isNumber],\n            text: [isTshirtSize],\n            tracking: ['tighter', 'tight', 'normal', 'wide', 'wider', 'widest'],\n        },\n        classGroups: {\n            // --------------\n            // --- Layout ---\n            // --------------\n\n            /**\n             * Aspect Ratio\n             * @see https://tailwindcss.com/docs/aspect-ratio\n             */\n            aspect: [\n                {\n                    aspect: [\n                        'auto',\n                        'square',\n                        isFraction,\n                        isArbitraryValue,\n                        isArbitraryVariable,\n                        themeAspect,\n                    ],\n                },\n            ],\n            /**\n             * Container\n             * @see https://tailwindcss.com/docs/container\n             * @deprecated since Tailwind CSS v4.0.0\n             */\n            container: ['container'],\n            /**\n             * Columns\n             * @see https://tailwindcss.com/docs/columns\n             */\n            columns: [\n                { columns: [isNumber, isArbitraryValue, isArbitraryVariable, themeContainer] },\n            ],\n            /**\n             * Break After\n             * @see https://tailwindcss.com/docs/break-after\n             */\n            'break-after': [{ 'break-after': scaleBreak() }],\n            /**\n             * Break Before\n             * @see https://tailwindcss.com/docs/break-before\n             */\n            'break-before': [{ 'break-before': scaleBreak() }],\n            /**\n             * Break Inside\n             * @see https://tailwindcss.com/docs/break-inside\n             */\n            'break-inside': [{ 'break-inside': ['auto', 'avoid', 'avoid-page', 'avoid-column'] }],\n            /**\n             * Box Decoration Break\n             * @see https://tailwindcss.com/docs/box-decoration-break\n             */\n            'box-decoration': [{ 'box-decoration': ['slice', 'clone'] }],\n            /**\n             * Box Sizing\n             * @see https://tailwindcss.com/docs/box-sizing\n             */\n            box: [{ box: ['border', 'content'] }],\n            /**\n             * Display\n             * @see https://tailwindcss.com/docs/display\n             */\n            display: [\n                'block',\n                'inline-block',\n                'inline',\n                'flex',\n                'inline-flex',\n                'table',\n                'inline-table',\n                'table-caption',\n                'table-cell',\n                'table-column',\n                'table-column-group',\n                'table-footer-group',\n                'table-header-group',\n                'table-row-group',\n                'table-row',\n                'flow-root',\n                'grid',\n                'inline-grid',\n                'contents',\n                'list-item',\n                'hidden',\n            ],\n            /**\n             * Screen Reader Only\n             * @see https://tailwindcss.com/docs/display#screen-reader-only\n             */\n            sr: ['sr-only', 'not-sr-only'],\n            /**\n             * Floats\n             * @see https://tailwindcss.com/docs/float\n             */\n            float: [{ float: ['right', 'left', 'none', 'start', 'end'] }],\n            /**\n             * Clear\n             * @see https://tailwindcss.com/docs/clear\n             */\n            clear: [{ clear: ['left', 'right', 'both', 'none', 'start', 'end'] }],\n            /**\n             * Isolation\n             * @see https://tailwindcss.com/docs/isolation\n             */\n            isolation: ['isolate', 'isolation-auto'],\n            /**\n             * Object Fit\n             * @see https://tailwindcss.com/docs/object-fit\n             */\n            'object-fit': [{ object: ['contain', 'cover', 'fill', 'none', 'scale-down'] }],\n            /**\n             * Object Position\n             * @see https://tailwindcss.com/docs/object-position\n             */\n            'object-position': [\n                { object: [...scalePosition(), isArbitraryValue, isArbitraryVariable] },\n            ],\n            /**\n             * Overflow\n             * @see https://tailwindcss.com/docs/overflow\n             */\n            overflow: [{ overflow: scaleOverflow() }],\n            /**\n             * Overflow X\n             * @see https://tailwindcss.com/docs/overflow\n             */\n            'overflow-x': [{ 'overflow-x': scaleOverflow() }],\n            /**\n             * Overflow Y\n             * @see https://tailwindcss.com/docs/overflow\n             */\n            'overflow-y': [{ 'overflow-y': scaleOverflow() }],\n            /**\n             * Overscroll Behavior\n             * @see https://tailwindcss.com/docs/overscroll-behavior\n             */\n            overscroll: [{ overscroll: scaleOverscroll() }],\n            /**\n             * Overscroll Behavior X\n             * @see https://tailwindcss.com/docs/overscroll-behavior\n             */\n            'overscroll-x': [{ 'overscroll-x': scaleOverscroll() }],\n            /**\n             * Overscroll Behavior Y\n             * @see https://tailwindcss.com/docs/overscroll-behavior\n             */\n            'overscroll-y': [{ 'overscroll-y': scaleOverscroll() }],\n            /**\n             * Position\n             * @see https://tailwindcss.com/docs/position\n             */\n            position: ['static', 'fixed', 'absolute', 'relative', 'sticky'],\n            /**\n             * Top / Right / Bottom / Left\n             * @see https://tailwindcss.com/docs/top-right-bottom-left\n             */\n            inset: [{ inset: scaleInset() }],\n            /**\n             * Right / Left\n             * @see https://tailwindcss.com/docs/top-right-bottom-left\n             */\n            'inset-x': [{ 'inset-x': scaleInset() }],\n            /**\n             * Top / Bottom\n             * @see https://tailwindcss.com/docs/top-right-bottom-left\n             */\n            'inset-y': [{ 'inset-y': scaleInset() }],\n            /**\n             * Start\n             * @see https://tailwindcss.com/docs/top-right-bottom-left\n             */\n            start: [{ start: scaleInset() }],\n            /**\n             * End\n             * @see https://tailwindcss.com/docs/top-right-bottom-left\n             */\n            end: [{ end: scaleInset() }],\n            /**\n             * Top\n             * @see https://tailwindcss.com/docs/top-right-bottom-left\n             */\n            top: [{ top: scaleInset() }],\n            /**\n             * Right\n             * @see https://tailwindcss.com/docs/top-right-bottom-left\n             */\n            right: [{ right: scaleInset() }],\n            /**\n             * Bottom\n             * @see https://tailwindcss.com/docs/top-right-bottom-left\n             */\n            bottom: [{ bottom: scaleInset() }],\n            /**\n             * Left\n             * @see https://tailwindcss.com/docs/top-right-bottom-left\n             */\n            left: [{ left: scaleInset() }],\n            /**\n             * Visibility\n             * @see https://tailwindcss.com/docs/visibility\n             */\n            visibility: ['visible', 'invisible', 'collapse'],\n            /**\n             * Z-Index\n             * @see https://tailwindcss.com/docs/z-index\n             */\n            z: [{ z: [isInteger, 'auto', isArbitraryVariable, isArbitraryValue] }],\n\n            // ------------------------\n            // --- Flexbox and Grid ---\n            // ------------------------\n\n            /**\n             * Flex Basis\n             * @see https://tailwindcss.com/docs/flex-basis\n             */\n            basis: [\n                {\n                    basis: [\n                        isFraction,\n                        'full',\n                        'auto',\n                        themeContainer,\n                        ...scaleUnambiguousSpacing(),\n                    ],\n                },\n            ],\n            /**\n             * Flex Direction\n             * @see https://tailwindcss.com/docs/flex-direction\n             */\n            'flex-direction': [{ flex: ['row', 'row-reverse', 'col', 'col-reverse'] }],\n            /**\n             * Flex Wrap\n             * @see https://tailwindcss.com/docs/flex-wrap\n             */\n            'flex-wrap': [{ flex: ['nowrap', 'wrap', 'wrap-reverse'] }],\n            /**\n             * Flex\n             * @see https://tailwindcss.com/docs/flex\n             */\n            flex: [{ flex: [isNumber, isFraction, 'auto', 'initial', 'none', isArbitraryValue] }],\n            /**\n             * Flex Grow\n             * @see https://tailwindcss.com/docs/flex-grow\n             */\n            grow: [{ grow: ['', isNumber, isArbitraryVariable, isArbitraryValue] }],\n            /**\n             * Flex Shrink\n             * @see https://tailwindcss.com/docs/flex-shrink\n             */\n            shrink: [{ shrink: ['', isNumber, isArbitraryVariable, isArbitraryValue] }],\n            /**\n             * Order\n             * @see https://tailwindcss.com/docs/order\n             */\n            order: [\n                {\n                    order: [\n                        isInteger,\n                        'first',\n                        'last',\n                        'none',\n                        isArbitraryVariable,\n                        isArbitraryValue,\n                    ],\n                },\n            ],\n            /**\n             * Grid Template Columns\n             * @see https://tailwindcss.com/docs/grid-template-columns\n             */\n            'grid-cols': [{ 'grid-cols': scaleGridTemplateColsRows() }],\n            /**\n             * Grid Column Start / End\n             * @see https://tailwindcss.com/docs/grid-column\n             */\n            'col-start-end': [{ col: scaleGridColRowStartAndEnd() }],\n            /**\n             * Grid Column Start\n             * @see https://tailwindcss.com/docs/grid-column\n             */\n            'col-start': [{ 'col-start': scaleGridColRowStartOrEnd() }],\n            /**\n             * Grid Column End\n             * @see https://tailwindcss.com/docs/grid-column\n             */\n            'col-end': [{ 'col-end': scaleGridColRowStartOrEnd() }],\n            /**\n             * Grid Template Rows\n             * @see https://tailwindcss.com/docs/grid-template-rows\n             */\n            'grid-rows': [{ 'grid-rows': scaleGridTemplateColsRows() }],\n            /**\n             * Grid Row Start / End\n             * @see https://tailwindcss.com/docs/grid-row\n             */\n            'row-start-end': [{ row: scaleGridColRowStartAndEnd() }],\n            /**\n             * Grid Row Start\n             * @see https://tailwindcss.com/docs/grid-row\n             */\n            'row-start': [{ 'row-start': scaleGridColRowStartOrEnd() }],\n            /**\n             * Grid Row End\n             * @see https://tailwindcss.com/docs/grid-row\n             */\n            'row-end': [{ 'row-end': scaleGridColRowStartOrEnd() }],\n            /**\n             * Grid Auto Flow\n             * @see https://tailwindcss.com/docs/grid-auto-flow\n             */\n            'grid-flow': [{ 'grid-flow': ['row', 'col', 'dense', 'row-dense', 'col-dense'] }],\n            /**\n             * Grid Auto Columns\n             * @see https://tailwindcss.com/docs/grid-auto-columns\n             */\n            'auto-cols': [{ 'auto-cols': scaleGridAutoColsRows() }],\n            /**\n             * Grid Auto Rows\n             * @see https://tailwindcss.com/docs/grid-auto-rows\n             */\n            'auto-rows': [{ 'auto-rows': scaleGridAutoColsRows() }],\n            /**\n             * Gap\n             * @see https://tailwindcss.com/docs/gap\n             */\n            gap: [{ gap: scaleUnambiguousSpacing() }],\n            /**\n             * Gap X\n             * @see https://tailwindcss.com/docs/gap\n             */\n            'gap-x': [{ 'gap-x': scaleUnambiguousSpacing() }],\n            /**\n             * Gap Y\n             * @see https://tailwindcss.com/docs/gap\n             */\n            'gap-y': [{ 'gap-y': scaleUnambiguousSpacing() }],\n            /**\n             * Justify Content\n             * @see https://tailwindcss.com/docs/justify-content\n             */\n            'justify-content': [{ justify: [...scaleAlignPrimaryAxis(), 'normal'] }],\n            /**\n             * Justify Items\n             * @see https://tailwindcss.com/docs/justify-items\n             */\n            'justify-items': [{ 'justify-items': [...scaleAlignSecondaryAxis(), 'normal'] }],\n            /**\n             * Justify Self\n             * @see https://tailwindcss.com/docs/justify-self\n             */\n            'justify-self': [{ 'justify-self': ['auto', ...scaleAlignSecondaryAxis()] }],\n            /**\n             * Align Content\n             * @see https://tailwindcss.com/docs/align-content\n             */\n            'align-content': [{ content: ['normal', ...scaleAlignPrimaryAxis()] }],\n            /**\n             * Align Items\n             * @see https://tailwindcss.com/docs/align-items\n             */\n            'align-items': [{ items: [...scaleAlignSecondaryAxis(), 'baseline'] }],\n            /**\n             * Align Self\n             * @see https://tailwindcss.com/docs/align-self\n             */\n            'align-self': [{ self: ['auto', ...scaleAlignSecondaryAxis(), 'baseline'] }],\n            /**\n             * Place Content\n             * @see https://tailwindcss.com/docs/place-content\n             */\n            'place-content': [{ 'place-content': scaleAlignPrimaryAxis() }],\n            /**\n             * Place Items\n             * @see https://tailwindcss.com/docs/place-items\n             */\n            'place-items': [{ 'place-items': [...scaleAlignSecondaryAxis(), 'baseline'] }],\n            /**\n             * Place Self\n             * @see https://tailwindcss.com/docs/place-self\n             */\n            'place-self': [{ 'place-self': ['auto', ...scaleAlignSecondaryAxis()] }],\n            // Spacing\n            /**\n             * Padding\n             * @see https://tailwindcss.com/docs/padding\n             */\n            p: [{ p: scaleUnambiguousSpacing() }],\n            /**\n             * Padding X\n             * @see https://tailwindcss.com/docs/padding\n             */\n            px: [{ px: scaleUnambiguousSpacing() }],\n            /**\n             * Padding Y\n             * @see https://tailwindcss.com/docs/padding\n             */\n            py: [{ py: scaleUnambiguousSpacing() }],\n            /**\n             * Padding Start\n             * @see https://tailwindcss.com/docs/padding\n             */\n            ps: [{ ps: scaleUnambiguousSpacing() }],\n            /**\n             * Padding End\n             * @see https://tailwindcss.com/docs/padding\n             */\n            pe: [{ pe: scaleUnambiguousSpacing() }],\n            /**\n             * Padding Top\n             * @see https://tailwindcss.com/docs/padding\n             */\n            pt: [{ pt: scaleUnambiguousSpacing() }],\n            /**\n             * Padding Right\n             * @see https://tailwindcss.com/docs/padding\n             */\n            pr: [{ pr: scaleUnambiguousSpacing() }],\n            /**\n             * Padding Bottom\n             * @see https://tailwindcss.com/docs/padding\n             */\n            pb: [{ pb: scaleUnambiguousSpacing() }],\n            /**\n             * Padding Left\n             * @see https://tailwindcss.com/docs/padding\n             */\n            pl: [{ pl: scaleUnambiguousSpacing() }],\n            /**\n             * Margin\n             * @see https://tailwindcss.com/docs/margin\n             */\n            m: [{ m: scaleMargin() }],\n            /**\n             * Margin X\n             * @see https://tailwindcss.com/docs/margin\n             */\n            mx: [{ mx: scaleMargin() }],\n            /**\n             * Margin Y\n             * @see https://tailwindcss.com/docs/margin\n             */\n            my: [{ my: scaleMargin() }],\n            /**\n             * Margin Start\n             * @see https://tailwindcss.com/docs/margin\n             */\n            ms: [{ ms: scaleMargin() }],\n            /**\n             * Margin End\n             * @see https://tailwindcss.com/docs/margin\n             */\n            me: [{ me: scaleMargin() }],\n            /**\n             * Margin Top\n             * @see https://tailwindcss.com/docs/margin\n             */\n            mt: [{ mt: scaleMargin() }],\n            /**\n             * Margin Right\n             * @see https://tailwindcss.com/docs/margin\n             */\n            mr: [{ mr: scaleMargin() }],\n            /**\n             * Margin Bottom\n             * @see https://tailwindcss.com/docs/margin\n             */\n            mb: [{ mb: scaleMargin() }],\n            /**\n             * Margin Left\n             * @see https://tailwindcss.com/docs/margin\n             */\n            ml: [{ ml: scaleMargin() }],\n            /**\n             * Space Between X\n             * @see https://tailwindcss.com/docs/margin#adding-space-between-children\n             */\n            'space-x': [{ 'space-x': scaleUnambiguousSpacing() }],\n            /**\n             * Space Between X Reverse\n             * @see https://tailwindcss.com/docs/margin#adding-space-between-children\n             */\n            'space-x-reverse': ['space-x-reverse'],\n            /**\n             * Space Between Y\n             * @see https://tailwindcss.com/docs/margin#adding-space-between-children\n             */\n            'space-y': [{ 'space-y': scaleUnambiguousSpacing() }],\n            /**\n             * Space Between Y Reverse\n             * @see https://tailwindcss.com/docs/margin#adding-space-between-children\n             */\n            'space-y-reverse': ['space-y-reverse'],\n\n            // --------------\n            // --- Sizing ---\n            // --------------\n\n            /**\n             * Size\n             * @see https://tailwindcss.com/docs/width#setting-both-width-and-height\n             */\n            size: [{ size: scaleSizing() }],\n            /**\n             * Width\n             * @see https://tailwindcss.com/docs/width\n             */\n            w: [{ w: [themeContainer, 'screen', ...scaleSizing()] }],\n            /**\n             * Min-Width\n             * @see https://tailwindcss.com/docs/min-width\n             */\n            'min-w': [\n                {\n                    'min-w': [\n                        themeContainer,\n                        'screen',\n                        /** Deprecated. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\n                        'none',\n                        ...scaleSizing(),\n                    ],\n                },\n            ],\n            /**\n             * Max-Width\n             * @see https://tailwindcss.com/docs/max-width\n             */\n            'max-w': [\n                {\n                    'max-w': [\n                        themeContainer,\n                        'screen',\n                        'none',\n                        /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\n                        'prose',\n                        /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\n                        { screen: [themeBreakpoint] },\n                        ...scaleSizing(),\n                    ],\n                },\n            ],\n            /**\n             * Height\n             * @see https://tailwindcss.com/docs/height\n             */\n            h: [{ h: ['screen', ...scaleSizing()] }],\n            /**\n             * Min-Height\n             * @see https://tailwindcss.com/docs/min-height\n             */\n            'min-h': [{ 'min-h': ['screen', 'none', ...scaleSizing()] }],\n            /**\n             * Max-Height\n             * @see https://tailwindcss.com/docs/max-height\n             */\n            'max-h': [{ 'max-h': ['screen', ...scaleSizing()] }],\n\n            // ------------------\n            // --- Typography ---\n            // ------------------\n\n            /**\n             * Font Size\n             * @see https://tailwindcss.com/docs/font-size\n             */\n            'font-size': [\n                { text: ['base', themeText, isArbitraryVariableLength, isArbitraryLength] },\n            ],\n            /**\n             * Font Smoothing\n             * @see https://tailwindcss.com/docs/font-smoothing\n             */\n            'font-smoothing': ['antialiased', 'subpixel-antialiased'],\n            /**\n             * Font Style\n             * @see https://tailwindcss.com/docs/font-style\n             */\n            'font-style': ['italic', 'not-italic'],\n            /**\n             * Font Weight\n             * @see https://tailwindcss.com/docs/font-weight\n             */\n            'font-weight': [{ font: [themeFontWeight, isArbitraryVariable, isArbitraryNumber] }],\n            /**\n             * Font Stretch\n             * @see https://tailwindcss.com/docs/font-stretch\n             */\n            'font-stretch': [\n                {\n                    'font-stretch': [\n                        'ultra-condensed',\n                        'extra-condensed',\n                        'condensed',\n                        'semi-condensed',\n                        'normal',\n                        'semi-expanded',\n                        'expanded',\n                        'extra-expanded',\n                        'ultra-expanded',\n                        isPercent,\n                        isArbitraryValue,\n                    ],\n                },\n            ],\n            /**\n             * Font Family\n             * @see https://tailwindcss.com/docs/font-family\n             */\n            'font-family': [{ font: [isArbitraryVariableFamilyName, isArbitraryValue, themeFont] }],\n            /**\n             * Font Variant Numeric\n             * @see https://tailwindcss.com/docs/font-variant-numeric\n             */\n            'fvn-normal': ['normal-nums'],\n            /**\n             * Font Variant Numeric\n             * @see https://tailwindcss.com/docs/font-variant-numeric\n             */\n            'fvn-ordinal': ['ordinal'],\n            /**\n             * Font Variant Numeric\n             * @see https://tailwindcss.com/docs/font-variant-numeric\n             */\n            'fvn-slashed-zero': ['slashed-zero'],\n            /**\n             * Font Variant Numeric\n             * @see https://tailwindcss.com/docs/font-variant-numeric\n             */\n            'fvn-figure': ['lining-nums', 'oldstyle-nums'],\n            /**\n             * Font Variant Numeric\n             * @see https://tailwindcss.com/docs/font-variant-numeric\n             */\n            'fvn-spacing': ['proportional-nums', 'tabular-nums'],\n            /**\n             * Font Variant Numeric\n             * @see https://tailwindcss.com/docs/font-variant-numeric\n             */\n            'fvn-fraction': ['diagonal-fractions', 'stacked-fractions'],\n            /**\n             * Letter Spacing\n             * @see https://tailwindcss.com/docs/letter-spacing\n             */\n            tracking: [{ tracking: [themeTracking, isArbitraryVariable, isArbitraryValue] }],\n            /**\n             * Line Clamp\n             * @see https://tailwindcss.com/docs/line-clamp\n             */\n            'line-clamp': [\n                { 'line-clamp': [isNumber, 'none', isArbitraryVariable, isArbitraryNumber] },\n            ],\n            /**\n             * Line Height\n             * @see https://tailwindcss.com/docs/line-height\n             */\n            leading: [\n                {\n                    leading: [\n                        /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\n                        themeLeading,\n                        ...scaleUnambiguousSpacing(),\n                    ],\n                },\n            ],\n            /**\n             * List Style Image\n             * @see https://tailwindcss.com/docs/list-style-image\n             */\n            'list-image': [{ 'list-image': ['none', isArbitraryVariable, isArbitraryValue] }],\n            /**\n             * List Style Position\n             * @see https://tailwindcss.com/docs/list-style-position\n             */\n            'list-style-position': [{ list: ['inside', 'outside'] }],\n            /**\n             * List Style Type\n             * @see https://tailwindcss.com/docs/list-style-type\n             */\n            'list-style-type': [\n                { list: ['disc', 'decimal', 'none', isArbitraryVariable, isArbitraryValue] },\n            ],\n            /**\n             * Text Alignment\n             * @see https://tailwindcss.com/docs/text-align\n             */\n            'text-alignment': [{ text: ['left', 'center', 'right', 'justify', 'start', 'end'] }],\n            /**\n             * Placeholder Color\n             * @deprecated since Tailwind CSS v3.0.0\n             * @see https://v3.tailwindcss.com/docs/placeholder-color\n             */\n            'placeholder-color': [{ placeholder: scaleColor() }],\n            /**\n             * Text Color\n             * @see https://tailwindcss.com/docs/text-color\n             */\n            'text-color': [{ text: scaleColor() }],\n            /**\n             * Text Decoration\n             * @see https://tailwindcss.com/docs/text-decoration\n             */\n            'text-decoration': ['underline', 'overline', 'line-through', 'no-underline'],\n            /**\n             * Text Decoration Style\n             * @see https://tailwindcss.com/docs/text-decoration-style\n             */\n            'text-decoration-style': [{ decoration: [...scaleLineStyle(), 'wavy'] }],\n            /**\n             * Text Decoration Thickness\n             * @see https://tailwindcss.com/docs/text-decoration-thickness\n             */\n            'text-decoration-thickness': [\n                {\n                    decoration: [\n                        isNumber,\n                        'from-font',\n                        'auto',\n                        isArbitraryVariable,\n                        isArbitraryLength,\n                    ],\n                },\n            ],\n            /**\n             * Text Decoration Color\n             * @see https://tailwindcss.com/docs/text-decoration-color\n             */\n            'text-decoration-color': [{ decoration: scaleColor() }],\n            /**\n             * Text Underline Offset\n             * @see https://tailwindcss.com/docs/text-underline-offset\n             */\n            'underline-offset': [\n                { 'underline-offset': [isNumber, 'auto', isArbitraryVariable, isArbitraryValue] },\n            ],\n            /**\n             * Text Transform\n             * @see https://tailwindcss.com/docs/text-transform\n             */\n            'text-transform': ['uppercase', 'lowercase', 'capitalize', 'normal-case'],\n            /**\n             * Text Overflow\n             * @see https://tailwindcss.com/docs/text-overflow\n             */\n            'text-overflow': ['truncate', 'text-ellipsis', 'text-clip'],\n            /**\n             * Text Wrap\n             * @see https://tailwindcss.com/docs/text-wrap\n             */\n            'text-wrap': [{ text: ['wrap', 'nowrap', 'balance', 'pretty'] }],\n            /**\n             * Text Indent\n             * @see https://tailwindcss.com/docs/text-indent\n             */\n            indent: [{ indent: scaleUnambiguousSpacing() }],\n            /**\n             * Vertical Alignment\n             * @see https://tailwindcss.com/docs/vertical-align\n             */\n            'vertical-align': [\n                {\n                    align: [\n                        'baseline',\n                        'top',\n                        'middle',\n                        'bottom',\n                        'text-top',\n                        'text-bottom',\n                        'sub',\n                        'super',\n                        isArbitraryVariable,\n                        isArbitraryValue,\n                    ],\n                },\n            ],\n            /**\n             * Whitespace\n             * @see https://tailwindcss.com/docs/whitespace\n             */\n            whitespace: [\n                { whitespace: ['normal', 'nowrap', 'pre', 'pre-line', 'pre-wrap', 'break-spaces'] },\n            ],\n            /**\n             * Word Break\n             * @see https://tailwindcss.com/docs/word-break\n             */\n            break: [{ break: ['normal', 'words', 'all', 'keep'] }],\n            /**\n             * Hyphens\n             * @see https://tailwindcss.com/docs/hyphens\n             */\n            hyphens: [{ hyphens: ['none', 'manual', 'auto'] }],\n            /**\n             * Content\n             * @see https://tailwindcss.com/docs/content\n             */\n            content: [{ content: ['none', isArbitraryVariable, isArbitraryValue] }],\n\n            // -------------------\n            // --- Backgrounds ---\n            // -------------------\n\n            /**\n             * Background Attachment\n             * @see https://tailwindcss.com/docs/background-attachment\n             */\n            'bg-attachment': [{ bg: ['fixed', 'local', 'scroll'] }],\n            /**\n             * Background Clip\n             * @see https://tailwindcss.com/docs/background-clip\n             */\n            'bg-clip': [{ 'bg-clip': ['border', 'padding', 'content', 'text'] }],\n            /**\n             * Background Origin\n             * @see https://tailwindcss.com/docs/background-origin\n             */\n            'bg-origin': [{ 'bg-origin': ['border', 'padding', 'content'] }],\n            /**\n             * Background Position\n             * @see https://tailwindcss.com/docs/background-position\n             */\n            'bg-position': [\n                { bg: [...scalePosition(), isArbitraryVariablePosition, isArbitraryPosition] },\n            ],\n            /**\n             * Background Repeat\n             * @see https://tailwindcss.com/docs/background-repeat\n             */\n            'bg-repeat': [{ bg: ['no-repeat', { repeat: ['', 'x', 'y', 'space', 'round'] }] }],\n            /**\n             * Background Size\n             * @see https://tailwindcss.com/docs/background-size\n             */\n            'bg-size': [\n                { bg: ['auto', 'cover', 'contain', isArbitraryVariableSize, isArbitrarySize] },\n            ],\n            /**\n             * Background Image\n             * @see https://tailwindcss.com/docs/background-image\n             */\n            'bg-image': [\n                {\n                    bg: [\n                        'none',\n                        {\n                            linear: [\n                                { to: ['t', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl'] },\n                                isInteger,\n                                isArbitraryVariable,\n                                isArbitraryValue,\n                            ],\n                            radial: ['', isArbitraryVariable, isArbitraryValue],\n                            conic: [isInteger, isArbitraryVariable, isArbitraryValue],\n                        },\n                        isArbitraryVariableImage,\n                        isArbitraryImage,\n                    ],\n                },\n            ],\n            /**\n             * Background Color\n             * @see https://tailwindcss.com/docs/background-color\n             */\n            'bg-color': [{ bg: scaleColor() }],\n            /**\n             * Gradient Color Stops From Position\n             * @see https://tailwindcss.com/docs/gradient-color-stops\n             */\n            'gradient-from-pos': [{ from: scaleGradientStopPosition() }],\n            /**\n             * Gradient Color Stops Via Position\n             * @see https://tailwindcss.com/docs/gradient-color-stops\n             */\n            'gradient-via-pos': [{ via: scaleGradientStopPosition() }],\n            /**\n             * Gradient Color Stops To Position\n             * @see https://tailwindcss.com/docs/gradient-color-stops\n             */\n            'gradient-to-pos': [{ to: scaleGradientStopPosition() }],\n            /**\n             * Gradient Color Stops From\n             * @see https://tailwindcss.com/docs/gradient-color-stops\n             */\n            'gradient-from': [{ from: scaleColor() }],\n            /**\n             * Gradient Color Stops Via\n             * @see https://tailwindcss.com/docs/gradient-color-stops\n             */\n            'gradient-via': [{ via: scaleColor() }],\n            /**\n             * Gradient Color Stops To\n             * @see https://tailwindcss.com/docs/gradient-color-stops\n             */\n            'gradient-to': [{ to: scaleColor() }],\n\n            // ---------------\n            // --- Borders ---\n            // ---------------\n\n            /**\n             * Border Radius\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            rounded: [{ rounded: scaleRadius() }],\n            /**\n             * Border Radius Start\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-s': [{ 'rounded-s': scaleRadius() }],\n            /**\n             * Border Radius End\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-e': [{ 'rounded-e': scaleRadius() }],\n            /**\n             * Border Radius Top\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-t': [{ 'rounded-t': scaleRadius() }],\n            /**\n             * Border Radius Right\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-r': [{ 'rounded-r': scaleRadius() }],\n            /**\n             * Border Radius Bottom\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-b': [{ 'rounded-b': scaleRadius() }],\n            /**\n             * Border Radius Left\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-l': [{ 'rounded-l': scaleRadius() }],\n            /**\n             * Border Radius Start Start\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-ss': [{ 'rounded-ss': scaleRadius() }],\n            /**\n             * Border Radius Start End\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-se': [{ 'rounded-se': scaleRadius() }],\n            /**\n             * Border Radius End End\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-ee': [{ 'rounded-ee': scaleRadius() }],\n            /**\n             * Border Radius End Start\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-es': [{ 'rounded-es': scaleRadius() }],\n            /**\n             * Border Radius Top Left\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-tl': [{ 'rounded-tl': scaleRadius() }],\n            /**\n             * Border Radius Top Right\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-tr': [{ 'rounded-tr': scaleRadius() }],\n            /**\n             * Border Radius Bottom Right\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-br': [{ 'rounded-br': scaleRadius() }],\n            /**\n             * Border Radius Bottom Left\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-bl': [{ 'rounded-bl': scaleRadius() }],\n            /**\n             * Border Width\n             * @see https://tailwindcss.com/docs/border-width\n             */\n            'border-w': [{ border: scaleBorderWidth() }],\n            /**\n             * Border Width X\n             * @see https://tailwindcss.com/docs/border-width\n             */\n            'border-w-x': [{ 'border-x': scaleBorderWidth() }],\n            /**\n             * Border Width Y\n             * @see https://tailwindcss.com/docs/border-width\n             */\n            'border-w-y': [{ 'border-y': scaleBorderWidth() }],\n            /**\n             * Border Width Start\n             * @see https://tailwindcss.com/docs/border-width\n             */\n            'border-w-s': [{ 'border-s': scaleBorderWidth() }],\n            /**\n             * Border Width End\n             * @see https://tailwindcss.com/docs/border-width\n             */\n            'border-w-e': [{ 'border-e': scaleBorderWidth() }],\n            /**\n             * Border Width Top\n             * @see https://tailwindcss.com/docs/border-width\n             */\n            'border-w-t': [{ 'border-t': scaleBorderWidth() }],\n            /**\n             * Border Width Right\n             * @see https://tailwindcss.com/docs/border-width\n             */\n            'border-w-r': [{ 'border-r': scaleBorderWidth() }],\n            /**\n             * Border Width Bottom\n             * @see https://tailwindcss.com/docs/border-width\n             */\n            'border-w-b': [{ 'border-b': scaleBorderWidth() }],\n            /**\n             * Border Width Left\n             * @see https://tailwindcss.com/docs/border-width\n             */\n            'border-w-l': [{ 'border-l': scaleBorderWidth() }],\n            /**\n             * Divide Width X\n             * @see https://tailwindcss.com/docs/border-width#between-children\n             */\n            'divide-x': [{ 'divide-x': scaleBorderWidth() }],\n            /**\n             * Divide Width X Reverse\n             * @see https://tailwindcss.com/docs/border-width#between-children\n             */\n            'divide-x-reverse': ['divide-x-reverse'],\n            /**\n             * Divide Width Y\n             * @see https://tailwindcss.com/docs/border-width#between-children\n             */\n            'divide-y': [{ 'divide-y': scaleBorderWidth() }],\n            /**\n             * Divide Width Y Reverse\n             * @see https://tailwindcss.com/docs/border-width#between-children\n             */\n            'divide-y-reverse': ['divide-y-reverse'],\n            /**\n             * Border Style\n             * @see https://tailwindcss.com/docs/border-style\n             */\n            'border-style': [{ border: [...scaleLineStyle(), 'hidden', 'none'] }],\n            /**\n             * Divide Style\n             * @see https://tailwindcss.com/docs/border-style#setting-the-divider-style\n             */\n            'divide-style': [{ divide: [...scaleLineStyle(), 'hidden', 'none'] }],\n            /**\n             * Border Color\n             * @see https://tailwindcss.com/docs/border-color\n             */\n            'border-color': [{ border: scaleColor() }],\n            /**\n             * Border Color X\n             * @see https://tailwindcss.com/docs/border-color\n             */\n            'border-color-x': [{ 'border-x': scaleColor() }],\n            /**\n             * Border Color Y\n             * @see https://tailwindcss.com/docs/border-color\n             */\n            'border-color-y': [{ 'border-y': scaleColor() }],\n            /**\n             * Border Color S\n             * @see https://tailwindcss.com/docs/border-color\n             */\n            'border-color-s': [{ 'border-s': scaleColor() }],\n            /**\n             * Border Color E\n             * @see https://tailwindcss.com/docs/border-color\n             */\n            'border-color-e': [{ 'border-e': scaleColor() }],\n            /**\n             * Border Color Top\n             * @see https://tailwindcss.com/docs/border-color\n             */\n            'border-color-t': [{ 'border-t': scaleColor() }],\n            /**\n             * Border Color Right\n             * @see https://tailwindcss.com/docs/border-color\n             */\n            'border-color-r': [{ 'border-r': scaleColor() }],\n            /**\n             * Border Color Bottom\n             * @see https://tailwindcss.com/docs/border-color\n             */\n            'border-color-b': [{ 'border-b': scaleColor() }],\n            /**\n             * Border Color Left\n             * @see https://tailwindcss.com/docs/border-color\n             */\n            'border-color-l': [{ 'border-l': scaleColor() }],\n            /**\n             * Divide Color\n             * @see https://tailwindcss.com/docs/divide-color\n             */\n            'divide-color': [{ divide: scaleColor() }],\n            /**\n             * Outline Style\n             * @see https://tailwindcss.com/docs/outline-style\n             */\n            'outline-style': [{ outline: [...scaleLineStyle(), 'none', 'hidden'] }],\n            /**\n             * Outline Offset\n             * @see https://tailwindcss.com/docs/outline-offset\n             */\n            'outline-offset': [\n                { 'outline-offset': [isNumber, isArbitraryVariable, isArbitraryValue] },\n            ],\n            /**\n             * Outline Width\n             * @see https://tailwindcss.com/docs/outline-width\n             */\n            'outline-w': [\n                { outline: ['', isNumber, isArbitraryVariableLength, isArbitraryLength] },\n            ],\n            /**\n             * Outline Color\n             * @see https://tailwindcss.com/docs/outline-color\n             */\n            'outline-color': [{ outline: [themeColor] }],\n\n            // ---------------\n            // --- Effects ---\n            // ---------------\n\n            /**\n             * Box Shadow\n             * @see https://tailwindcss.com/docs/box-shadow\n             */\n            shadow: [\n                {\n                    shadow: [\n                        // Deprecated since Tailwind CSS v4.0.0\n                        '',\n                        'none',\n                        themeShadow,\n                        isArbitraryVariableShadow,\n                        isArbitraryShadow,\n                    ],\n                },\n            ],\n            /**\n             * Box Shadow Color\n             * @see https://tailwindcss.com/docs/box-shadow#setting-the-shadow-color\n             */\n            'shadow-color': [{ shadow: scaleColor() }],\n            /**\n             * Inset Box Shadow\n             * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-shadow\n             */\n            'inset-shadow': [\n                {\n                    'inset-shadow': [\n                        'none',\n                        isArbitraryVariable,\n                        isArbitraryValue,\n                        themeInsetShadow,\n                    ],\n                },\n            ],\n            /**\n             * Inset Box Shadow Color\n             * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-shadow-color\n             */\n            'inset-shadow-color': [{ 'inset-shadow': scaleColor() }],\n            /**\n             * Ring Width\n             * @see https://tailwindcss.com/docs/box-shadow#adding-a-ring\n             */\n            'ring-w': [{ ring: scaleBorderWidth() }],\n            /**\n             * Ring Width Inset\n             * @see https://v3.tailwindcss.com/docs/ring-width#inset-rings\n             * @deprecated since Tailwind CSS v4.0.0\n             * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158\n             */\n            'ring-w-inset': ['ring-inset'],\n            /**\n             * Ring Color\n             * @see https://tailwindcss.com/docs/box-shadow#setting-the-ring-color\n             */\n            'ring-color': [{ ring: scaleColor() }],\n            /**\n             * Ring Offset Width\n             * @see https://v3.tailwindcss.com/docs/ring-offset-width\n             * @deprecated since Tailwind CSS v4.0.0\n             * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158\n             */\n            'ring-offset-w': [{ 'ring-offset': [isNumber, isArbitraryLength] }],\n            /**\n             * Ring Offset Color\n             * @see https://v3.tailwindcss.com/docs/ring-offset-color\n             * @deprecated since Tailwind CSS v4.0.0\n             * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158\n             */\n            'ring-offset-color': [{ 'ring-offset': scaleColor() }],\n            /**\n             * Inset Ring Width\n             * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-ring\n             */\n            'inset-ring-w': [{ 'inset-ring': scaleBorderWidth() }],\n            /**\n             * Inset Ring Color\n             * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-ring-color\n             */\n            'inset-ring-color': [{ 'inset-ring': scaleColor() }],\n            /**\n             * Opacity\n             * @see https://tailwindcss.com/docs/opacity\n             */\n            opacity: [{ opacity: [isNumber, isArbitraryVariable, isArbitraryValue] }],\n            /**\n             * Mix Blend Mode\n             * @see https://tailwindcss.com/docs/mix-blend-mode\n             */\n            'mix-blend': [{ 'mix-blend': [...scaleBlendMode(), 'plus-darker', 'plus-lighter'] }],\n            /**\n             * Background Blend Mode\n             * @see https://tailwindcss.com/docs/background-blend-mode\n             */\n            'bg-blend': [{ 'bg-blend': scaleBlendMode() }],\n\n            // ---------------\n            // --- Filters ---\n            // ---------------\n\n            /**\n             * Filter\n             * @see https://tailwindcss.com/docs/filter\n             */\n            filter: [\n                {\n                    filter: [\n                        // Deprecated since Tailwind CSS v3.0.0\n                        '',\n                        'none',\n                        isArbitraryVariable,\n                        isArbitraryValue,\n                    ],\n                },\n            ],\n            /**\n             * Blur\n             * @see https://tailwindcss.com/docs/blur\n             */\n            blur: [{ blur: scaleBlur() }],\n            /**\n             * Brightness\n             * @see https://tailwindcss.com/docs/brightness\n             */\n            brightness: [{ brightness: [isNumber, isArbitraryVariable, isArbitraryValue] }],\n            /**\n             * Contrast\n             * @see https://tailwindcss.com/docs/contrast\n             */\n            contrast: [{ contrast: [isNumber, isArbitraryVariable, isArbitraryValue] }],\n            /**\n             * Drop Shadow\n             * @see https://tailwindcss.com/docs/drop-shadow\n             */\n            'drop-shadow': [\n                {\n                    'drop-shadow': [\n                        // Deprecated since Tailwind CSS v4.0.0\n                        '',\n                        'none',\n                        themeDropShadow,\n                        isArbitraryVariable,\n                        isArbitraryValue,\n                    ],\n                },\n            ],\n            /**\n             * Grayscale\n             * @see https://tailwindcss.com/docs/grayscale\n             */\n            grayscale: [{ grayscale: ['', isNumber, isArbitraryVariable, isArbitraryValue] }],\n            /**\n             * Hue Rotate\n             * @see https://tailwindcss.com/docs/hue-rotate\n             */\n            'hue-rotate': [{ 'hue-rotate': [isNumber, isArbitraryVariable, isArbitraryValue] }],\n            /**\n             * Invert\n             * @see https://tailwindcss.com/docs/invert\n             */\n            invert: [{ invert: ['', isNumber, isArbitraryVariable, isArbitraryValue] }],\n            /**\n             * Saturate\n             * @see https://tailwindcss.com/docs/saturate\n             */\n            saturate: [{ saturate: [isNumber, isArbitraryVariable, isArbitraryValue] }],\n            /**\n             * Sepia\n             * @see https://tailwindcss.com/docs/sepia\n             */\n            sepia: [{ sepia: ['', isNumber, isArbitraryVariable, isArbitraryValue] }],\n            /**\n             * Backdrop Filter\n             * @see https://tailwindcss.com/docs/backdrop-filter\n             */\n            'backdrop-filter': [\n                {\n                    'backdrop-filter': [\n                        // Deprecated since Tailwind CSS v3.0.0\n                        '',\n                        'none',\n                        isArbitraryVariable,\n                        isArbitraryValue,\n                    ],\n                },\n            ],\n            /**\n             * Backdrop Blur\n             * @see https://tailwindcss.com/docs/backdrop-blur\n             */\n            'backdrop-blur': [{ 'backdrop-blur': scaleBlur() }],\n            /**\n             * Backdrop Brightness\n             * @see https://tailwindcss.com/docs/backdrop-brightness\n             */\n            'backdrop-brightness': [\n                { 'backdrop-brightness': [isNumber, isArbitraryVariable, isArbitraryValue] },\n            ],\n            /**\n             * Backdrop Contrast\n             * @see https://tailwindcss.com/docs/backdrop-contrast\n             */\n            'backdrop-contrast': [\n                { 'backdrop-contrast': [isNumber, isArbitraryVariable, isArbitraryValue] },\n            ],\n            /**\n             * Backdrop Grayscale\n             * @see https://tailwindcss.com/docs/backdrop-grayscale\n             */\n            'backdrop-grayscale': [\n                { 'backdrop-grayscale': ['', isNumber, isArbitraryVariable, isArbitraryValue] },\n            ],\n            /**\n             * Backdrop Hue Rotate\n             * @see https://tailwindcss.com/docs/backdrop-hue-rotate\n             */\n            'backdrop-hue-rotate': [\n                { 'backdrop-hue-rotate': [isNumber, isArbitraryVariable, isArbitraryValue] },\n            ],\n            /**\n             * Backdrop Invert\n             * @see https://tailwindcss.com/docs/backdrop-invert\n             */\n            'backdrop-invert': [\n                { 'backdrop-invert': ['', isNumber, isArbitraryVariable, isArbitraryValue] },\n            ],\n            /**\n             * Backdrop Opacity\n             * @see https://tailwindcss.com/docs/backdrop-opacity\n             */\n            'backdrop-opacity': [\n                { 'backdrop-opacity': [isNumber, isArbitraryVariable, isArbitraryValue] },\n            ],\n            /**\n             * Backdrop Saturate\n             * @see https://tailwindcss.com/docs/backdrop-saturate\n             */\n            'backdrop-saturate': [\n                { 'backdrop-saturate': [isNumber, isArbitraryVariable, isArbitraryValue] },\n            ],\n            /**\n             * Backdrop Sepia\n             * @see https://tailwindcss.com/docs/backdrop-sepia\n             */\n            'backdrop-sepia': [\n                { 'backdrop-sepia': ['', isNumber, isArbitraryVariable, isArbitraryValue] },\n            ],\n\n            // --------------\n            // --- Tables ---\n            // --------------\n\n            /**\n             * Border Collapse\n             * @see https://tailwindcss.com/docs/border-collapse\n             */\n            'border-collapse': [{ border: ['collapse', 'separate'] }],\n            /**\n             * Border Spacing\n             * @see https://tailwindcss.com/docs/border-spacing\n             */\n            'border-spacing': [{ 'border-spacing': scaleUnambiguousSpacing() }],\n            /**\n             * Border Spacing X\n             * @see https://tailwindcss.com/docs/border-spacing\n             */\n            'border-spacing-x': [{ 'border-spacing-x': scaleUnambiguousSpacing() }],\n            /**\n             * Border Spacing Y\n             * @see https://tailwindcss.com/docs/border-spacing\n             */\n            'border-spacing-y': [{ 'border-spacing-y': scaleUnambiguousSpacing() }],\n            /**\n             * Table Layout\n             * @see https://tailwindcss.com/docs/table-layout\n             */\n            'table-layout': [{ table: ['auto', 'fixed'] }],\n            /**\n             * Caption Side\n             * @see https://tailwindcss.com/docs/caption-side\n             */\n            caption: [{ caption: ['top', 'bottom'] }],\n\n            // ---------------------------------\n            // --- Transitions and Animation ---\n            // ---------------------------------\n\n            /**\n             * Transition Property\n             * @see https://tailwindcss.com/docs/transition-property\n             */\n            transition: [\n                {\n                    transition: [\n                        '',\n                        'all',\n                        'colors',\n                        'opacity',\n                        'shadow',\n                        'transform',\n                        'none',\n                        isArbitraryVariable,\n                        isArbitraryValue,\n                    ],\n                },\n            ],\n            /**\n             * Transition Behavior\n             * @see https://tailwindcss.com/docs/transition-behavior\n             */\n            'transition-behavior': [{ transition: ['normal', 'discrete'] }],\n            /**\n             * Transition Duration\n             * @see https://tailwindcss.com/docs/transition-duration\n             */\n            duration: [{ duration: [isNumber, 'initial', isArbitraryVariable, isArbitraryValue] }],\n            /**\n             * Transition Timing Function\n             * @see https://tailwindcss.com/docs/transition-timing-function\n             */\n            ease: [\n                { ease: ['linear', 'initial', themeEase, isArbitraryVariable, isArbitraryValue] },\n            ],\n            /**\n             * Transition Delay\n             * @see https://tailwindcss.com/docs/transition-delay\n             */\n            delay: [{ delay: [isNumber, isArbitraryVariable, isArbitraryValue] }],\n            /**\n             * Animation\n             * @see https://tailwindcss.com/docs/animation\n             */\n            animate: [{ animate: ['none', themeAnimate, isArbitraryVariable, isArbitraryValue] }],\n\n            // ------------------\n            // --- Transforms ---\n            // ------------------\n\n            /**\n             * Backface Visibility\n             * @see https://tailwindcss.com/docs/backface-visibility\n             */\n            backface: [{ backface: ['hidden', 'visible'] }],\n            /**\n             * Perspective\n             * @see https://tailwindcss.com/docs/perspective\n             */\n            perspective: [\n                { perspective: [themePerspective, isArbitraryVariable, isArbitraryValue] },\n            ],\n            /**\n             * Perspective Origin\n             * @see https://tailwindcss.com/docs/perspective-origin\n             */\n            'perspective-origin': [{ 'perspective-origin': scaleOrigin() }],\n            /**\n             * Rotate\n             * @see https://tailwindcss.com/docs/rotate\n             */\n            rotate: [{ rotate: scaleRotate() }],\n            /**\n             * Rotate X\n             * @see https://tailwindcss.com/docs/rotate\n             */\n            'rotate-x': [{ 'rotate-x': scaleRotate() }],\n            /**\n             * Rotate Y\n             * @see https://tailwindcss.com/docs/rotate\n             */\n            'rotate-y': [{ 'rotate-y': scaleRotate() }],\n            /**\n             * Rotate Z\n             * @see https://tailwindcss.com/docs/rotate\n             */\n            'rotate-z': [{ 'rotate-z': scaleRotate() }],\n            /**\n             * Scale\n             * @see https://tailwindcss.com/docs/scale\n             */\n            scale: [{ scale: scaleScale() }],\n            /**\n             * Scale X\n             * @see https://tailwindcss.com/docs/scale\n             */\n            'scale-x': [{ 'scale-x': scaleScale() }],\n            /**\n             * Scale Y\n             * @see https://tailwindcss.com/docs/scale\n             */\n            'scale-y': [{ 'scale-y': scaleScale() }],\n            /**\n             * Scale Z\n             * @see https://tailwindcss.com/docs/scale\n             */\n            'scale-z': [{ 'scale-z': scaleScale() }],\n            /**\n             * Scale 3D\n             * @see https://tailwindcss.com/docs/scale\n             */\n            'scale-3d': ['scale-3d'],\n            /**\n             * Skew\n             * @see https://tailwindcss.com/docs/skew\n             */\n            skew: [{ skew: scaleSkew() }],\n            /**\n             * Skew X\n             * @see https://tailwindcss.com/docs/skew\n             */\n            'skew-x': [{ 'skew-x': scaleSkew() }],\n            /**\n             * Skew Y\n             * @see https://tailwindcss.com/docs/skew\n             */\n            'skew-y': [{ 'skew-y': scaleSkew() }],\n            /**\n             * Transform\n             * @see https://tailwindcss.com/docs/transform\n             */\n            transform: [\n                { transform: [isArbitraryVariable, isArbitraryValue, '', 'none', 'gpu', 'cpu'] },\n            ],\n            /**\n             * Transform Origin\n             * @see https://tailwindcss.com/docs/transform-origin\n             */\n            'transform-origin': [{ origin: scaleOrigin() }],\n            /**\n             * Transform Style\n             * @see https://tailwindcss.com/docs/transform-style\n             */\n            'transform-style': [{ transform: ['3d', 'flat'] }],\n            /**\n             * Translate\n             * @see https://tailwindcss.com/docs/translate\n             */\n            translate: [{ translate: scaleTranslate() }],\n            /**\n             * Translate X\n             * @see https://tailwindcss.com/docs/translate\n             */\n            'translate-x': [{ 'translate-x': scaleTranslate() }],\n            /**\n             * Translate Y\n             * @see https://tailwindcss.com/docs/translate\n             */\n            'translate-y': [{ 'translate-y': scaleTranslate() }],\n            /**\n             * Translate Z\n             * @see https://tailwindcss.com/docs/translate\n             */\n            'translate-z': [{ 'translate-z': scaleTranslate() }],\n            /**\n             * Translate None\n             * @see https://tailwindcss.com/docs/translate\n             */\n            'translate-none': ['translate-none'],\n\n            // ---------------------\n            // --- Interactivity ---\n            // ---------------------\n\n            /**\n             * Accent Color\n             * @see https://tailwindcss.com/docs/accent-color\n             */\n            accent: [{ accent: scaleColor() }],\n            /**\n             * Appearance\n             * @see https://tailwindcss.com/docs/appearance\n             */\n            appearance: [{ appearance: ['none', 'auto'] }],\n            /**\n             * Caret Color\n             * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities\n             */\n            'caret-color': [{ caret: scaleColor() }],\n            /**\n             * Color Scheme\n             * @see https://tailwindcss.com/docs/color-scheme\n             */\n            'color-scheme': [\n                { scheme: ['normal', 'dark', 'light', 'light-dark', 'only-dark', 'only-light'] },\n            ],\n            /**\n             * Cursor\n             * @see https://tailwindcss.com/docs/cursor\n             */\n            cursor: [\n                {\n                    cursor: [\n                        'auto',\n                        'default',\n                        'pointer',\n                        'wait',\n                        'text',\n                        'move',\n                        'help',\n                        'not-allowed',\n                        'none',\n                        'context-menu',\n                        'progress',\n                        'cell',\n                        'crosshair',\n                        'vertical-text',\n                        'alias',\n                        'copy',\n                        'no-drop',\n                        'grab',\n                        'grabbing',\n                        'all-scroll',\n                        'col-resize',\n                        'row-resize',\n                        'n-resize',\n                        'e-resize',\n                        's-resize',\n                        'w-resize',\n                        'ne-resize',\n                        'nw-resize',\n                        'se-resize',\n                        'sw-resize',\n                        'ew-resize',\n                        'ns-resize',\n                        'nesw-resize',\n                        'nwse-resize',\n                        'zoom-in',\n                        'zoom-out',\n                        isArbitraryVariable,\n                        isArbitraryValue,\n                    ],\n                },\n            ],\n            /**\n             * Field Sizing\n             * @see https://tailwindcss.com/docs/field-sizing\n             */\n            'field-sizing': [{ 'field-sizing': ['fixed', 'content'] }],\n            /**\n             * Pointer Events\n             * @see https://tailwindcss.com/docs/pointer-events\n             */\n            'pointer-events': [{ 'pointer-events': ['auto', 'none'] }],\n            /**\n             * Resize\n             * @see https://tailwindcss.com/docs/resize\n             */\n            resize: [{ resize: ['none', '', 'y', 'x'] }],\n            /**\n             * Scroll Behavior\n             * @see https://tailwindcss.com/docs/scroll-behavior\n             */\n            'scroll-behavior': [{ scroll: ['auto', 'smooth'] }],\n            /**\n             * Scroll Margin\n             * @see https://tailwindcss.com/docs/scroll-margin\n             */\n            'scroll-m': [{ 'scroll-m': scaleUnambiguousSpacing() }],\n            /**\n             * Scroll Margin X\n             * @see https://tailwindcss.com/docs/scroll-margin\n             */\n            'scroll-mx': [{ 'scroll-mx': scaleUnambiguousSpacing() }],\n            /**\n             * Scroll Margin Y\n             * @see https://tailwindcss.com/docs/scroll-margin\n             */\n            'scroll-my': [{ 'scroll-my': scaleUnambiguousSpacing() }],\n            /**\n             * Scroll Margin Start\n             * @see https://tailwindcss.com/docs/scroll-margin\n             */\n            'scroll-ms': [{ 'scroll-ms': scaleUnambiguousSpacing() }],\n            /**\n             * Scroll Margin End\n             * @see https://tailwindcss.com/docs/scroll-margin\n             */\n            'scroll-me': [{ 'scroll-me': scaleUnambiguousSpacing() }],\n            /**\n             * Scroll Margin Top\n             * @see https://tailwindcss.com/docs/scroll-margin\n             */\n            'scroll-mt': [{ 'scroll-mt': scaleUnambiguousSpacing() }],\n            /**\n             * Scroll Margin Right\n             * @see https://tailwindcss.com/docs/scroll-margin\n             */\n            'scroll-mr': [{ 'scroll-mr': scaleUnambiguousSpacing() }],\n            /**\n             * Scroll Margin Bottom\n             * @see https://tailwindcss.com/docs/scroll-margin\n             */\n            'scroll-mb': [{ 'scroll-mb': scaleUnambiguousSpacing() }],\n            /**\n             * Scroll Margin Left\n             * @see https://tailwindcss.com/docs/scroll-margin\n             */\n            'scroll-ml': [{ 'scroll-ml': scaleUnambiguousSpacing() }],\n            /**\n             * Scroll Padding\n             * @see https://tailwindcss.com/docs/scroll-padding\n             */\n            'scroll-p': [{ 'scroll-p': scaleUnambiguousSpacing() }],\n            /**\n             * Scroll Padding X\n             * @see https://tailwindcss.com/docs/scroll-padding\n             */\n            'scroll-px': [{ 'scroll-px': scaleUnambiguousSpacing() }],\n            /**\n             * Scroll Padding Y\n             * @see https://tailwindcss.com/docs/scroll-padding\n             */\n            'scroll-py': [{ 'scroll-py': scaleUnambiguousSpacing() }],\n            /**\n             * Scroll Padding Start\n             * @see https://tailwindcss.com/docs/scroll-padding\n             */\n            'scroll-ps': [{ 'scroll-ps': scaleUnambiguousSpacing() }],\n            /**\n             * Scroll Padding End\n             * @see https://tailwindcss.com/docs/scroll-padding\n             */\n            'scroll-pe': [{ 'scroll-pe': scaleUnambiguousSpacing() }],\n            /**\n             * Scroll Padding Top\n             * @see https://tailwindcss.com/docs/scroll-padding\n             */\n            'scroll-pt': [{ 'scroll-pt': scaleUnambiguousSpacing() }],\n            /**\n             * Scroll Padding Right\n             * @see https://tailwindcss.com/docs/scroll-padding\n             */\n            'scroll-pr': [{ 'scroll-pr': scaleUnambiguousSpacing() }],\n            /**\n             * Scroll Padding Bottom\n             * @see https://tailwindcss.com/docs/scroll-padding\n             */\n            'scroll-pb': [{ 'scroll-pb': scaleUnambiguousSpacing() }],\n            /**\n             * Scroll Padding Left\n             * @see https://tailwindcss.com/docs/scroll-padding\n             */\n            'scroll-pl': [{ 'scroll-pl': scaleUnambiguousSpacing() }],\n            /**\n             * Scroll Snap Align\n             * @see https://tailwindcss.com/docs/scroll-snap-align\n             */\n            'snap-align': [{ snap: ['start', 'end', 'center', 'align-none'] }],\n            /**\n             * Scroll Snap Stop\n             * @see https://tailwindcss.com/docs/scroll-snap-stop\n             */\n            'snap-stop': [{ snap: ['normal', 'always'] }],\n            /**\n             * Scroll Snap Type\n             * @see https://tailwindcss.com/docs/scroll-snap-type\n             */\n            'snap-type': [{ snap: ['none', 'x', 'y', 'both'] }],\n            /**\n             * Scroll Snap Type Strictness\n             * @see https://tailwindcss.com/docs/scroll-snap-type\n             */\n            'snap-strictness': [{ snap: ['mandatory', 'proximity'] }],\n            /**\n             * Touch Action\n             * @see https://tailwindcss.com/docs/touch-action\n             */\n            touch: [{ touch: ['auto', 'none', 'manipulation'] }],\n            /**\n             * Touch Action X\n             * @see https://tailwindcss.com/docs/touch-action\n             */\n            'touch-x': [{ 'touch-pan': ['x', 'left', 'right'] }],\n            /**\n             * Touch Action Y\n             * @see https://tailwindcss.com/docs/touch-action\n             */\n            'touch-y': [{ 'touch-pan': ['y', 'up', 'down'] }],\n            /**\n             * Touch Action Pinch Zoom\n             * @see https://tailwindcss.com/docs/touch-action\n             */\n            'touch-pz': ['touch-pinch-zoom'],\n            /**\n             * User Select\n             * @see https://tailwindcss.com/docs/user-select\n             */\n            select: [{ select: ['none', 'text', 'all', 'auto'] }],\n            /**\n             * Will Change\n             * @see https://tailwindcss.com/docs/will-change\n             */\n            'will-change': [\n                {\n                    'will-change': [\n                        'auto',\n                        'scroll',\n                        'contents',\n                        'transform',\n                        isArbitraryVariable,\n                        isArbitraryValue,\n                    ],\n                },\n            ],\n\n            // -----------\n            // --- SVG ---\n            // -----------\n\n            /**\n             * Fill\n             * @see https://tailwindcss.com/docs/fill\n             */\n            fill: [{ fill: ['none', ...scaleColor()] }],\n            /**\n             * Stroke Width\n             * @see https://tailwindcss.com/docs/stroke-width\n             */\n            'stroke-w': [\n                {\n                    stroke: [\n                        isNumber,\n                        isArbitraryVariableLength,\n                        isArbitraryLength,\n                        isArbitraryNumber,\n                    ],\n                },\n            ],\n            /**\n             * Stroke\n             * @see https://tailwindcss.com/docs/stroke\n             */\n            stroke: [{ stroke: ['none', ...scaleColor()] }],\n\n            // ---------------------\n            // --- Accessibility ---\n            // ---------------------\n\n            /**\n             * Forced Color Adjust\n             * @see https://tailwindcss.com/docs/forced-color-adjust\n             */\n            'forced-color-adjust': [{ 'forced-color-adjust': ['auto', 'none'] }],\n        },\n        conflictingClassGroups: {\n            overflow: ['overflow-x', 'overflow-y'],\n            overscroll: ['overscroll-x', 'overscroll-y'],\n            inset: ['inset-x', 'inset-y', 'start', 'end', 'top', 'right', 'bottom', 'left'],\n            'inset-x': ['right', 'left'],\n            'inset-y': ['top', 'bottom'],\n            flex: ['basis', 'grow', 'shrink'],\n            gap: ['gap-x', 'gap-y'],\n            p: ['px', 'py', 'ps', 'pe', 'pt', 'pr', 'pb', 'pl'],\n            px: ['pr', 'pl'],\n            py: ['pt', 'pb'],\n            m: ['mx', 'my', 'ms', 'me', 'mt', 'mr', 'mb', 'ml'],\n            mx: ['mr', 'ml'],\n            my: ['mt', 'mb'],\n            size: ['w', 'h'],\n            'font-size': ['leading'],\n            'fvn-normal': [\n                'fvn-ordinal',\n                'fvn-slashed-zero',\n                'fvn-figure',\n                'fvn-spacing',\n                'fvn-fraction',\n            ],\n            'fvn-ordinal': ['fvn-normal'],\n            'fvn-slashed-zero': ['fvn-normal'],\n            'fvn-figure': ['fvn-normal'],\n            'fvn-spacing': ['fvn-normal'],\n            'fvn-fraction': ['fvn-normal'],\n            'line-clamp': ['display', 'overflow'],\n            rounded: [\n                'rounded-s',\n                'rounded-e',\n                'rounded-t',\n                'rounded-r',\n                'rounded-b',\n                'rounded-l',\n                'rounded-ss',\n                'rounded-se',\n                'rounded-ee',\n                'rounded-es',\n                'rounded-tl',\n                'rounded-tr',\n                'rounded-br',\n                'rounded-bl',\n            ],\n            'rounded-s': ['rounded-ss', 'rounded-es'],\n            'rounded-e': ['rounded-se', 'rounded-ee'],\n            'rounded-t': ['rounded-tl', 'rounded-tr'],\n            'rounded-r': ['rounded-tr', 'rounded-br'],\n            'rounded-b': ['rounded-br', 'rounded-bl'],\n            'rounded-l': ['rounded-tl', 'rounded-bl'],\n            'border-spacing': ['border-spacing-x', 'border-spacing-y'],\n            'border-w': [\n                'border-w-s',\n                'border-w-e',\n                'border-w-t',\n                'border-w-r',\n                'border-w-b',\n                'border-w-l',\n            ],\n            'border-w-x': ['border-w-r', 'border-w-l'],\n            'border-w-y': ['border-w-t', 'border-w-b'],\n            'border-color': [\n                'border-color-s',\n                'border-color-e',\n                'border-color-t',\n                'border-color-r',\n                'border-color-b',\n                'border-color-l',\n            ],\n            'border-color-x': ['border-color-r', 'border-color-l'],\n            'border-color-y': ['border-color-t', 'border-color-b'],\n            translate: ['translate-x', 'translate-y', 'translate-none'],\n            'translate-none': ['translate', 'translate-x', 'translate-y', 'translate-z'],\n            'scroll-m': [\n                'scroll-mx',\n                'scroll-my',\n                'scroll-ms',\n                'scroll-me',\n                'scroll-mt',\n                'scroll-mr',\n                'scroll-mb',\n                'scroll-ml',\n            ],\n            'scroll-mx': ['scroll-mr', 'scroll-ml'],\n            'scroll-my': ['scroll-mt', 'scroll-mb'],\n            'scroll-p': [\n                'scroll-px',\n                'scroll-py',\n                'scroll-ps',\n                'scroll-pe',\n                'scroll-pt',\n                'scroll-pr',\n                'scroll-pb',\n                'scroll-pl',\n            ],\n            'scroll-px': ['scroll-pr', 'scroll-pl'],\n            'scroll-py': ['scroll-pt', 'scroll-pb'],\n            touch: ['touch-x', 'touch-y', 'touch-pz'],\n            'touch-x': ['touch'],\n            'touch-y': ['touch'],\n            'touch-pz': ['touch'],\n        },\n        conflictingClassGroupModifiers: {\n            'font-size': ['leading'],\n        },\n        orderSensitiveModifiers: [\n            'before',\n            'after',\n            'placeholder',\n            'file',\n            'marker',\n            'selection',\n            'first-line',\n            'first-letter',\n            'backdrop',\n            '*',\n            '**',\n        ],\n    } as const satisfies Config<DefaultClassGroupIds, DefaultThemeGroupIds>\n}\n","import { createTailwindMerge } from './create-tailwind-merge'\nimport { getDefaultConfig } from './default-config'\n\nexport const twMerge = createTailwindMerge(getDefaultConfig)\n","import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Returns the object if it is in the browser, otherwise returns an empty object.\n * This is useful for ensuring that the object is only used in the browser.\n * @param obj - The object to check.\n * @returns The object if it is in the browser, otherwise an empty object.\n */\nexport function useClient<T>(obj: T): T {\n  if (typeof globalThis.window === 'undefined') {\n    return {} as T;\n  }\n  return obj;\n}\n \n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n \n \n \n/**\n * ### Get the src of an image\n * #### Note: This should not be needed but importing `Images` is not consistent between various bundlers.\n * This function is used to get the src of an imported asset. It is used in the `Image` component.\n * @param image - The image to get the src of\n * @returns The src of the image\n * @example\n * getImageSrc('https://example.com/image.jpg') // 'https://example.com/image.jpg'\n * getImageSrc({ src: 'https://example.com/image.jpg' }) // 'https://example.com/image.jpg'\n * getImageSrc({ src: 'https://example.com/image.jpg', alt: 'Example Image' }) // 'https://example.com/image.jpg'\n *\n */\nexport function getImageSrc(image: string | { src: string } | any) {\n  if (typeof image === 'string') {\n    return image;\n  }\n  return image.src;\n}\n","import * as React from 'react';\n\nimport { cn } from '../../lib/utils';\n\nfunction Input({\n  className,\n  wrapperClassName,\n  type,\n  required,\n  error,\n  ...props\n}: React.ComponentProps<'input'> & { error?: boolean, wrapperClassName?: string }) {\n  return (\n    <div className={cn('uii:relative', wrapperClassName)}>\n      <input\n        aria-invalid={error}\n        type={type}\n        data-slot=\"input\"\n        className={cn(\n          'uii:border-input uii:file:text-foreground uii:placeholder:text-muted-foreground uii:selection:bg-primary uii:selection:text-primary-foreground uii:flex uii:h-9 uii:w-full uii:min-w-0 uii:rounded-sm uii:border uii:bg-transparent uii:px-3 uii:py-1 uii:text-base uii:shadow-xs uii:transition-[color,box-shadow] uii:outline-none uii:file:inline-flex uii:file:h-7 uii:file:border-0 uii:file:bg-transparent uii:file:text-sm uii:file:font-medium uii:disabled:pointer-events-none uii:disabled:cursor-not-allowed uii:disabled:opacity-50 uii:md:text-sm',\n          'uii:focus-visible:border-ring uii:focus-visible:ring-ring/50 uii:focus-visible:ring-[3px]',\n          'uii:aria-invalid:ring-destructive/20 uii:dark:aria-invalid:ring-destructive/40 uii:aria-invalid:border-destructive',\n          {\n            'uii:pr-30': error,\n          },\n          className,\n        )}\n        {...props}\n      />\n      {error && (\n        <span className=\"uii:absolute uii:inset-y-0 uii:right-0 uii:flex uii:items-center uii:pr-2 uii:border-l-10 uii:border-l-background uii:my-[6px] uii:pointer-events-none \">\n          <span className=\"uii:bg-destructive uii:text-white uii:px-1.5 uii:py-1.5 uii:rounded-xs uii:uppercase uii:tracking-wide uii:font-medium uii:text-xs uii:leading-none uii:font-sans\">\n            {error && required ? 'required' : 'error'}\n          </span>\n        </span>\n      )}\n    </div>\n  );\n}\n\nexport { Input };\n","import { create } from 'zustand';\nimport { ExpressionModeState } from '../hooks/useExpressionMode';\n\ninterface ExpressionModeStore {\n  // Store state by field name\n  states: Record<string, ExpressionModeState>;\n\n  // Actions\n  setState: (fieldName: string, state: ExpressionModeState) => void;\n  getState: (fieldName: string) => ExpressionModeState;\n  clear: (fieldName: string) => void;\n\n  // Helper actions\n  switchToValue: (fieldName: string) => void;\n  switchToExpression: (fieldName: string) => void;\n  switchToEditor: (fieldName: string) => void;\n  setExpression: (fieldName: string, expression: string) => void;\n  setEditing: (fieldName: string, isEditing: boolean) => void;\n  setCurrentValue: (fieldName: string, value: any) => void;\n  setFullScreen: (fieldName: string, isFullScreen: boolean) => void;\n}\n\nconst defaultState: ExpressionModeState = {\n  expression: '',\n  mode: 'value',\n  isEditing: false,\n  currentValue: undefined,\n  isFullScreen: false\n};\n\nexport const useExpressionModeStore = create<ExpressionModeStore>((set, get) => ({\n  states: {},\n\n  setState: (fieldName: string, state: ExpressionModeState) => {\n    set((store) => ({\n      states: {\n        ...store.states,\n        [fieldName]: state\n      }\n    }));\n  },\n\n  getState: (fieldName: string) => {\n    const store = get();\n    return store.states[fieldName] || defaultState;\n  },\n\n  clear: (fieldName: string) => {\n    set((store) => ({\n      states: {\n        ...store.states,\n        [fieldName]: defaultState\n      }\n    }));\n  },\n\n  switchToValue: (fieldName: string) => {\n    const currentState = get().getState(fieldName);\n    get().setState(fieldName, {\n      ...currentState,\n      mode: 'value',\n      isEditing: false\n    });\n  },\n\n  switchToExpression: (fieldName: string) => {\n    const currentState = get().getState(fieldName);\n    get().setState(fieldName, {\n      ...currentState,\n      mode: 'expression',\n      isEditing: false\n    });\n  },\n\n  switchToEditor: (fieldName: string) => {\n    const currentState = get().getState(fieldName);\n    get().setState(fieldName, {\n      ...currentState,\n      mode: 'expression',\n      isEditing: true\n    });\n  },\n\n  setExpression: (fieldName: string, expression: string) => {\n    const currentState = get().getState(fieldName);\n    get().setState(fieldName, {\n      ...currentState,\n      expression\n    });\n  },\n\n  setEditing: (fieldName: string, isEditing: boolean) => {\n    const currentState = get().getState(fieldName);\n    get().setState(fieldName, {\n      ...currentState,\n      isEditing\n    });\n  },\n  setFullScreen: (fieldName: string, isFullScreen: boolean) => {\n    const currentState = get().getState(fieldName);\n    get().setState(fieldName, {\n      ...currentState,\n      isFullScreen\n    });\n  },\n  setCurrentValue: (fieldName: string, value: any) => {\n    const currentState = get().getState(fieldName);\n    get().setState(fieldName, {\n      ...currentState,\n      currentValue: value\n    });\n  }\n}));\n","import { useCallback } from 'react';\nimport { useExpressionModeStore } from '../stores/expressionModeStore';\n\nexport interface ExpressionModeState {\n  expression: string;\n  mode: 'value' | 'expression';\n  isEditing: boolean;\n  isFullScreen: boolean;\n  currentValue?: any;\n}\n\nexport interface ExpressionModeControls {\n  current: 'value' | 'expression';\n  switchToValue: () => void;\n  switchToExpression: () => void;\n  switchToEditor: () => void;\n  clear: () => void;\n  isExpressionMode: boolean;\n  isEditorMode: boolean;\n  expression: string;\n  setExpression: (expr: string) => void;\n  isEditing: boolean;\n  setEditing: (editing: boolean) => void;\n  currentValue?: any;\n  isFullScreen: boolean;\n  setFullScreen: (isFullScreen: boolean) => void;\n  setCurrentValue: (value: any) => void;\n\n  localInput: string,\n\n  setLocalInput: (value: any) => void;\n}\n\n/**\n * Hook for managing expression mode state using Zustand store\n * @param fieldName - Unique identifier for the field\n * @returns Expression mode controls and state\n */\nexport function useExpressionMode(fieldName: string): Omit<ExpressionModeControls, \"localInput\" | \"setLocalInput\"> {\n  const store = useExpressionModeStore();\n  const state = store.getState(fieldName);\n\n  const switchToValue = useCallback(() => {\n    store.switchToValue(fieldName);\n  }, [store, fieldName]);\n\n  const switchToExpression = useCallback(() => {\n    store.switchToExpression(fieldName);\n  }, [store, fieldName]);\n\n  const switchToEditor = useCallback(() => {\n    store.switchToEditor(fieldName);\n  }, [store, fieldName]);\n\n  const clear = useCallback(() => {\n    store.clear(fieldName);\n  }, [store, fieldName]);\n\n  const setExpression = useCallback((expr: string) => {\n    store.setExpression(fieldName, expr);\n  }, [store, fieldName]);\n\n  const setEditing = useCallback((editing: boolean) => {\n    store.setEditing(fieldName, editing);\n  }, [store, fieldName]);\n\n  const setCurrentValue = useCallback((value: any) => {\n    store.setCurrentValue(fieldName, value);\n  }, [store, fieldName]);\n\n  const setFullScreen = useCallback((isFullScreen: boolean) => {\n    store.setFullScreen(fieldName, isFullScreen);\n  }, [store, fieldName]);\n\n  return {\n    current: state.mode,\n    switchToValue,\n    switchToExpression,\n    switchToEditor,\n    clear,\n    isExpressionMode: state.mode === 'expression',\n    isEditorMode: state.isEditing,\n    expression: state.expression,\n    setExpression,\n    isEditing: state.isEditing,\n    setEditing,\n    currentValue: state.currentValue,\n    setCurrentValue,\n    isFullScreen: state.isFullScreen,\n    setFullScreen,\n  };\n}\n","import React, { useRef, useEffect, useCallback } from 'react';\nimport { Editor } from '@monaco-editor/react';\nimport { cn } from '../../lib/utils';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/pro-regular-svg-icons';\n\nexport interface ExpressionContext {\n  [key: string]: any;\n}\n\nexport interface InlineExpressionEditorProps {\n  value: string;\n  onChange: (value: string) => void;\n  onBlur?: (e: any) => void;\n  onEnter?: () => void; // Called when Enter is pressed (to switch to full-screen)\n  onTypeInferred?: (type: string) => void; // Callback when TypeScript infers the type\n  onValidationChange?: (isValid: boolean, errors: any[]) => void;\n  context?: ExpressionContext;\n  className?: string;\n  placeholder?: string;\n}\n\nexport interface FullPanelExpressionEditorProps {\n  value: string;\n  onChange: (value: string) => void;\n  onClose: () => void;\n  onBlur?: (e: any) => void;\n  onTypeInferred?: (type: string) => void; // Callback when TypeScript infers the type\n  context?: ExpressionContext;\n  className?: string;\n  placeholder?: string;\n}\n\n/**\n * Shared function to infer TypeScript type from an expression\n * Used by both inline and full-screen editors\n * Returns 'error' if there are Monaco validation errors\n */\nasync function inferTypeFromMonaco(\n  editor: any,\n  monaco: any,\n  expression: string,\n  logPrefix: string = '🔷'\n): Promise<string | null> {\n  if (!expression.trim()) {\n    console.log(`${logPrefix} Type inference skipped - no expression`);\n    return null;\n  }\n  \n  // Only infer type if THIS editor has focus\n  if (!editor.hasTextFocus()) {\n    console.log(`${logPrefix} Skipping type inference - editor does not have focus`);\n    return null;\n  }\n\n  console.log(`${logPrefix} Running type inference, expression:`, expression);\n\n  try {\n    // Check for Monaco validation errors first\n    const currentModel = editor.getModel();\n    if (currentModel) {\n      const markers = monaco.editor.getModelMarkers({ resource: currentModel.uri });\n      const hasErrors = markers.some((marker: any) => marker.severity === monaco.MarkerSeverity.Error);\n      \n      if (hasErrors) {\n        console.log(`${logPrefix} Type inference skipped - expression has validation errors`);\n        return 'error';\n      }\n    }\n\n    // Create a temporary model with the expression wrapped\n    // This allows TypeScript to infer the type properly\n    const wrappedCode = `const __expr__ = (${expression});`;\n    const tempModel = monaco.editor.createModel(wrappedCode, 'typescript');\n    \n    // Get TypeScript worker\n    const worker = await monaco.languages.typescript.getTypeScriptWorker();\n    const client = await worker(tempModel.uri);\n\n    // Find position of __expr__ variable\n    const exprIndex = wrappedCode.indexOf('__expr__');\n    const position = tempModel.getPositionAt(exprIndex);\n\n    const quickInfo = await client.getQuickInfoAtPosition(\n      tempModel.uri.toString(),\n      tempModel.getOffsetAt(position)\n    );\n\n    console.log(`${logPrefix} QuickInfo response:`, quickInfo);\n\n    let extractedType: string | null = null;\n\n    if (quickInfo && quickInfo.displayParts) {\n      // Extract type from displayParts\n      let foundColon = false;\n      const typeParts: any[] = [];\n      \n      for (const part of quickInfo.displayParts) {\n        if (foundColon) typeParts.push(part);\n        if (part.kind === 'punctuation' && part.text === ':' && !foundColon) {\n          const prevPart = quickInfo.displayParts[quickInfo.displayParts.indexOf(part) - 1];\n          if (prevPart && (prevPart.kind === 'localName' || prevPart.kind === 'parameterName')) {\n            foundColon = true;\n          }\n        }\n      }\n\n      if (typeParts.length > 0) {\n        const typeString = typeParts.map((p: any) => p.text).join('').trim();\n        console.log(`${logPrefix} Extracted type:`, typeString);\n        if (typeString && typeString !== 'any') {\n          extractedType = typeString;\n        }\n      }\n    }\n    \n    // Clean up temporary model\n    tempModel.dispose();\n    return extractedType;\n  } catch (error) {\n    console.warn(`${logPrefix} Type inference failed:`, error);\n    return null;\n  }\n}\n\n// Monaco options to match Input component styling\nconst InlineEditorOptions = {\n  fontSize: '14px', // md:text-sm\n  fontWeight: 'normal',\n  wordWrap: 'off',\n  lineNumbers: 'off',\n  lineNumbersMinChars: 0,\n  overviewRulerLanes: 0,\n  overviewRulerBorder: false,\n  hideCursorInOverviewRuler: true,\n  lineDecorationsWidth: 0,\n  glyphMargin: false,\n  folding: false,\n  scrollBeyondLastColumn: 0,\n  scrollbar: {\n    horizontal: 'hidden',\n    vertical: 'hidden',\n    alwaysConsumeMouseWheel: false,\n  },\n  find: {\n    addExtraSpaceOnTop: false,\n    autoFindInSelection: 'never',\n    seedSearchStringFromSelection: false,\n  },\n  minimap: { enabled: false },\n  wordBasedSuggestions: true, // Enable for better UX\n  links: false,\n  occurrencesHighlight: false,\n  cursorStyle: 'line', // Match input cursor\n  renderLineHighlight: 'none',\n  contextmenu: false,\n  roundedSelection: false,\n  hover: {\n    delay: 300,\n  },\n  acceptSuggestionOnEnter: 'on',\n  automaticLayout: true,\n  fixedOverflowWidgets: true,\n  // Match Input component styling\n  padding: { top: 4, bottom: 4 }, // py-1 equivalent\n  fontFamily: 'inherit', // Use system font\n  letterSpacing: 'normal',\n  lineHeight: 'normal',\n} as any;\n\nconst FullPanelEditorOptions = {\n  fontSize: '14px',\n  fontWeight: 'normal',\n  wordWrap: 'on',\n  lineNumbers: 'on',\n  lineNumbersMinChars: 3,\n  overviewRulerLanes: 3,\n  overviewRulerBorder: true,\n  hideCursorInOverviewRuler: false,\n  lineDecorationsWidth: 10,\n  glyphMargin: true,\n  folding: true,\n  scrollBeyondLastColumn: 5,\n  scrollbar: {\n    horizontal: 'auto',\n    vertical: 'auto',\n    alwaysConsumeMouseWheel: false,\n  },\n  find: {\n    addExtraSpaceOnTop: false,\n    autoFindInSelection: 'never',\n    seedSearchStringFromSelection: false,\n  },\n  minimap: { enabled: true },\n  wordBasedSuggestions: true,\n  links: true,\n  occurrencesHighlight: true,\n  cursorStyle: 'line',\n  renderLineHighlight: 'line',\n  contextmenu: true,\n  roundedSelection: true,\n  hover: {\n    delay: 300,\n  },\n  // IMPORTANT: Don't accept suggestions on Enter - let Enter create new lines\n  acceptSuggestionOnEnter: 'off',\n  automaticLayout: true,\n  fixedOverflowWidgets: true,\n  readOnly: false,  // Explicitly allow editing\n  domReadOnly: false, // Allow DOM manipulation\n} as any;\n\n/**\n * Inline Monaco editor for expressions - based on your SingleLineEditor\n */\nexport function InlineExpressionEditor({\n  value,\n  onChange,\n  onBlur,\n  onEnter,\n  onTypeInferred,\n  onValidationChange,\n  context = {},\n  className,\n  placeholder = 'Enter expression...',\n}: InlineExpressionEditorProps) {\n  const editorRef = useRef<any>(null);\n  const monacoRef = useRef<any>(null);\n  const typeInferenceTimeoutRef = useRef<any>(null);\n\n  const handleEditorWillMount = (monaco: any) => {\n    monacoRef.current = monaco;\n\n    // Add context variables to completion\n    const contextKeys = Object.keys(context);\n    if (contextKeys.length > 0) {\n      monaco.languages.typescript.javascriptDefaults.addExtraLib(`\n        declare const ${contextKeys.join(', ')}: any;\n      `, 'context.d.ts');\n    }\n  };\n\n  const handleEditorDidMount = (editor: any, monaco: any) => {\n    editorRef.current = editor;\n\n    // Apply your proven configuration\n    editor.updateOptions(InlineEditorOptions);\n\n    console.log('🔷 Inline editor mounted!');\n\n    // Use CSS filter to invert colors for inline editor (light theme effect)\n    const editorElement = editor.getDomNode();\n    // if (editorElement) {\n    //   // editorElement.style = editorElement.style + \" background-color: #1e1e1e !important;\";\n    //   // editorElement.style.filter = 'invert(1) hue-rotate(180deg)';\n    // }\n\n    // Disable Find widget\n    const findCommand = editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_F, () => { });\n\n    // Handle Enter and Shift+Enter using onKeyDown\n    const enterKeyDisposable = editor.onKeyDown((e: any) => {\n      if (e.keyCode === monaco.KeyCode.Enter) {\n        // Only handle if THIS editor has focus\n        if (!editor.hasTextFocus()) {\n          console.log('🔷 Enter keydown but inline editor does NOT have focus - allowing default');\n          return;\n        }\n        \n        // Check if Shift is pressed (Shift+Enter)\n        if (e.shiftKey) {\n          console.log('🔷 Shift+Enter in INLINE editor - switching to full-screen');\n          e.preventDefault();\n          e.stopPropagation();\n          // Switch to full-screen for multi-line editing\n          if (onEnter) {\n            onEnter();\n          }\n          return;\n        }\n        \n        // Regular Enter (no Shift)\n        // Check if autocomplete is visible\n        const suggestWidget = editor._contentWidgets?.['editor.widget.suggestWidget'];\n        const isSuggestVisible = \n          suggestWidget?.widget &&\n          !suggestWidget.widget._hidden &&\n          suggestWidget.widget.state !== undefined &&\n          suggestWidget.widget.state !== 0;\n        \n        const contextKeyService = editor._contextKeyService;\n        const suggestWidgetVisible = contextKeyService?.getContextKeyValue?.('suggestWidgetVisible');\n        \n        if (isSuggestVisible || suggestWidgetVisible) {\n          console.log('🔷 Enter in INLINE editor - accepting autocomplete');\n          e.preventDefault();\n          e.stopPropagation();\n        editor.trigger('', 'acceptSelectedSuggestion');\n      } else {\n          console.log('🔷 Enter in INLINE editor - blurring (finishing edit)');\n          e.preventDefault();\n          e.stopPropagation();\n          // Blur to finish editing\n        onBlur?.({});\n        }\n      }\n    });\n\n    // Handle paste - remove line breaks (like your implementation)\n    editor.onDidPaste((e: any) => {\n      if (e.endLineNumber <= 1) {\n        return;\n      }\n      let newContent = '';\n      const textModel = editor.getModel();\n      const lineCount = textModel.getLineCount();\n      for (let i = 0; i < lineCount; i += 1) {\n        newContent += textModel.getLineContent(i + 1);\n      }\n      textModel.setValue(newContent);\n      editor.setPosition({ column: newContent.length + 1, lineNumber: 1 });\n    });\n\n    // Handle blur - switch to expression mode when editor loses focus\n    editor.onDidBlurEditorText((e: any) => {\n      const currentValue = editor.getValue();\n      onBlur?.({ ...e, currentValue });\n    });\n\n    // Track validation errors on content change\n      editor.onDidChangeModelContent(() => {\n        const model = editor.getModel();\n        if (model) {\n        // Validation\n        if (onValidationChange) {\n          const markers = monaco.editor.getModelMarkers({ resource: model.uri });\n          const hasErrors = markers.some((marker: any) => marker.severity === monaco.MarkerSeverity.Error);\n          onValidationChange(!hasErrors, markers);\n        }\n        \n        // Debounce type inference - will be cancelled if errors appear via marker change listener\n        if (onTypeInferred) {\n          if (typeInferenceTimeoutRef.current) {\n            clearTimeout(typeInferenceTimeoutRef.current);\n          }\n          \n          console.log('🔷 Content changed - debouncing type inference');\n          typeInferenceTimeoutRef.current = setTimeout(async () => {\n            const expressionToAnalyze = model.getValue();\n            const inferredType = await inferTypeFromMonaco(editor, monaco, expressionToAnalyze, '🔷');\n            if (inferredType) {\n              onTypeInferred(inferredType);\n            }\n          }, 200); // Reduced from 500ms to 200ms for better responsiveness\n        }\n      }\n    });\n    \n    // Listen to MONACO'S marker changes - fires when TypeScript detects errors\n    const markerChangeDisposable = monaco.editor.onDidChangeMarkers((uris: any[]) => {\n      const model = editor.getModel();\n      if (!model || !onTypeInferred) return;\n      \n      // Check if this marker change is for our model\n      const isOurModel = uris.some((uri: any) => uri.toString() === model.uri.toString());\n      if (!isOurModel) return;\n      \n      const markers = monaco.editor.getModelMarkers({ resource: model.uri });\n      const hasErrors = markers.some((marker: any) => marker.severity === monaco.MarkerSeverity.Error);\n      \n      console.log('🔷 Monaco markers changed - hasErrors:', hasErrors);\n      \n      if (hasErrors) {\n        // Cancel any pending type inference and immediately set to error\n        if (typeInferenceTimeoutRef.current) {\n          clearTimeout(typeInferenceTimeoutRef.current);\n          typeInferenceTimeoutRef.current = null;\n        }\n        console.log('🔷 ERROR detected - immediately setting type to error');\n        onTypeInferred('error');\n      } else {\n        // Errors cleared - trigger type inference\n        if (typeInferenceTimeoutRef.current) {\n          clearTimeout(typeInferenceTimeoutRef.current);\n        }\n        console.log('🔷 Errors cleared - triggering type inference');\n        typeInferenceTimeoutRef.current = setTimeout(async () => {\n          const expressionToAnalyze = model.getValue();\n          const inferredType = await inferTypeFromMonaco(editor, monaco, expressionToAnalyze, '🔷');\n          if (inferredType) {\n            onTypeInferred(inferredType);\n          }\n        }, 100); // Shorter delay when recovering from error\n      }\n    });\n\n    // Disable F1 command palette\n    editor.addCommand(monaco.KeyCode.F1, () => { });\n\n    // Add immediate type inference on cursor movement (for better responsiveness)\n    const cursorDisposable = editor.onDidChangeCursorPosition(async () => {\n      if (onTypeInferred && editor.hasTextFocus()) {\n        const model = editor.getModel();\n        if (model && model.getValue().trim()) {\n          // Clear any pending debounced inference\n          if (typeInferenceTimeoutRef.current) {\n            clearTimeout(typeInferenceTimeoutRef.current);\n          }\n          \n          // Immediate type inference on cursor movement\n          const expressionToAnalyze = model.getValue();\n          const inferredType = await inferTypeFromMonaco(editor, monaco, expressionToAnalyze, '🔷');\n          if (inferredType) {\n            onTypeInferred(inferredType);\n          }\n        }\n      }\n    });\n\n    // Set cursor to end and focus\n    editor.setPosition({\n      lineNumber: 1,\n      column: 999999,\n    });\n\n    window.requestAnimationFrame(() => {\n      editor.focus();\n      \n      // Trigger initial type inference after editor settles\n      setTimeout(async () => {\n        const model = editor.getModel();\n        if (onTypeInferred && model && model.getValue()) {\n          console.log('🔷 Triggering initial type inference for inline editor');\n          \n          // Check for errors first\n          const markers = monaco.editor.getModelMarkers({ resource: model.uri });\n          const hasErrors = markers.some((marker: any) => marker.severity === monaco.MarkerSeverity.Error);\n          \n          if (hasErrors) {\n            onTypeInferred('error');\n          } else {\n            const expressionToAnalyze = model.getValue();\n            const inferredType = await inferTypeFromMonaco(editor, monaco, expressionToAnalyze, '🔷');\n            if (inferredType) {\n              onTypeInferred(inferredType);\n            }\n          }\n        }\n      }, 100);\n    });\n\n    // Store disposables for cleanup\n    editorRef.current._inlineDisposables = {\n      enterKeyDisposable,\n      findCommand,\n      markerChangeDisposable,\n      cursorDisposable\n    };\n  };\n\n  // Cleanup when unmounting\n  useEffect(() => {\n    return () => {\n      if (editorRef.current) {\n        console.log('🔷 Inline editor unmounting - cleaning up');\n        // Clear type inference timeout\n        if (typeInferenceTimeoutRef.current) {\n          clearTimeout(typeInferenceTimeoutRef.current);\n        }\n        // Dispose of event listeners\n        if (editorRef.current._inlineDisposables) {\n          const disposables = editorRef.current._inlineDisposables;\n          disposables.enterKeyDisposable?.dispose?.();\n          disposables.findCommand?.dispose?.();\n          disposables.markerChangeDisposable?.dispose?.();\n          disposables.cursorDisposable?.dispose?.();\n        }\n        editorRef.current = null;\n      }\n    };\n  }, []);\n\n  const handleEditorChange = (newValue: string | undefined) => {\n    onChange(newValue || '');\n  };\n\n  return (\n    <div className={cn(\"uii:relative uii:flex-1\", className)}>\n      <Editor\n        theme=\"vs-dark\"\n        height=\"26px\"\n        language=\"typescript\"\n        value={value}\n        onChange={handleEditorChange}\n        onMount={handleEditorDidMount}\n        beforeMount={handleEditorWillMount}\n        width=\"100%\"\n        loading={<><FontAwesomeIcon icon={faSpinner} className=\"uii:animate-spin\" /></>}\n        options={InlineEditorOptions}\n        className=\"uii:-ml-[4px] uii:-mt-[1px] inline-editor\"\n      />\n      {!value && (\n        <div className=\"uii:absolute uii:inset-0 uii:flex uii:items-center uii:pointer-events-none uii:text-muted-foreground uii:text-sm\">\n          {placeholder}\n        </div>\n      )}\n    </div>\n  );\n}\n\n/**\n * Full panel Monaco editor for expressions\n */\nexport function FullPanelExpressionEditor({\n  value,\n  onChange,\n  onClose,\n  onBlur,\n  onTypeInferred,\n  context = {},\n  className,\n  placeholder = 'Enter expression...',\n}: FullPanelExpressionEditorProps) {\n  const editorRef = useRef<any>(null);\n  const monacoRef = useRef<any>(null);\n  const typeInferenceTimeoutRef = useRef<any>(null);\n\n  const handleEditorWillMount = (monaco: any) => {\n    monacoRef.current = monaco;\n\n    // Add context variables to completion\n    const contextKeys = Object.keys(context);\n    if (contextKeys.length > 0) {\n      monaco.languages.typescript.javascriptDefaults.addExtraLib(`\n        declare const ${contextKeys.join(', ')}: any;\n      `, 'context.d.ts');\n    }\n  };\n\n  const handleFPEditorDidMount = (editor: any, monaco: any) => {\n    editorRef.current = editor;\n\n    // Apply full panel configuration\n    editor.updateOptions(FullPanelEditorOptions);\n\n    console.log('🟦 FULL-SCREEN panel editor mounted!');\n    console.log('Full-screen editor is read-only?', editor.getOption(monaco.editor.EditorOption.readOnly));\n\n    // Handle Escape and Enter with onKeyDown\n    const escapeKeyDisposable = editor.onKeyDown((e: any) => {\n      if (e.keyCode === monaco.KeyCode.Escape) {\n        console.log('🟦 Escape pressed in FULL-SCREEN editor - closing');\n        e.preventDefault();\n        e.stopPropagation();\n      onClose();\n      }\n      \n      // Handle Enter key - check for autocomplete first\n      if (e.keyCode === monaco.KeyCode.Enter) {\n        // Check if suggestion widget is visible\n        const suggestWidget = editor._contentWidgets?.['editor.widget.suggestWidget'];\n        const isSuggestVisible = \n          suggestWidget?.widget &&\n          !suggestWidget.widget._hidden &&\n          suggestWidget.widget.state !== undefined &&\n          suggestWidget.widget.state !== 0;\n        \n        const contextKeyService = editor._contextKeyService;\n        const suggestWidgetVisible = contextKeyService?.getContextKeyValue?.('suggestWidgetVisible');\n        \n        if (isSuggestVisible || suggestWidgetVisible) {\n          console.log('🟦 Enter in FULL-SCREEN - accepting autocomplete');\n          e.preventDefault();\n          e.stopPropagation();\n          editor.trigger('', 'acceptSelectedSuggestion');\n        } else {\n          console.log('🟦 Enter in FULL-SCREEN - allowing newline (default behavior)');\n          // Don't prevent default - let Monaco insert newline\n        }\n      }\n    });\n\n    // Track content changes\n    let changeCount = 0;\n    const changeDisposable = editor.onDidChangeModelContent((e: any) => {\n      changeCount++;\n      const newValue = editor.getValue();\n      console.log(`🟦 FULL-SCREEN content changed (${changeCount}):`, newValue);\n      console.log(`🟦 Line count: ${editor.getModel()?.getLineCount()}`);\n      \n      // Debounce type inference - will be cancelled if errors appear via marker change listener\n      if (onTypeInferred) {\n        if (typeInferenceTimeoutRef.current) {\n          clearTimeout(typeInferenceTimeoutRef.current);\n        }\n        \n        console.log('🟦 Content changed - debouncing type inference');\n        typeInferenceTimeoutRef.current = setTimeout(async () => {\n          const expressionToAnalyze = newValue;\n          const inferredType = await inferTypeFromMonaco(editor, monaco, expressionToAnalyze, '🟦');\n          if (inferredType) {\n            onTypeInferred(inferredType);\n          }\n        }, 200); // Reduced from 500ms to 200ms for better responsiveness\n      }\n    });\n    \n    // Listen to MONACO'S marker changes - fires when TypeScript detects errors\n    const markerChangeDisposable = monaco.editor.onDidChangeMarkers((uris: any[]) => {\n      const model = editor.getModel();\n      if (!model || !onTypeInferred) return;\n      \n      // Check if this marker change is for our model\n      const isOurModel = uris.some((uri: any) => uri.toString() === model.uri.toString());\n      if (!isOurModel) return;\n      \n      const markers = monaco.editor.getModelMarkers({ resource: model.uri });\n      const hasErrors = markers.some((marker: any) => marker.severity === monaco.MarkerSeverity.Error);\n      \n      console.log('🟦 Monaco markers changed - hasErrors:', hasErrors);\n      \n      if (hasErrors) {\n        // Cancel any pending type inference and immediately set to error\n        if (typeInferenceTimeoutRef.current) {\n          clearTimeout(typeInferenceTimeoutRef.current);\n          typeInferenceTimeoutRef.current = null;\n        }\n        console.log('🟦 ERROR detected - immediately setting type to error');\n        onTypeInferred('error');\n      } else {\n        // Errors cleared - trigger type inference\n        if (typeInferenceTimeoutRef.current) {\n          clearTimeout(typeInferenceTimeoutRef.current);\n        }\n        console.log('🟦 Errors cleared - triggering type inference');\n        typeInferenceTimeoutRef.current = setTimeout(async () => {\n          const expressionToAnalyze = model.getValue();\n          const inferredType = await inferTypeFromMonaco(editor, monaco, expressionToAnalyze, '🟦');\n          if (inferredType) {\n            onTypeInferred(inferredType);\n          }\n        }, 100); // Shorter delay when recovering from error\n      }\n    });\n\n    // Handle blur - switch to expression mode when editor loses focus\n    editor.onDidBlurEditorText((e: any) => {\n      const currentValue = editor.getValue();\n      onBlur?.({ ...e, currentValue });\n    });\n\n    // Focus the editor and position cursor at the end\n    const model = editor.getModel();\n    if (model) {\n      const lineCount = model.getLineCount();\n      const lastLineLength = model.getLineLength(lineCount);\n      editor.setPosition({ lineNumber: lineCount, column: lastLineLength + 1 });\n    }\n    editor.focus();\n\n    // Trigger initial type inference after a short delay (let editor settle)\n    setTimeout(async () => {\n      if (onTypeInferred && model) {\n        console.log('🟦 Triggering initial type inference for full-screen editor');\n        \n        // Check for errors first\n        const markers = monaco.editor.getModelMarkers({ resource: model.uri });\n        const hasErrors = markers.some((marker: any) => marker.severity === monaco.MarkerSeverity.Error);\n        \n        if (hasErrors) {\n          console.log('🟦 Initial load has error - setting type to error');\n          onTypeInferred('error');\n        } else {\n          const expressionToAnalyze = model.getValue();\n          const inferredType = await inferTypeFromMonaco(editor, monaco, expressionToAnalyze, '🟦');\n          if (inferredType) {\n            onTypeInferred(inferredType);\n          }\n        }\n      }\n    }, 100);\n\n    // Add immediate type inference on cursor movement (for better responsiveness)\n    const cursorDisposable = editor.onDidChangeCursorPosition(async () => {\n      if (onTypeInferred && editor.hasTextFocus()) {\n        const model = editor.getModel();\n        if (model && model.getValue().trim()) {\n          // Clear any pending debounced inference\n          if (typeInferenceTimeoutRef.current) {\n            clearTimeout(typeInferenceTimeoutRef.current);\n          }\n          \n          // Immediate type inference on cursor movement\n          const expressionToAnalyze = model.getValue();\n          const inferredType = await inferTypeFromMonaco(editor, monaco, expressionToAnalyze, '🟦');\n          if (inferredType) {\n            onTypeInferred(inferredType);\n          }\n        }\n      }\n    });\n\n    // Store disposables for cleanup\n    editorRef.current._fullScreenDisposables = {\n      escapeKeyDisposable,\n      changeDisposable,\n      markerChangeDisposable,\n      cursorDisposable\n    };\n  };\n\n  // Cleanup when unmounting\n  useEffect(() => {\n    return () => {\n      if (editorRef.current) {\n        console.log('🟦 Full-screen editor unmounting - cleaning up');\n        // Clear type inference timeout\n        if (typeInferenceTimeoutRef.current) {\n          clearTimeout(typeInferenceTimeoutRef.current);\n        }\n        // Dispose of event listeners\n        if (editorRef.current._fullScreenDisposables) {\n          const disposables = editorRef.current._fullScreenDisposables;\n          disposables.escapeKeyDisposable?.dispose?.();\n          disposables.changeDisposable?.dispose?.();\n          disposables.markerChangeDisposable?.dispose?.();\n          disposables.cursorDisposable?.dispose?.();\n        }\n        editorRef.current = null;\n      }\n    };\n  }, []);\n\n  const handleEditorChange = (newValue: string | undefined) => {\n    onChange(newValue || '');\n  };\n\n  return (\n    <div\n      className={cn(\n        \"uii:relative uii:border uii:rounded-md uii:bg-background\",\n        className\n      )}\n    >\n      <div className=\"uii:flex uii:items-center uii:justify-between uii:p-2 uii:border-b uii:bg-muted/50\">\n        <span className=\"uii:text-sm uii:font-medium\">Expression Editor</span>\n        <button\n          type=\"button\"\n          onClick={onClose}\n          className=\"uii:text-muted-foreground hover:uii:text-foreground uii:p-1 uii:rounded uii:cursor-pointer uii:text-xs\"\n        >\n          ✕\n        </button>\n      </div>\n      <Editor\n        height=\"300px\"\n        theme=\"vs-dark\"\n        language=\"typescript\"\n        value={value}\n        onChange={handleEditorChange}\n        onMount={handleFPEditorDidMount}\n        beforeMount={handleEditorWillMount}\n        options={FullPanelEditorOptions}\n      />\n      {!value && (\n        <div className=\"uii:absolute uii:inset-0 uii:flex uii:items-center uii:justify-center uii:pointer-events-none uii:text-muted-foreground\">\n          {placeholder}\n        </div>\n      )}\n    </div>\n  );\n}\n","import { useState, useEffect, useRef } from 'react';\n\ninterface ASTNode {\n  type: string;\n  value?: string;\n  start: number;\n  end: number;\n  children: ASTNode[];\n  name?: string;\n  operator?: string;\n  left?: ASTNode;\n  right?: ASTNode;\n  argument?: ASTNode;\n  object?: ASTNode;\n  property?: ASTNode;\n  index?: ASTNode;\n  elements?: ASTNode[];\n  params?: ASTNode[];\n  raw?: string;\n  callee?: ASTNode;\n  arguments?: ASTNode[];\n  kind?: string;\n  text?: string;\n}\n\ninterface ParseResult {\n  ast: ASTNode | null;\n  tokens: Array<{type: string, value: string, start: number, end: number}>;\n  dependencies: string[];\n  error?: string;\n}\n\ninterface UseASTParserResult {\n  ast: ASTNode | null;\n  tokens: Array<{type: string, value: string, start: number, end: number}>;\n  dependencies: string[];\n  isLoading: boolean;\n  error: string | null;\n}\n\nexport function useASTParser(expression: string, controlKey?: string): UseASTParserResult {\n  const [ast, setAST] = useState<ASTNode | null>(null);\n  const [tokens, setTokens] = useState<Array<{type: string, value: string, start: number, end: number}>>([]);\n  const [dependencies, setDependencies] = useState<string[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const requestIdRef = useRef<number>(0);\n  const messageHandlerRef = useRef<((event: MessageEvent) => void) | null>(null);\n  const controlKeyRef = useRef<string>(controlKey || 'default');\n  \n  // Update controlKey ref when prop changes\n  useEffect(() => {\n    controlKeyRef.current = controlKey || 'default';\n  }, [controlKey]);\n\n  // Initialize service worker message listener\n  useEffect(() => {\n    if (typeof window === 'undefined' || !navigator.serviceWorker) {\n      setError('Service worker not available');\n      return;\n    }\n\n    // Create message handler\n    const handleMessage = (event: MessageEvent) => {\n      if (event.data.type === 'AST_PARSE_RESULT') {\n        const { id, controlKey, result } = event.data.payload;\n        // Match by both request ID and control key to avoid cross-control contamination\n        if (id === requestIdRef.current && controlKey === controlKeyRef.current) {\n          console.log('Service worker AST response:', { id, controlKey, result });\n          setAST(result.ast);\n          setTokens(result.tokens);\n          setDependencies(result.dependencies || []);\n          setError(result.error || null);\n          setIsLoading(false);\n        } else {\n          console.log('Ignoring AST response - wrong control:', { \n            receivedId: id, \n            expectedId: requestIdRef.current,\n            receivedKey: controlKey,\n            expectedKey: controlKeyRef.current\n          });\n        }\n      }\n    };\n\n    messageHandlerRef.current = handleMessage;\n    navigator.serviceWorker.addEventListener('message', handleMessage);\n\n    return () => {\n      if (messageHandlerRef.current) {\n        navigator.serviceWorker.removeEventListener('message', messageHandlerRef.current);\n      }\n    };\n  }, []);\n\n  // Parse expression when it changes\n  useEffect(() => {\n    if (!expression.trim()) {\n      setAST(null);\n      setTokens([]);\n      setDependencies([]);\n      setError(null);\n      setIsLoading(false);\n      return;\n    }\n\n    if (!navigator.serviceWorker || !navigator.serviceWorker.controller) {\n      setError('Service worker not ready');\n      setIsLoading(false);\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n    requestIdRef.current++;\n    \n    console.log('Sending expression to service worker:', { \n      expression: expression.trim(), \n      controlKey: controlKeyRef.current,\n      id: requestIdRef.current \n    });\n    \n    // Send message to service worker with control key\n    navigator.serviceWorker.controller.postMessage({\n      type: 'PARSE_AST',\n      payload: {\n        expression: expression.trim(),\n        id: requestIdRef.current,\n        controlKey: controlKeyRef.current\n      }\n    });\n  }, [expression]);\n\n  return {\n    ast,\n    tokens,\n    dependencies,\n    isLoading,\n    error\n  };\n}","import React from 'react';\nimport { cn } from '../../lib/utils';\n\ninterface ASTNode {\n  type: string;\n  value?: string;\n  start: number;\n  end: number;\n  children: ASTNode[];\n  name?: string;\n  operator?: string;\n  left?: ASTNode;\n  right?: ASTNode;\n  argument?: ASTNode;\n  object?: ASTNode;\n  property?: ASTNode;\n  index?: ASTNode;\n  elements?: ASTNode[];\n  params?: ASTNode[];\n}\n\ninterface ASTRendererProps {\n  ast: ASTNode | null;\n  key?: string;\n  className?: string;\n  variant?: 'inline' | 'tree' | 'compact';\n  showTokens?: boolean;\n  tokens?: Array<{ type: string, value: string, start: number, end: number }>;\n}\n\nexport function ASTRenderer({\n  ast, key,\n  className,\n  variant = 'inline',\n  showTokens = false,\n  tokens = []\n}: ASTRendererProps) {\n\n  const getNodeColor = (type: string): string => {\n    switch (type) {\n      case 'StringLiteral':\n        return 'uii:text-green-600 uii:bg-green-100';\n      case 'NumericLiteral':\n        return 'uii:text-purple-600 uii:bg-purple-100';\n      case 'Identifier':\n        return 'uii:text-blue-600 uii:bg-blue-100';\n      case 'Keyword':\n      case 'Literal':\n        return 'uii:text-orange-600 uii:bg-orange-100';\n      case 'BinaryExpression':\n        return 'uii:text-gray-700 uii:bg-gray-100';\n      case 'CallExpression':\n        return 'uii:text-indigo-600 uii:bg-indigo-100';\n      case 'MemberExpression':\n        return 'uii:text-cyan-600 uii:bg-cyan-100';\n      case 'UnaryExpression':\n        return 'uii:text-pink-600 uii:bg-pink-100';\n      case 'ParenthesizedExpression':\n        return 'uii:text-yellow-600 uii:bg-yellow-100';\n      default:\n        return 'uii:text-gray-600 uii:bg-gray-100';\n    }\n  };\n\n  const renderInlineNode = (node: ASTNode, depth: number = 0): React.ReactNode => {\n    if (depth > 2) return null; // Limit depth for inline display\n\n    // For inline display, show a simplified view\n    if (node.type === 'Identifier') {\n      return (\n        <span key={`${node.start}-${node.end}`} className=\"uii:inline-flex uii:items-center uii:mr-1\">\n          <span className=\"uii:px-1 uii:py-0.5 uii:rounded uii:text-xs uii:bg-blue-100 uii:text-blue-800 uii:font-mono\">\n            {node.name || node.value}\n          </span>\n        </span>\n      );\n    }\n\n    if (node.type === 'StringLiteral' || node.type === 'NumericLiteral') {\n      return (\n        <span key={`${node.start}-${node.end}`} className=\"uii:inline-flex uii:items-center uii:mr-1\">\n          <span className=\"uii:px-1 uii:py-0.5 uii:rounded uii:text-xs uii:bg-green-100 uii:text-green-800 uii:font-mono\">\n            {node.value}\n          </span>\n        </span>\n      );\n    }\n\n    if (node.type === 'BinaryExpression') {\n      return (\n        <span key={`${node.start}-${node.end}`} className=\"uii:inline-flex uii:items-center uii:mr-1\">\n          {node.left && renderInlineNode(node.left, depth + 1)}\n          <span className=\"uii:px-1 uii:py-0.5 uii:rounded uii:text-xs uii:bg-purple-100 uii:text-purple-800 uii:font-mono uii:mx-1\">\n            {node.operator}\n          </span>\n          {node.right && renderInlineNode(node.right, depth + 1)}\n        </span>\n      );\n    }\n\n    if (node.type === 'CallExpression') {\n      return (\n        <span key={`${node.start}-${node.end}`} className=\"uii:inline-flex uii:items-center uii:mr-1\">\n          {(node as any).callee && renderInlineNode((node as any).callee, depth + 1)}\n          <span className=\"text-xs text-gray-600\">()</span>\n        </span>\n      );\n    }\n\n    if (node.type === 'PropertyAccessExpression') {\n      return (\n        <span key={`${node.start}-${node.end}`} className=\"uii:inline-flex uii:items-center uii:mr-1\">\n          {node.object && renderInlineNode(node.object, depth + 1)}\n          <span className=\"text-xs text-gray-600\">.</span>\n          {node.property && renderInlineNode(node.property, depth + 1)}\n        </span>\n      );\n    }\n\n    // For other types, show a simplified version\n    return (\n      <span key={`${node.start}-${node.end}`} className=\"uii:inline-flex uii:items-center uii:mr-1\">\n        <span className=\"px-1 py-0.5 rounded text-xs bg-gray-100 text-gray-600 font-mono\">\n          {node.type}\n        </span>\n      </span>\n    );\n  };\n\n  const renderTreeNode = (node: ASTNode, depth: number = 0): React.ReactNode => {\n    if (depth > 4) return null; // Limit depth to prevent excessive nesting\n\n    const indent = '  '.repeat(depth);\n\n    return (\n      <div key={`${node.start}-${node.end}`} className=\"font-mono text-xs\">\n        <div className=\"uii:flex uii:items-start uii:gap-2\">\n          <span className=\"uii:text-gray-400\">{indent}</span>\n          <span className={cn(\"uii:px-1 uii:py-0.5 uii:rounded uii:text-xs uii:font-semibold\", getNodeColor(node.type))}>\n            {node.type}\n          </span>\n          {node.value && (\n            <span className=\"uii:text-green-600\">\"{node.value}\"</span>\n          )}\n          {node.operator && (\n            <span className=\"uii:text-purple-600\">{node.operator}</span>\n          )}\n          {node.name && (\n            <span className=\"uii:text-blue-600\">{node.name}</span>\n          )}\n        </div>\n\n        {/* Render specific properties more concisely - only if they exist */}\n        {/* Don't render children array if we have specific properties to avoid duplication */}\n        {node.left && (\n          <div className=\"uii:ml-2\">\n            <span className=\"uii:text-gray-500 uii:text-xs\">left: </span>\n            {renderTreeNode(node.left, depth + 1)}\n          </div>\n        )}\n        {node.right && (\n          <div className=\"uii:ml-2\">\n            <span className=\"uii:text-gray-500 uii:text-xs\">right: </span>\n            {renderTreeNode(node.right, depth + 1)}\n          </div>\n        )}\n        {node.argument && (\n          <div className=\"uii:ml-2\">\n            <span className=\"uii:text-gray-500 uii:text-xs\">arg: </span>\n            {renderTreeNode(node.argument, depth + 1)}\n          </div>\n        )}\n        {node.object && (\n          <div className=\"uii:ml-2\">\n            <span className=\"uii:text-gray-500 uii:text-xs\">obj: </span>\n            {renderTreeNode(node.object, depth + 1)}\n          </div>\n        )}\n        {node.property && (\n          <div className=\"uii:ml-2\">\n            <span className=\"uii:text-gray-500 uii:text-xs\">prop: </span>\n            {renderTreeNode(node.property, depth + 1)}\n          </div>\n        )}\n        {node.index && (\n          <div className=\"uii:ml-2\">\n            <span className=\"uii:text-gray-500 uii:text-xs\">idx: </span>\n            {renderTreeNode(node.index, depth + 1)}\n          </div>\n        )}\n\n        {/* Only render children array if we don't have specific properties (to avoid duplication) */}\n        {!node.left && !node.right && !node.argument && !node.object && !node.property && !node.index &&\n          node.children && node.children.length > 0 && (\n            <div className=\"uii:ml-2\">\n              {node.children.slice(0, 3).map((child, index) => renderTreeNode(child, depth + 1))}\n              {node.children.length > 3 && (\n                <div className=\"uii:ml-2 uii:text-gray-500 uii:text-xs\">\n                  ... and {node.children.length - 3} more\n                </div>\n              )}\n            </div>\n          )}\n      </div>\n    );\n  };\n\n  const renderTokens = (): React.ReactNode => {\n    if (tokens.length === 0) return null;\n\n    // Show only the first 10 tokens to avoid overwhelming the UI\n    const displayTokens = tokens.slice(0, 10);\n\n    return (\n      <div className=\"uii:space-y-2\">\n        <div className=\"uii:text-sm uii:font-semibold uii:text-gray-700\">\n          Tokens {tokens.length > 10 && `(${tokens.length} total)`}:\n        </div>\n        <div className=\"uii:flex uii:flex-wrap uii:gap-1\">\n          {displayTokens.map((token, index) => (\n            <span\n              key={index}\n              className={cn(\n                \"uii:px-1 uii:py-0.5 uii:rounded uii:text-xs uii:font-mono\",\n                token.type.includes('Keyword') && \"uii:bg-blue-100 uii:text-blue-800\",\n                token.type.includes('Identifier') && \"uii:bg-green-100 uii:text-green-800\",\n                token.type.includes('String') && \"uii:bg-yellow-100 uii:text-yellow-800\",\n                token.type.includes('Numeric') && \"uii:bg-purple-100 uii:text-purple-800\",\n                token.type.includes('Punctuation') && \"uii:bg-gray-100 uii:text-gray-800\",\n                \"uii:bg-gray-100 uii:text-gray-600\"\n              )}\n            >\n              {token.value}\n            </span>\n          ))}\n          {tokens.length > 10 && (\n            <span className=\"uii:px-1 uii:py-0.5 uii:rounded uii:text-xs uii:bg-gray-200 uii:text-gray-600\">\n              +{tokens.length - 10} more\n            </span>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  if (!ast) {\n    return (\n      <div className={cn(\"uii:text-gray-500 uii:text-sm uii:italic\", className)}>\n        No AST available\n      </div>\n    );\n  }\n\n  if (variant === 'inline') {\n    return (\n      <div className={cn(\"uii:inline-flex uii:items-center uii:gap-2\", className)}>\n        {renderInlineNode(ast)}\n      </div>\n    );\n  }\n\n  if (variant === 'compact') {\n    return (\n      <div className={cn(\"uii:space-y-2\", className)}>\n        <div className=\"uii:flex uii:flex-wrap uii:gap-1\">\n          {renderInlineNode(ast)}\n        </div>\n        {showTokens && renderTokens()}\n      </div>\n    );\n  }\n\n  // Tree variant\n  return (\n    <div className={cn(\"uii:space-y-3\", className)}>\n      <div className=\"uii:space-y-2\">\n        <div className=\"uii:text-sm uii:font-semibold uii:text-gray-700\">AST Tree:</div>\n        <div className=\"uii:p-3 uii:border uii:rounded-md uii:bg-gray-50 uii:max-h-64 uii:overflow-auto\">\n          {renderTreeNode(ast)}\n        </div>\n      </div>\n      {showTokens && renderTokens()}\n    </div>\n  );\n}\n","import React, {\n  useMemo,\n  useCallback,\n  useState,\n  cloneElement,\n  isValidElement,\n  useRef,\n  useEffect,\n} from 'react';\nimport { cn } from '../../lib/utils';\nimport {\n  useExpressionMode,\n  ExpressionModeControls,\n  ExpressionModeState,\n} from '../../hooks/useExpressionMode';\nimport {\n  InlineExpressionEditor,\n  FullPanelExpressionEditor,\n} from './ExpressionEditor';\nimport { ExpressionASTRenderer } from './ExpressionASTRenderer';\nimport { useASTParser } from '../../hooks/useASTParser';\nimport { ASTRenderer } from './ASTRenderer';\nimport clsx from 'clsx';\nimport { useExpressionModeStore } from '../../stores/expressionModeStore';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faChevronLeft,\n  faExpand,\n} from '@fortawesome/pro-regular-svg-icons';\n\n// Types that will come from your API via TRPC\nexport interface ExpressionContext {\n  [key: string]: any;\n}\n\nexport interface ExpressionResult {\n  value: any;\n  ast: ExpressionAST;\n  error?: string;\n  isValid: boolean;\n  validation: {\n    syntax: boolean;\n    expression: boolean;\n    context: boolean;\n    type?: boolean;\n    security?: boolean;\n  };\n}\n\nexport interface ExpressionAST {\n  kind: number;\n  color?: string;\n  left?: ExpressionAST;\n  right?: ExpressionAST;\n  name?: ExpressionAST;\n  argumentExpression?: ExpressionAST;\n  arguments?: ExpressionAST[];\n  expression?: ExpressionAST;\n  escapedText?: string;\n  text?: string;\n  operator?: string;\n  type?: string;\n}\n\nexport interface ExpressionMetadata {\n  expression: string;\n  mode: 'value' | 'expression';\n  value: any;\n  isEditing: boolean;\n  isFullScreen: boolean;\n}\n\nexport interface ExpressionWrapperProps<T = any> {\n  /** The label for the field */\n  label: string;\n  /** The type of the field */\n  type: string;\n  /** The actual value from the form field */\n  value: T | { expression: string; type: 'expression'; value: T };\n  /** Unique key for the field (used for debugging/logging) */\n  key: string;\n  /** Whether the values are loading */\n  valuesLoading?: boolean;\n  /** Callback when the value changes - second parameter contains expression metadata */\n  onValueChange: (\n    value: T | { expression: string; type: 'expression' },\n    metadata?: ExpressionMetadata\n  ) => void;\n  /** Callback when dependencies change - called with array of dependency names */\n  onDependenciesChange?: (dependencies: string[]) => void;\n  /** Current expression metadata (for controlled mode) */\n  metadata?: ExpressionMetadata;\n  /** Render prop function that receives control props */\n  children: (props: {\n\n    value: T;\n\n    onChange: (value: T) => void;\n\n    localInput: T,\n\n    setLocalInput: (value: T) => void;\n\n    expressionMode: ExpressionModeControls;\n\n    onExpressionClick: () => void; // Click handler to trigger expression mode\n\n    inferredType?: string; // TypeScript inferred type of the expression\n\n    hasTypeMismatch?: boolean; // Whether inferred type doesn't match expected type\n\n    hasError?: boolean; // Whether expression has syntax/validation errors\n\n  }) => React.ReactNode;\n  /** Unique field name for the field (used for debugging/logging) */\n  fieldName: string;\n  /** Available nodes for the expression */\n  availableNodes?: any;\n  /** My interface for the expression */\n  myInterface?: any;\n  /** Context variables available in expressions */\n  expressionContext?: ExpressionContext;\n  /** TypeScript type definitions for context variables (for better type inference) */\n  contextTypeDefinitions?: string;\n  /** Whether to use inline editor (default: true = looks like text input) */\n  inlineEditor?: boolean;\n  /** Custom className for the wrapper container */\n  className?: string;\n  /** Custom className for the editor container (when in editor mode) */\n  editorClassName?: string;\n  /** Custom placeholder for expression editor */\n  expressionPlaceholder?: string;\n  /** Function to evaluate expressions - can be TRPC mutation, mock, or any other method */\n  evaluateExpression?: (\n    expression: string,\n    context: ExpressionContext\n  ) => Promise<ExpressionResult>;\n  /** Result of expression evaluation (if parent manages evaluation) */\n  expressionResult?: ExpressionResult | null;\n  /** Whether expression is currently being evaluated (if parent manages evaluation) */\n  isEvaluating?: boolean;\n  /** Whether the current expression is valid (for validation states) */\n  isExpressionValid?: boolean;\n  /** Expected type for the property - used for type coercion validation */\n  expectedType?: 'string' | 'number' | 'boolean' | 'array' | 'object' | 'any';\n}\n\n/**\n * Safely evaluate JavaScript expressions with context\n * TODO: Add more security hardening, sandboxing, and error handling\n */\nfunction evaluateExpressionLocally(\n  expression: string,\n  context: ExpressionContext = {}\n): any {\n  try {\n    // Basic validation\n    if (!expression || typeof expression !== 'string') {\n      return null;\n    }\n\n    // TODO: Add expression validation/whitelist for security\n    // TODO: Add timeout for long-running expressions\n    // TODO: Add memory limits\n    // TODO: Add more comprehensive sandboxing\n\n    // Create a safe evaluation context\n    const safeContext = {\n      ...context,\n      // Add common utility functions\n      Math,\n      Date,\n      JSON,\n      // Add safe array methods\n      Array,\n      // Add safe string methods\n      String,\n      // Add safe number methods\n      Number,\n      // Add safe boolean methods\n      Boolean,\n      // Add safe object methods\n      Object,\n    };\n\n    // Create function with context\n    const func = new Function(\n      ...Object.keys(safeContext),\n      `\"use strict\"; return (${expression});`\n    );\n\n    const result = func(...Object.values(safeContext));\n\n    // TODO: Add result validation and sanitization\n    return result;\n  } catch (error) {\n    console.warn('Expression evaluation failed:', error);\n    // TODO: Add better error reporting and user feedback\n    return null;\n  }\n}\n\n// Validate expression locally for different validation classes\nfunction validateExpressionLocally(\n  expression: string,\n  context: ExpressionContext = {},\n  expectedType: string = 'any'\n): {\n  syntax: boolean;\n  expression: boolean;\n  context: boolean;\n  type: boolean;\n  security: boolean;\n} {\n  const validation = {\n    syntax: true,\n    expression: true,\n    context: true,\n    type: true,\n    security: true,\n  };\n\n  try {\n    // Syntax validation - check if it's valid JavaScript\n    new Function(expression);\n    validation.syntax = true;\n  } catch (error) {\n    validation.syntax = false;\n    return validation; // If syntax is invalid, other validations don't matter\n  }\n\n  try {\n    // Expression validation - check if it's an expression (not a statement)\n    // This is a simple heuristic - expressions typically don't start with keywords\n    const trimmed = expression.trim();\n    const statementKeywords = [\n      'var',\n      'let',\n      'const',\n      'function',\n      'class',\n      'if',\n      'for',\n      'while',\n      'return',\n      'throw',\n    ];\n    validation.expression = !statementKeywords.some((keyword) =>\n      trimmed.startsWith(keyword)\n    );\n  } catch (error) {\n    validation.expression = false;\n  }\n\n  try {\n    // Context validation - check if referenced variables exist in context\n    const contextKeys = Object.keys(context);\n    const variableRegex = /\\b[a-zA-Z_$][a-zA-Z0-9_$]*\\b/g;\n    const matches = expression.match(variableRegex) || [];\n    const referencedVars = Array.from(new Set(matches));\n\n    // Filter out JavaScript built-ins and keywords\n    const jsBuiltins = [\n      'true',\n      'false',\n      'null',\n      'undefined',\n      'this',\n      'new',\n      'typeof',\n      'instanceof',\n    ];\n    const userVars = referencedVars.filter((v) => !jsBuiltins.includes(v));\n\n    validation.context = userVars.every((v) => contextKeys.includes(v));\n  } catch (error) {\n    validation.context = false;\n  }\n\n  // Type validation - check if expression result can be coerced to expected type\n  try {\n    const evaluated = evaluateExpressionLocally(expression, context);\n    validation.type =\n      evaluated !== null\n        ? validateTypeCoercion(evaluated, expectedType)\n        : false;\n  } catch (error) {\n    validation.type = false;\n  }\n\n  // Security validation - check for dangerous operations\n  const dangerousPatterns = [\n    /eval\\s*\\(/,\n    /Function\\s*\\(/,\n    /setTimeout\\s*\\(/,\n    /setInterval\\s*\\(/,\n    /import\\s*\\(/,\n    /require\\s*\\(/,\n  ];\n  validation.security = !dangerousPatterns.some((pattern) =>\n    pattern.test(expression)\n  );\n\n  return validation;\n}\n\n// Validate if a value can be coerced to the expected type\nfunction validateTypeCoercion(value: any, expectedType: string): boolean {\n  if (expectedType === 'any') return true;\n\n  try {\n    switch (expectedType) {\n      case 'string':\n        // Most values can be coerced to string\n        return value !== null && value !== undefined;\n\n      case 'number':\n        // Check if value can be converted to a valid number\n        if (typeof value === 'number') return !isNaN(value);\n        if (typeof value === 'string') {\n          const num = Number(value);\n          return !isNaN(num) && isFinite(num);\n        }\n        if (typeof value === 'boolean') return true; // true -> 1, false -> 0\n        return false;\n\n      case 'boolean':\n        // Most values can be coerced to boolean\n        return true; // JavaScript's truthy/falsy conversion\n\n      case 'array':\n        // Check if value is already an array or can be converted\n        if (Array.isArray(value)) return true;\n        if (typeof value === 'string') return true; // String can be split into array\n        if (typeof value === 'object' && value !== null) return true; // Object can be Object.entries()\n        return false;\n\n      case 'object':\n        // Check if value is an object or can be converted\n        if (typeof value === 'object' && value !== null) return true;\n        if (typeof value === 'string') return true; // String can be parsed as JSON\n        if (typeof value === 'number' || typeof value === 'boolean')\n          return true; // Can be wrapped in object\n        return false;\n\n      default:\n        return true;\n    }\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * ExpressionWrapper - Wraps any control with expression capabilities\n *\n * This component provides three modes:\n * 1. Value mode: Shows the wrapped control normally\n * 2. Expression mode: Shows the evaluated expression result\n * 3. Editor mode: Shows the Monaco editor for editing expressions\n */\nexport function ExpressionWrapper<T = any>({\n  label,\n  value,\n  type,\n  valuesLoading = false,\n  key,\n  onValueChange,\n  onDependenciesChange,\n  metadata,\n  children,\n  fieldName,\n  expressionContext = {},\n  availableNodes,\n  myInterface,\n  contextTypeDefinitions,\n  inlineEditor = true,\n  className,\n  editorClassName,\n  expressionPlaceholder = 'Enter expression...',\n  evaluateExpression,\n  expressionResult,\n  isEvaluating = false,\n  isExpressionValid = true,\n  expectedType = 'any',\n}: ExpressionWrapperProps<T>) {\n  // Internal state to track expression metadata (preserves expression when switching modes)\n  const [expressionMetadata, setExpressionMetadata] =\n    useState<ExpressionMetadata>(\n      () => {\n        // On initial load, always start in value mode (not editing)\n        // Even if metadata says isEditing: true, that's stale state from previous session\n        const initialMetadata = metadata || {\n          expression: '',\n          mode: 'value',\n          isEditing: false,\n          isFullScreen: false,\n          value: undefined,\n        };\n\n        // Force isEditing and isFullScreen to false on initial load\n        return {\n          ...initialMetadata,\n          isEditing: false,\n          isFullScreen: false,\n          mode: 'value', // Always start in value mode\n        };\n      }\n    );\n\n  // Track the original value before any expression was set\n  const [originalValue, setOriginalValue] = useState<T>(\n    value &&\n      typeof value === 'object' &&\n      'expression' in value &&\n      'type' in value &&\n      value.type === 'expression'\n      ? value.value\n      : (value as T)\n  );\n  const [currentValue, setCurrentValue] = useState<T>(\n    value &&\n      typeof value === 'object' &&\n      'expression' in value &&\n      'type' in value &&\n      value.type === 'expression'\n      ? value.value\n      : (value as T)\n  );\n\n  const formatValue = useCallback((value: T | unknown) => {\n\n    switch (type) {\n      case \"float\":\n        {\n          return (typeof value === \"string\") && !isNaN(parseFloat(value as string)) ? parseFloat(value as string) : value\n        }\n      case \"integer\":\n      case \"number\":\n        {\n          return (typeof value === \"string\") && !isNaN(parseInt(value as string)) ? parseInt(value as string) : value\n          break\n        }\n      case \"string[]\":\n        {\n          return (typeof value === \"string\") ? (value as string).split(',') : value as T\n          break\n        }\n      case \"string\":\n      default:\n        {\n          return value as T\n        }\n    }\n  }, [type])\n\n  const [currentEditorValue, setCurrentEditorValue] = useState<string>();\n\n  const currentExpressionValueExt = useExpressionModeStore\n    .getState()\n    .getState(fieldName).expression;\n\n  // Update internal metadata when external metadata changes\n  useEffect(() => {\n    if (metadata) {\n      // When receiving external metadata updates, preserve editing state but\n      // don't automatically enter editing mode on initial load\n      setExpressionMetadata({\n        ...metadata,\n        // Don't restore editing/fullscreen state from metadata\n        // User needs to explicitly click to edit\n        isEditing: false,\n        isFullScreen: false,\n      });\n    }\n  }, [metadata]);\n\n  // Detect if incoming value is an expression object\n  const isExpressionValue = useMemo(() => {\n    return (\n      value &&\n      typeof value === 'object' &&\n      'expression' in value &&\n      'type' in value &&\n      value.type === 'expression'\n    );\n  }, [value]);\n\n  // Track if this is the initial mount\n  const isInitialMount = useRef(true);\n\n  useEffect(() => {\n\n\n    if (\n      value &&\n      typeof value === 'object' &&\n      'expression' in value &&\n      'type' in value &&\n      value.type === 'expression'\n    ) {\n      // Expression object detected\n      const exprValue = (value as any).value;\n      const exprString = (value as any).expression;\n\n      // Set the current value (the evaluated result to display)\n      if (exprValue !== undefined) {\n        setCurrentValue(formatValue(exprValue) as T);\n        setOriginalValue(formatValue(exprValue) as T);\n      }\n\n      // Set the expression in the store AND switch to expression mode (non-editing)\n      // This ensures the expression display is shown\n      if (exprString && expressionMode.expression !== exprString) {\n        expressionMode.setExpression(exprString);\n        // Only switch to expression mode on initial load, not during editing\n        if (isInitialMount.current && !expressionMode.isEditing) {\n          expressionMode.switchToExpression();\n        }\n      }\n\n      // On initial load, sync metadata to match the expression in the value\n      // Check if metadata is out of sync\n      const isMetadataOutOfSync =\n        !metadata ||\n        metadata.expression !== exprString ||\n        metadata.mode === 'value' ||  // If value has expression but mode is 'value', it's out of sync\n        metadata.isEditing === true ||  // Should never start editing on load\n        metadata.isFullScreen === true; // Should never start full-screen on load\n\n      if (isInitialMount.current && isMetadataOutOfSync) {\n        const syncedMetadata: ExpressionMetadata = {\n          expression: exprString || '',\n          value: formatValue(exprValue),\n          mode: 'expression', // Show expression display (not editing)\n          isEditing: false,\n          isFullScreen: false,\n        };\n\n        // Use setTimeout to avoid calling onValueChange during render\n        setTimeout(() => {\n          onValueChange(value, { ...syncedMetadata, value: formatValue(value) });\n        }, 0);\n      }\n    } else {\n      // Regular value (not an expression object)\n      if (!valuesLoading) {\n        setCurrentValue(formatValue(value) as T);\n        setOriginalValue(formatValue(value) as T);\n\n        // Sync metadata - clear any expression metadata since we have a plain value\n        if (isInitialMount.current && (metadata?.expression || metadata?.mode === 'expression')) {\n          const syncedMetadata: ExpressionMetadata = {\n            expression: '',\n            value: formatValue(value),\n            mode: 'value',\n            isEditing: false,\n            isFullScreen: false,\n          };\n\n          // Use setTimeout to avoid calling onValueChange during render\n          setTimeout(() => {\n            onValueChange(formatValue(value) as T, { ...syncedMetadata, value: formatValue(value) });\n          }, 0);\n        }\n      }\n    }\n\n    // Mark that initial mount is complete after a short delay\n    if (isInitialMount.current) {\n      setTimeout(() => {\n        isInitialMount.current = false;\n      }, 100);\n    }\n  }, [value, valuesLoading]);\n\n  // Update metadata when value changes to/from expression\n  // useEffect(() => {\n  //   if (isExpressionValue) {\n  //     // Value is an expression object, switch to expression mode\n  //     const newMetadata: ExpressionMetadata = {\n  //       expression: (value as any).expression,\n  //       mode: 'expression',\n  //       isEditing: false\n  //     };\n  //     setExpressionMetadata(newMetadata);\n  //   } else if (expressionMetadata.mode === 'value') {\n  //     // This is a regular value and we're in value mode, update original value\n  //     setOriginalValue(value);\n  //   }\n  // }, [value, isExpressionValue, expressionMetadata.mode]);\n\n  // Convert internal metadata to ExpressionModeState format\n  // const externalState: ExpressionModeState = {\n  //   expression: expressionMetadata.expression,\n  //   mode: expressionMetadata.mode,\n  //   isEditing: expressionMetadata.isEditing,\n  //   isFullScreen: expressionMetadata.isFullScreen,\n  //   currentValue: value\n  // };\n\n  // // Handle state changes by updating internal metadata and parent\n  // const handleStateChange = useCallback((newState: ExpressionModeState) => {\n\n  //   // const newMetadata: ExpressionMetadata = {\n  //   //   expression: newState.expression,\n  //   //   mode: newState.mode,\n  //   //   isEditing: newState.isEditing\n  //   // };\n\n  //   // // Update internal state\n  //   // setExpressionMetadata(newMetadata);\n\n  //   // // Notify parent\n  //   // onValueChange(value, newMetadata);\n\n  //   console.log(\"handleStateChange called with:\", newState);\n\n  // }, [onValueChange, value]);\n\n  const expressionMode = useExpressionMode(fieldName);\n\n  // Parse expression and extract AST + dependencies\n  const {\n    ast,\n    tokens,\n    dependencies,\n    isLoading: isParsing,\n    error: parseError,\n  } = useASTParser(expressionMode.expression, fieldName);\n\n  // Memoized dependency list with additional metadata\n  const dependencyList = useMemo(() => {\n    if (!ast || dependencies.length === 0) {\n      return [];\n    }\n\n    // Create a structured list of dependencies with metadata\n    // The service worker now filters out built-in methods properly\n    return dependencies.map((dep) => ({\n      name: dep,\n      exists: expressionContext ? dep in expressionContext : false,\n      value: expressionContext ? expressionContext[dep] : undefined,\n    }));\n  }, [dependencies, expressionContext, ast]);\n\n  // Store TypeScript type information from Monaco editor\n  const [typeScriptInferredType, setTypeScriptInferredType] = useState<string | null>(null);\n\n  // Callback to receive type information from the editor\n  const handleTypeInferred = useCallback((type: string) => {\n    setTypeScriptInferredType(type);\n  }, []);\n\n  // Type inference is now handled directly by the editors (inline and full-screen)\n  // No need for the legacy async approach - editors call handleTypeInferred callback\n\n  // Check if expression contains newlines - if so, we should use full-screen editor\n  const expressionHasNewlines = useMemo(() => {\n    return expressionMode.expression.includes('\\n') || expressionMode.expression.includes('\\r');\n  }, [expressionMode.expression]);\n\n  // Use TypeScript-based type inference from Monaco (always available)\n  const inferredReturnType = useMemo(() => {\n    // Monaco's TypeScript language service provides accurate type inference\n    return typeScriptInferredType || 'unknown';\n  }, [typeScriptInferredType]);\n\n  // Check if inferred type matches the expected type prop\n  const hasTypeMismatch = useMemo(() => {\n    // Don't show type mismatch if there's an error or unknown type\n    if (!inferredReturnType || inferredReturnType === 'unknown' || inferredReturnType === 'any' || inferredReturnType === 'error') {\n      return false;\n    }\n\n    // Normalize types for comparison\n    const normalizedInferred = inferredReturnType.toLowerCase().trim();\n    const normalizedExpected = (type || expectedType || 'any').toLowerCase().trim();\n\n    // Handle array types: 'string[]' should match 'array'\n    if (normalizedExpected === 'array' && normalizedInferred.endsWith('[]')) {\n      return false; // Not a mismatch\n    }\n\n    // Handle exact matches\n    if (normalizedInferred === normalizedExpected) {\n      return false; // Not a mismatch\n    }\n\n    // If expected type is 'any', never a mismatch\n    if (normalizedExpected === 'any') {\n      return false;\n    }\n\n    // Handle TypeScript literal types - they're compatible with their base type\n    // String literals: \"adam\" is compatible with string\n    if (normalizedExpected === 'string' &&\n      (normalizedInferred.startsWith('\"') || normalizedInferred.startsWith(\"'\"))) {\n      return false; // String literal is compatible with string\n    }\n\n    // Number literals: 123, 123.45, 10e3, etc. are compatible with number\n    if (normalizedExpected === 'number' && /^-?\\d+(\\.\\d+)?([eE][+-]?\\d+)?$/.test(normalizedInferred)) {\n      return false; // Number literal is compatible with number\n    }\n\n    // Integer literals: 123, 10e3, etc. are compatible with integer\n    if (normalizedExpected === 'integer' && /^-?\\d+(\\.\\d+)?([eE][+-]?\\d+)?$/.test(normalizedInferred)) {\n      return false; // Number literal is compatible with integer\n    }\n\n    // Number type is compatible with integer (Monaco might infer \"number\" for integers)\n    if (normalizedExpected === 'integer' && normalizedInferred === 'number') {\n      return false; // Number is compatible with integer\n    }\n\n    // Float literals: 123.45, 10e3, etc. are compatible with float\n    if (normalizedExpected === 'float' && /^-?\\d+(\\.\\d+)?([eE][+-]?\\d+)?$/.test(normalizedInferred)) {\n      return false; // Number literal is compatible with float\n    }\n\n    // Number type is compatible with float\n    if (normalizedExpected === 'float' && normalizedInferred === 'number') {\n      return false; // Number is compatible with float\n    }\n\n    // Boolean literals: true/false is compatible with boolean\n    if (normalizedExpected === 'boolean' &&\n      (normalizedInferred === 'true' || normalizedInferred === 'false')) {\n      return false; // Boolean literal is compatible with boolean\n    }\n\n    // Otherwise, there's a mismatch\n    return true;\n  }, [inferredReturnType, type, expectedType]);\n\n  // Internal state for expression evaluation (when wrapper handles it)\n  const [internalExpressionResult, setInternalExpressionResult] =\n    useState<ExpressionResult | null>(null);\n  const [internalIsEvaluating, setInternalIsEvaluating] = useState(false);\n\n  // Hover state for expression preview\n  const [isHovering, setIsHovering] = useState(false);\n\n  // Internal Monaco validation state\n  const [internalIsExpressionValid, setInternalIsExpressionValid] =\n    useState(true);\n\n  // Detailed validation state for different validation classes\n  const [validationState, setValidationState] = useState({\n    syntax: true,\n    expression: true,\n    context: true,\n    type: true,\n    security: true,\n  });\n\n  // Check if expression has any errors\n  const hasExpressionError = useMemo(() => {\n    // No expression = no error\n    if (!expressionMode.expression || !expressionMode.expression.trim()) {\n      return false;\n    }\n\n    // Check Monaco validation errors\n    if (!internalIsExpressionValid || !isExpressionValid) {\n      return true;\n    }\n\n    // Check AST parsing errors\n    if (parseError) {\n      return true;\n    }\n\n    // Check validation state\n    if (!validationState.syntax || !validationState.expression) {\n      return true;\n    }\n\n    // Check if there's an evaluation error\n    if (expressionResult?.error || internalExpressionResult?.error) {\n      return true;\n    }\n\n    return false;\n  }, [\n    expressionMode.expression,\n    internalIsExpressionValid,\n    isExpressionValid,\n    parseError,\n    validationState,\n    expressionResult,\n    internalExpressionResult\n  ]);\n\n  // Track if we should use full editor (when expression becomes multi-line)\n  // const [shouldUseFullEditor, setShouldUseFullEditor] = useState(false);\n\n  // Track if we're programmatically clearing to prevent blur handler from firing\n  const isProgrammaticallyClearing = useRef(false);\n\n  // Track if we're switching to full-screen to prevent blur handler from firing\n  const isSwitchingToFullScreen = useRef(false);\n\n  // Track if we're programmatically clearing to prevent blur handler from firing\n  const isBlur = useRef(false);\n\n  // Handle Monaco validation changes\n  const handleValidationChange = useCallback(\n    (isValid: boolean, errors: any[]) => {\n      setInternalIsExpressionValid(isValid);\n\n      // Update syntax validation (Monaco's built-in validation)\n      setValidationState((prev) => ({\n        ...prev,\n        syntax: isValid,\n      }));\n    },\n    []\n  );\n\n  // Check if expression content requires full editor\n  const checkForMultiLine = useCallback(\n    (expression: string) => {\n      const hasNewlines = expression.includes('\\n');\n      const isLong = expression.length > 80; // Arbitrary threshold for \"long\" expressions\n      if (!expressionMode.isFullScreen) {\n        expressionMode.setFullScreen(hasNewlines || isLong);\n      }\n    },\n    [expressionMode.isFullScreen]\n  );\n\n  // Internal evaluation function\n  const internalEvaluateExpression = useCallback(\n    async (expression: string, context: ExpressionContext) => {\n      if (!evaluateExpression || !expression.trim()) return;\n\n      setInternalIsEvaluating(true);\n      try {\n        const result = await evaluateExpression(expression, context);\n        setInternalExpressionResult(result);\n      } catch (error) {\n        // console.error('Expression evaluation failed:', error);\n        setInternalExpressionResult({\n          value: null,\n          ast: { kind: 0, text: '', color: '#ff0000' },\n          error: error instanceof Error ? error.message : 'Unknown error',\n          isValid: false,\n          validation: {\n            syntax: false,\n            expression: false,\n            context: false,\n            type: false,\n            security: false,\n          },\n        });\n      } finally {\n        setInternalIsEvaluating(false);\n      }\n    },\n    [evaluateExpression]\n  );\n\n  // TODO: Add error boundary for expression evaluation\n  // TODO: Add loading states for complex expressions\n  // TODO: Add validation for fieldName uniqueness\n\n  // Evaluate expression and determine current value\n  // const currentValue = useMemo(() => {\n\n  //   if (expressionMode.isExpressionMode && expressionMode.expression) {\n  //     // If we have an expression result (from parent or internal), use it\n  //     // const result = expressionResult || internalExpressionResult;\n  //     // if (result?.isValid) {\n  //     //   return result.value;\n  //     // }\n\n  //     // // Use stored currentValue from metadata if available\n  //     // if (expressionMode.currentValue !== undefined) {\n  //     //   return expressionMode.currentValue;\n  //     // }\n\n  //     // Fallback to local evaluation\n  //     // try {\n  //     //   const evaluated = evaluateExpressionLocally(expressionMode.expression, expressionContext);\n  //     //   return evaluated !== null ? evaluated : value;\n  //     // } catch (error) {\n  //     //   console.warn('Expression evaluation failed:', error);\n  //     //   return value;\n  //     // }\n  //     return currentExpressionValueExt;\n\n  //   }\n\n  //   return originalValue || value;\n\n  // }, [expressionMode.isExpressionMode, expressionMode.expression, expressionMode.currentValue, expressionContext, value, expressionResult, internalExpressionResult]);\n\n  const currentMetadata = useMemo(() => {\n    return {\n      expression: expressionMode.expression,\n      value: currentValue,\n      mode: expressionMode.current,\n      isEditing: expressionMode.isEditing,\n      isFullScreen: expressionMode.isFullScreen,\n    };\n  }, [\n    expressionMode.expression,\n    expressionMode.current,\n    expressionMode.isFullScreen,\n    expressionMode.isEditing,\n    currentValue,\n  ]);\n\n  const currentExpressionValue = useMemo(() => {\n    return { expression: expressionMode.expression, type: 'expression' };\n  }, [expressionMode.currentValue || expressionMode.expression]);\n\n  // Handle value changes from wrapped control\n  const handleValueChange = useCallback(\n    (newValue: T) => {\n      // Only pass metadata if we're in expression mode OR if the new value is an expression\n\n      // const currentMetadata: ExpressionMetadata | undefined =\n\n      // (expressionMode.current === 'value' && !isExpressionValue) ? undefined : {\n      //     expression: expressionMode.expression,\n      //     mode: expressionMode.current,\n      //     isEditing: expressionMode.isEditing\n      //   };\n\n      // console.log(\"handleValueChange called with:\", { newValue: newValue, currentMetadata: currentMetadata });\n      onValueChange(formatValue(newValue) as T, { ...currentMetadata, value: formatValue(newValue) });\n    },\n    [onValueChange, expressionMode, isExpressionValue, currentValue]\n  );\n\n  // // Handle onChange events (for controls that pass events)\n  // const handleChange = useCallback((event: any) => {\n  //   // const currentMetadata: ExpressionMetadata = {\n  //   //   expression: expressionMode.expression,\n  //   //   mode: expressionMode.current,\n  //   //   isEditing: expressionMode.isEditing\n  //   // };\n\n  //   if (event && event.target && typeof event.target.value !== 'undefined') {\n  //     // Handle input change events\n  //     onValueChange(event.target.value as T, currentMetadata);\n  //   } else if (typeof event === 'boolean') {\n  //     // Handle switch/checkbox events\n  //     onValueChange(event as T, currentMetadata);\n  //   } else {\n  //     // Handle direct value changes\n  //     onValueChange(event as T, currentMetadata);\n  //   }\n  // }, [onValueChange, expressionMode]);\n\n  // Handle expression changes\n  const handleExpressionChange = useCallback(\n    (newExpression: string) => {\n      // console.log(\"handleExpressionChange\", newExpression);\n      // console.log(\"Current expressionMode.expression before set:\", expressionMode.expression);\n\n      // Reset the clearing flag when expression changes (user is typing)\n      isProgrammaticallyClearing.current = false;\n\n      expressionMode.setExpression(newExpression);\n      setCurrentEditorValue(newExpression);\n      // console.log(\"Current expressionMode.expression after set:\", expressionMode.expression);\n\n      // Check if content requires full editor\n      checkForMultiLine(newExpression);\n\n      // Update validation state for local validation\n      // const localValidation = validateExpressionLocally(newExpression, expressionContext, expectedType);\n      // setValidationState(localValidation);\n\n      // // If wrapper handles evaluation internally, trigger it\n      // if (evaluateExpression) {\n      //   internalEvaluateExpression(newExpression, expressionContext);\n      // }\n\n      // console.log(\"handleExpressionChange calling onValueChange with:\", { expression: newExpression, type: 'expression' });\n\n      onValueChange({ expression: newExpression, type: 'expression' } as T, {\n        ...currentMetadata,\n        expression: newExpression,\n      });\n\n      // If in expression mode, update the actual value (fallback to local evaluation)\n      // if (expressionMode.isExpressionMode && !evaluateExpression) {\n      //   try {\n      //     const evaluated = evaluateExpressionLocally(newExpression, expressionContext);\n      //     if (evaluated !== null) {\n      //       // Store the evaluated value in metadata state\n      //       expressionMode.setCurrentValue(evaluated);\n\n      //       const currentMetadata: ExpressionMetadata = {\n      //         expression: newExpression,\n      //         mode: expressionMode.current,\n      //         isEditing: expressionMode.isEditing\n      //       };\n      //       onValueChange(evaluated, currentMetadata);\n      //     }\n      //   } catch (error) {\n      //     // Keep current value\n      //   }\n      // }\n    },\n    [\n      expressionMode,\n      expressionContext,\n      onValueChange,\n      evaluateExpression,\n      internalEvaluateExpression,\n      checkForMultiLine,\n    ]\n  );\n\n  // Handle expression editor blur - switch to expression mode and update value if needed\n  const handleExpressionBlur = useCallback(\n    async (e?: any, forceBlur = false) => {\n\n      // If we're programmatically clearing, don't execute blur logic\n      if (isProgrammaticallyClearing.current) {\n        isProgrammaticallyClearing.current = false;\n        return;\n      }\n\n      // If we're switching to full-screen, don't execute blur logic\n      if (isSwitchingToFullScreen.current) {\n        isSwitchingToFullScreen.current = false;\n        return;\n      }\n\n      // Don't process blur if in full-screen mode (multi-line editing)\n      // UNLESS this is a forced blur (like clicking the X button)\n      if (expressionMode.isFullScreen && !forceBlur) {\n        return;\n      }\n\n      // Don't process blur if expression has newlines (should be in full-screen)\n      // UNLESS this is a forced blur\n      if (expressionHasNewlines && !forceBlur) {\n        return;\n      }\n\n      isBlur.current = true;\n\n      expressionMode.setEditing(false);\n      expressionMode.setFullScreen(false);\n\n      // console.log(\"handleExpressionBlur called\", { currentExpressionValue: currentExpressionValue, currentEditorValue: currentEditorValue, currentExpressionValueExt: currentExpressionValueExt });\n\n      // Reset full editor flag since we're leaving editor mode\n    },\n    [\n      expressionMode,\n      expressionResult,\n      internalExpressionResult,\n      expressionContext,\n      onValueChange,\n      currentValue,\n      isEvaluating,\n      internalIsEvaluating,\n      currentExpressionValue,\n      expressionHasNewlines,\n    ]\n  );\n\n  useEffect(() => {\n    onValueChange(currentValue as T, {\n      ...currentMetadata,\n      isFullScreen: expressionMode.isFullScreen,\n    });\n  }, [expressionMode.isFullScreen]);\n\n  // Auto-switch to full-screen mode if newlines are detected while editing\n  useEffect(() => {\n    if (expressionMode.isEditing && expressionHasNewlines && !expressionMode.isFullScreen) {\n      expressionMode.setFullScreen(true);\n    }\n  }, [expressionHasNewlines, expressionMode.isEditing, expressionMode.isFullScreen]);\n\n  // // Auto-switch to value mode if expression becomes empty after blur\n  // useEffect(() => {\n  //   // Only check when blur just happened\n  //   if (isBlur.current) {\n  //     isBlur.current = false; // Reset the flag\n\n  //     // If expression is empty or only whitespace, switch to value mode\n  //     if (!expressionMode.expression || !expressionMode.expression.trim()) {\n  //       console.log('Expression is empty after blur - switching to value mode');\n  //       expressionMode.switchToValue();\n  //     }\n  //   }\n  // }, [expressionMode.isEditing]); // Trigger when isEditing changes (blur sets it to false)\n\n  const handleModeChange = useCallback(\n    (newMode: 'value' | 'expression' | 'editor') => {\n      switch (newMode) {\n        case 'value':\n          // When switching to value mode, update the original value to current value\n          // setOriginalValue(currentValue);\n\n          expressionMode.switchToValue();\n\n          expressionMode.setFullScreen(false); // Reset full editor flag\n\n          // Update form state with the actual value (not expression object)\n          onValueChange(originalValue || value, undefined);\n          break;\n        case 'editor':\n          // setOriginalValue(currentValue);\n          expressionMode.switchToEditor();\n\n          // If expression has newlines, automatically go to full-screen\n          const shouldBeFullScreen = expressionHasNewlines;\n          if (shouldBeFullScreen) {\n            expressionMode.setFullScreen(true);\n          }\n\n          // Update metadata to reflect editing state\n          const editorMetadata: ExpressionMetadata = {\n            expression: expressionMode.expression,\n            value: currentValue,\n            mode: 'expression',\n            isEditing: true,\n            isFullScreen: shouldBeFullScreen,\n          };\n\n          // Notify parent that editing started\n          onValueChange(\n            expressionMode.expression\n              ? { expression: expressionMode.expression, type: 'expression' } as T\n              : currentValue as T,\n            editorMetadata\n          );\n          break;\n        case 'expression':\n          // Store the current value before switching to expression mode\n          setOriginalValue(currentValue);\n\n          expressionMode.switchToExpression();\n\n          // If expression has newlines, automatically go to full-screen when editing\n          if (expressionHasNewlines) {\n            expressionMode.setFullScreen(true);\n          }\n\n          // break;\n          // expressionMode.switchToEditor();\n\n          break;\n      }\n    },\n    [expressionMode, currentValue, onValueChange, expressionHasNewlines, originalValue, value]\n  );\n\n  useEffect(() => {\n    // This is for blur detection ... it seems to work quite a bit better than the onBlur event as long\n    // as we use the onBlur event to trigger out of editing mode we can watch for that and update values\n    // accordinly\n    // if (\n    //   !expressionMode.isEditing &&\n    //   !(expressionMode.expression && expressionMode.expression.trim())\n    // ) {\n    //   expressionMode.switchToValue();\n    // }\n    if (isBlur.current) {\n      if (!(expressionMode.expression && expressionMode.expression.trim())) {\n        expressionMode.switchToValue();\n        onValueChange(currentMetadata.value ?? '' as T, {\n          ...currentMetadata,\n          mode: 'value',\n          expression: '',\n          isEditing: false,\n          isFullScreen: false,\n        });\n      } else {\n        onValueChange(\n          currentMetadata.mode === 'value'\n            ? (currentMetadata.value ?? '' as T)\n            : ({\n              expression: currentMetadata.expression.trim(),\n              type: 'expression',\n            } as T),\n          { ...currentMetadata, isEditing: false, isFullScreen: false }\n        );\n      }\n      isBlur.current = false;\n    }\n  }, [expressionMode.isEditing, expressionMode.isFullScreen, isBlur.current]);\n\n  // Notify parent when dependencies change\n  useEffect(() => {\n    if (onDependenciesChange) {\n      onDependenciesChange(dependencies);\n    }\n  }, [dependencies, onDependenciesChange]);\n\n  // Handle clear\n  const handleClear = useCallback(() => {\n    // Set flag to prevent blur handler from executing\n    isProgrammaticallyClearing.current = true;\n\n    // const currentMetadata: ExpressionMetadata = {\n    //   expression: '',\n    //   mode: 'value',\n    //   isEditing: false\n    // };\n\n    // Return to the original value when clearing the expression\n    onValueChange(currentValue as T, currentMetadata);\n    handleModeChange('value');\n    // expressionMode.clear();\n    expressionMode.setFullScreen(false); // Reset full editor flag\n  }, [onValueChange, expressionMode, originalValue]);\n\n\n  const [localInput, setLocalInput] = useState(currentValue);\n\n  useEffect(() => {\n\n    setLocalInput(currentValue)\n\n  }, [currentValue])\n\n  // Create control props for render prop pattern\n  const controlProps = useMemo(\n    () => ({\n      value: currentValue as T,\n      onChange: handleValueChange,\n      onExpressionClick: () => handleModeChange('editor'), // Click handler to trigger expression mode\n      inferredType: inferredReturnType, // Inferred TypeScript type\n      hasTypeMismatch: hasTypeMismatch, // Whether inferred type matches expected\n      hasError: hasExpressionError, // Whether expression has syntax/validation errors\n      localInput,\n      setLocalInput,\n      expressionMode: {\n        current: expressionMode.current,\n        switchToValue: () => handleModeChange('value'),\n        switchToExpression: () => handleModeChange('expression'),\n        switchToEditor: () => handleModeChange('editor'),\n        clear: handleClear,\n        isExpressionMode: expressionMode.isExpressionMode,\n        isEditorMode: expressionMode.isEditorMode,\n        expression: expressionMode.expression,\n        setExpression: handleExpressionChange,\n        isEditing: expressionMode.isEditing,\n        setEditing: expressionMode.setEditing,\n        isFullScreen: expressionMode.isFullScreen,\n        setFullScreen: expressionMode.setFullScreen,\n      } as ExpressionModeControls,\n    }),\n    [\n      currentValue,\n      handleValueChange,\n      expressionMode,\n      handleModeChange,\n      handleClear,\n      handleExpressionChange,\n      inferredReturnType,\n      hasTypeMismatch,\n      hasExpressionError,\n    ]\n  );\n\n  // Render based on current mode\n  const renderContent = () => {\n    switch (expressionMode.current) {\n      // case 'value':\n      //   return children(controlProps);\n\n      case 'expression':\n        // Determine what to show based on state\n        const hasExpression =\n          expressionMode.expression && expressionMode.expression.trim();\n        const hasValidAST = (expressionResult || internalExpressionResult)\n          ?.isValid;\n        const isValidExpression =\n          isExpressionValid && internalIsExpressionValid;\n\n        // If no expression is set, automatically switch back to value mode\n        // if (!hasExpression) {\n        //   console.log('Expression mode render: no expression, switching to value mode', {\n        //     expression: expressionMode.expression,\n        //     hasExpression,\n        //     currentMode: expressionMode.current\n        //   });\n        //   // Use setTimeout to avoid state update during render\n        //   setTimeout(() => {\n        //     expressionMode.switchToValue();\n        //     // Clear the expression from metadata when switching to value mode due to empty expression\n        //     const clearedMetadata: ExpressionMetadata = {\n        //       expression: '',\n        //       mode: 'value',\n        //       isEditing: false\n        //     };\n        //     onValueChange(value, clearedMetadata);\n        //   }, 0);\n        //   // Return value mode content while switching\n        //   return children(controlProps);\n        // }\n\n        return controlProps.expressionMode.isEditing ? (\n          <div key={`${key}-expression`} className={cn('relative', className)}>\n            {inlineEditor && !expressionMode.isFullScreen && !expressionHasNewlines ? (\n              <div\n                className={cn(\n                  `uii:flex uii:h-9 uii:w-full \n              uii:min-w-0 uii:rounded-sm \n              uii:border uii:border-ring \n              uii:bg-background uii:px-3 uii:py-1 uii:text-base uii:shadow-xs \n              uii:ring-ring/50 uii:ring-[3px] uii:transition-[color,box-shadow] \n              uii:outline-none uii:md:text-sm uii:cursor-pointer\n              uii:mt-0.5 `,\n                  editorClassName\n                )}\n              >\n                <InlineExpressionEditor\n                  value={expressionMode.expression}\n                  onChange={(newValue) => {\n                    // console.log(\"InlineExpressionEditor onChange called with:\", newValue);\n                    handleExpressionChange(newValue);\n                  }}\n                  onEnter={() => {\n                    // Switch to full-screen mode instead of blurring\n                    // Set flag to prevent blur handler from closing the editor\n                    isSwitchingToFullScreen.current = true;\n                    expressionMode.setFullScreen(true);\n\n                    // Reset flag after a short delay in case blur doesn't fire\n                    setTimeout(() => {\n                      isSwitchingToFullScreen.current = false;\n                    }, 100);\n                  }}\n                  onBlur={handleExpressionBlur}\n                  onTypeInferred={handleTypeInferred}\n                  onValidationChange={handleValidationChange}\n                  context={expressionContext}\n                  placeholder={expressionPlaceholder}\n                />\n                <div className=\"uii:flex uii:items-center uii:gap-2 uii:mt-0.5\">\n                  <span\n                    className=\"uii:text-xs uii:font-mono uii:cursor-pointer uii:text-muted-foreground\"\n                    onMouseDown={(e) => {\n                      e.preventDefault(); // Prevent blur from firing\n                      e.stopPropagation();\n                      isSwitchingToFullScreen.current = true;\n                      expressionMode.setFullScreen(true);\n\n                      // Reset flag after a short delay in case blur doesn't fire\n                      setTimeout(() => {\n                        isSwitchingToFullScreen.current = false;\n                      }, 100);\n                    }}\n                  >\n                    <FontAwesomeIcon icon={faExpand} />\n                  </span>\n                  <span\n                    className=\"uii:text-xs uii:font-mono uii:cursor-pointer uii:text-muted-foreground\"\n                    onMouseDown={(e) => {\n                      e.preventDefault(); // Prevent blur from firing\n                      handleClear();\n                    }}\n                  >\n                    Clear\n                  </span>\n                </div>\n              </div>\n            ) : (\n              <div className=\"uii:space-y-4\">\n                <FullPanelExpressionEditor\n                  value={expressionMode.expression}\n                  onChange={(newValue) => {\n                    // console.log(\"FullPanelExpressionEditor onChange called with:\", newValue);\n                    handleExpressionChange(newValue);\n                  }}\n                  onClose={() => {\n                    // Treat close like a blur - save the expression\n                    // Force blur to bypass full-screen checks\n                    handleExpressionBlur(undefined, true);\n                    expressionMode.setFullScreen(false);\n                  }}\n                  onBlur={handleExpressionBlur}\n                  onTypeInferred={handleTypeInferred}\n                  context={expressionContext}\n                  placeholder={expressionPlaceholder}\n                />\n\n                {/* AST and Dependencies Display */}\n                {(ast || dependencies.length > 0) && (\n                  <div className=\"uii:space-y-3\">\n                    {/* Return Type */}\n                    {inferredReturnType && inferredReturnType !== 'unknown' && (\n                      <div className=\"uii:space-y-2\">\n                        <div className=\"uii:flex uii:items-center uii:gap-2\">\n                          <div className=\"uii:text-sm uii:font-semibold uii:text-gray-700\">\n                            Inferred Return Type:\n                          </div>\n                          {typeScriptInferredType && inferredReturnType !== 'error' && (\n                            <span className=\"uii:px-1.5 uii:py-0.5 uii:text-xs uii:rounded uii:bg-blue-100 uii:text-blue-700 uii:border uii:border-blue-200\">\n                              TypeScript\n                            </span>\n                          )}\n                        </div>\n                        <div className=\"uii:flex uii:items-center uii:gap-2\">\n                          {inferredReturnType === 'error' ? (\n                            <span className=\"uii:px-3 uii:py-1.5 uii:text-sm uii:font-mono uii:rounded uii:border uii:bg-red-50 uii:text-red-800 uii:border-red-200\">\n                              ❌ Syntax Error\n                            </span>\n                          ) : (\n                            <>\n                              <span className=\"uii:px-3 uii:py-1.5 uii:text-sm uii:font-mono uii:rounded uii:border uii:bg-purple-50 uii:text-purple-800 uii:border-purple-200\">\n                                {inferredReturnType}\n                              </span>\n                              {hasTypeMismatch && (\n                                <span className=\"uii:text-xs uii:text-orange-600 uii:font-semibold\">\n                                  ⚠️ Expected: {type || expectedType}\n                                </span>\n                              )}\n                            </>\n                          )}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Dependencies */}\n                    {dependencyList.length > 0 && (\n                      <div className=\"uii:space-y-2\">\n                        <div className=\"uii:text-sm uii:font-semibold uii:text-gray-700\">\n                          Dependencies ({dependencyList.length}):\n                        </div>\n                        <div className=\"uii:flex uii:flex-wrap uii:gap-2\">\n                          {dependencyList.map((dep, index) => (\n                            <span\n                              key={index}\n                              className={cn(\n                                \"uii:px-2 uii:py-1 uii:text-sm uii:rounded uii:border\",\n                                dep.exists\n                                  ? \"uii:bg-blue-100 uii:text-blue-800 uii:border-blue-200\"\n                                  : \"uii:bg-red-100 uii:text-red-800 uii:border-red-200\"\n                              )}\n                              title={dep.exists ? `Value: ${JSON.stringify(dep.value)}` : 'Not found in context'}\n                            >\n                              {dep.name}\n                            </span>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* AST Tree */}\n                    {ast && (\n                      <ASTRenderer\n                        ast={ast}\n                        tokens={tokens}\n                        variant=\"tree\"\n                        showTokens={true}\n                        className=\"uii:w-full\"\n                      />\n                    )}\n\n                    {/* Parse Status */}\n                    {isParsing && (\n                      <div className=\"uii:text-sm uii:text-gray-500 uii:italic\">\n                        Parsing expression...\n                      </div>\n                    )}\n                    {parseError && (\n                      <div className=\"uii:text-sm uii:text-red-600\">\n                        Parse Error: {parseError}\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        ) : (\n          <div\n            className={cn('uii:relative', className)}\n            key={`${key}-expression-display`}\n          >\n            <div\n              className={clsx(\n                'uii:flex uii:h-9 uii:w-full uii:min-w-0 uii:rounded-sm uii:border uii:border-input uii:bg-transparent uii:px-3 uii:py-1 uii:text-base uii:shadow-xs uii:transition-[color,box-shadow] uii:outline-none uii:focus-visible:border-ring uii:focus-visible:ring-ring/50 uii:focus-visible:ring-[3px] uii:md:text-sm uii:cursor-pointer uii:hover:bg-muted/50',\n                'uii:mt-0.5 uii:bg-white uii:rounded-md uii:items-center'\n              )}\n              onClick={() => handleModeChange('editor')}\n              onMouseEnter={() => setIsHovering(true)}\n              onMouseLeave={() => setIsHovering(false)}\n            >\n              <span className=\"uii:flex-1 uii:truncate uii:text-foreground uii:items-center\">\n                {isHovering ? (\n                  // Hover state: show AST preview with dependencies\n                  <div className=\"uii:flex uii:items-center uii:gap-2\">\n                    {ast ? (\n                      <ASTRenderer\n                        key={`${key}-ast`}\n                        ast={ast}\n                        tokens={tokens}\n                        variant=\"inline\"\n                        showTokens={false}\n                        className=\"uii:text-xs\"\n                      />\n                    ) : (\n                      <div className=\"uii:text-xs uii:text-gray-500\">\n                        {isParsing\n                          ? 'Parsing...'\n                          : parseError\n                            ? `Error: ${parseError}`\n                            : 'No AST available'}\n                      </div>\n                    )}\n                    {dependencies.length > 0 && (\n                      <div className=\"uii:flex uii:gap-1\">\n                        {dependencies.map((dep, index) => (\n                          <span\n                            key={index}\n                            className=\"uii:px-1 uii:py-0.5 uii:bg-blue-100 uii:text-blue-800 uii:text-xs uii:rounded\"\n                          >\n                            {dep}\n                          </span>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                ) : (\n                  // At rest: show the expression text\n                  <span className=\"uii:font-mono uii:text-sm\">\n                    {currentExpressionValueExt || 'No expression'}\n                  </span>\n                )}\n              </span>\n            </div>\n          </div>\n        );\n\n      default:\n        return children(controlProps);\n    }\n  };\n\n  return (\n    <><div className=\"uii:flex uii:items-center uii:gap-2 uii:mt-2\"><label className=\"uii:text-xs uii:text-muted-foreground uii:font-bold\" htmlFor={key}>{label}:</label>\n      <span className=\"uii:-mt-2 uii:inline-flex uii:px-1 uii:py-0.5 uii:bg-gray-200 uii:rounded-sm uii:text-[10px] uii:font-mono uii:text-muted-foreground uii:font-light\">{type}</span>\n      {hasTypeMismatch || inferredReturnType === 'error' ? (\n        <>\n          {expressionMode.current === 'expression' ? <><span className=\"uii:-mt-2 uii:inline-flex uii:px-1 uii:py-0.5 uii:bg-gray-200 uii:rounded-sm uii:text-[10px] uii:font-mono uii:text-muted-foreground uii:font-light\">{expressionMode.expression.trim() !== '' ? inferredReturnType : 'empty'}</span>\n            <span className=\"uii:-mt-2 uii:inline-flex uii:px-1 uii:py-0.5 uii:bg-gray-200 uii:rounded-sm uii:text-[10px] uii:font-mono uii:font-light uii:text-orange-600 \">\n              ⚠️ Expected: {type || expectedType}\n            </span></> : <></>}</>) : <></>}\n    </div>\n      {renderContent()}\n\n      {/* {<>availableNodes:{JSON.stringify(availableNodes)}</>}<br />\n      {<>myInterface:{JSON.stringify(myInterface)}</>}<br /> */}\n      {/* {<>cv:{JSON.stringify(currentValue)}</>}<br />\n    {<>ov:{JSON.stringify(originalValue)}</>}<br />\n    {<>cevExt:{JSON.stringify(currentExpressionValueExt)}</>}<br />\n    {<>cev:{JSON.stringify(currentExpressionValue)}</>}<br />\n    {<>exp:{JSON.stringify(expressionMode.expression)}</>}<br />\n    {<>ie:{JSON.stringify(expressionMode.isEditing)}</>}<br />\n    {<>fs:{JSON.stringify(expressionMode.isFullScreen)}</>}<br />\n    {<>expm:{JSON.stringify(expressionMode.isExpressionMode)}</>}<br />\n    {<>em:{JSON.stringify(expressionMode.isEditorMode)}</>}<br /> */}\n    </>\n  );\n}\n\nexport default ExpressionWrapper;\n","import * as React from \"react\"\n\nimport { cn } from \"../lib/utils\"\n\nimport { Button } from '../components/ui/button'\nimport { Input as InputComponent } from '../components/ui/input'\nimport { ExpressionAST, ExpressionContext, ExpressionWrapper } from \"../components/expression/ExpressionWrapper\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useState } from \"react\";\n// import { faCode } from \"@fortawesome/pro-regular-svg-icons\";\nexport interface InputProps\n    extends React.InputHTMLAttributes<HTMLInputElement> { }\n\nexport interface ExpressionResult {\n    value: any;\n    ast: ExpressionAST;\n    error?: string;\n    isValid: boolean;\n    validation: {\n        syntax: boolean;\n        expression: boolean;\n        context: boolean;\n        type?: boolean;\n        security?: boolean;\n    };\n}\n\nexport function Input({ className, expectedType, ...props }: Omit<React.ComponentProps<'input'>, 'onChange'> & {\n    error?: boolean, label?: string,\n    rapperClassName?: string,\n    expressionContext?: ExpressionContext,\n    expressionResult?: ExpressionResult,\n    isEvaluating?: boolean,\n    isExpressionValid?: boolean,\n    expectedType?: string, \n    onChange?: (value: any) => void\n}) {\n\n    // const [localValue, setLocalValue] = useState(props.value as any);\n    // const [localMetadata, setLocalMetadata] = useState({} as any);\n\n\n    return (<ExpressionWrapper\n        label={props.label as string ?? \"Test Entry\"}\n        key={props.key as string ?? props.name as string}\n        type={expectedType ?? \"string\"}\n        valuesLoading={false}\n        value={props.value}\n        onValueChange={(val, metadata) => {\n            props.onChange && props.onChange(val);\n            // setLocalValue(val);\n            // if (metadata) {\n            //     setLocalMetadata(metadata);\n            // }\n        }}\n        expectedType={expectedType as \"string\" | \"number\" | \"boolean\" | \"object\" | \"array\" | \"any\"}\n        fieldName={props.name as string ?? props.key as string}\n        // availableNodes={availableNodes}\n        // myInterface={myInterface}\n        children={({ onExpressionClick, onChange: onChangeExpression, value: expressionValue, localInput, setLocalInput }) => (\n            <div className=\"uii:relative uii:text-xs uii:mt-0.5\"><InputComponent\n                type=\"text\"\n                value={localInput}\n                onChange={(e) => {\n                    setLocalInput(e.target.value)\n                    onChangeExpression(e.target.value)\n                }}\n                // disabled={!props.disabled}\n                placeholder={props.placeholder as string ?? \"Enter value...\"}\n            />\n                <div className=\"uii:flex uii:bg-white uii:border-white/40 uii:border-l-8 uii:items-center uii:gap-1 uii:absolute uii:right-1.5 uii:top-2.5 uii:cursor-pointer uii:truncate\" onClick={() => onExpressionClick()}>\n                    {/* <FontAwesomeIcon icon={[\"fas\", \"code\"]} className=\"text-blue-500\" /> */}\n                    <span className=\"uii:border-l uii:border-gray-200 uii:px-2\">Custom Expression</span>\n                </div>\n            </div>\n        )}\n    // <Button onClick={() => onExpressionClick()}>\n    //     <FontAwesomeIcon icon={[\"fas\", \"code\"]} className=\"text-blue-500\" />\n    //     <span className=\"border-l border-gray-200 px-2\">Custom Expression</span>\n    // </Button>   \n\n    // <div className=\"relative overflow-clip\">\n    //     <Input type=\"text\"\n    //         spellCheck={false}\n    //         autoComplete=\"off\"\n    //         onKeyDown={(e) => {\n    //             if (e.key === 'Enter') {\n    //                 e.preventDefault();\n    //             }\n    //         }}\n    //         autoFocus={false}\n    //         id={props.name as string} key={props.name as string}\n    //         onBlur={() => {\n    //             // onBlur && onBlur(value);\n    //         }}\n    //         name={props.name as string}\n    //         readOnly={false}\n    //         className={cn(!false ? 'cursor-not-allowed' : '', '!bg-white !text-sm ')}\n    //         defaultValue={\"\"}\n    //         value={localInput}\n    //         onChange={(e) => {\n    //             setLocalInput(e.target.value);\n    //             onChangeExpression && onChangeExpression(e.target.value);\n    //         }}\n    //     />\n    //     <div className=\"flex bg-white border-white/40 border-l-8 items-center gap-1 absolute right-1.5 top-2.5 cursor-pointer truncate\" onClick={() => onExpressionClick()}>\n    //         <FontAwesomeIcon icon={[\"fas\", \"code\"]} className=\"text-blue-500\" />\n    //         <span className=\"border-l border-gray-200 px-2\">Custom Expression</span>\n    //     </div>\n    // </div>\n\n\n    />)\n}","/**\n * Copyright 2022 Joe Bell. All rights reserved.\n *\n * This file is licensed to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with the\n * License. You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR REPRESENTATIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */ import { clsx } from \"clsx\";\nconst falsyToString = (value)=>typeof value === \"boolean\" ? `${value}` : value === 0 ? \"0\" : value;\nexport const cx = clsx;\nexport const cva = (base, config)=>(props)=>{\n        var _config_compoundVariants;\n        if ((config === null || config === void 0 ? void 0 : config.variants) == null) return cx(base, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);\n        const { variants, defaultVariants } = config;\n        const getVariantClassNames = Object.keys(variants).map((variant)=>{\n            const variantProp = props === null || props === void 0 ? void 0 : props[variant];\n            const defaultVariantProp = defaultVariants === null || defaultVariants === void 0 ? void 0 : defaultVariants[variant];\n            if (variantProp === null) return null;\n            const variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);\n            return variants[variant][variantKey];\n        });\n        const propsWithoutUndefined = props && Object.entries(props).reduce((acc, param)=>{\n            let [key, value] = param;\n            if (value === undefined) {\n                return acc;\n            }\n            acc[key] = value;\n            return acc;\n        }, {});\n        const getCompoundVariantClassNames = config === null || config === void 0 ? void 0 : (_config_compoundVariants = config.compoundVariants) === null || _config_compoundVariants === void 0 ? void 0 : _config_compoundVariants.reduce((acc, param)=>{\n            let { class: cvClass, className: cvClassName, ...compoundVariantOptions } = param;\n            return Object.entries(compoundVariantOptions).every((param)=>{\n                let [key, value] = param;\n                return Array.isArray(value) ? value.includes({\n                    ...defaultVariants,\n                    ...propsWithoutUndefined\n                }[key]) : ({\n                    ...defaultVariants,\n                    ...propsWithoutUndefined\n                })[key] === value;\n            }) ? [\n                ...acc,\n                cvClass,\n                cvClassName\n            ] : acc;\n        }, []);\n        return cx(base, getVariantClassNames, getCompoundVariantClassNames, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);\n    };\n\n","import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst buttonVariants = cva(\n  \"ui:inline-flex ui:items-center ui:justify-center ui:gap-2 ui:whitespace-nowrap ui:rounded-sm ui:text-sm ui:font-medium ui:transition-[color,box-shadow] ui:disabled:pointer-events-none ui:disabled:opacity-50 ui:[&_svg]:pointer-events-none ui:[&_svg:not([class*=size-])]:size-4 ui:shrink-0 ui:[&_svg]:shrink-0 ui:outline-none ui:focus-visible:border-ring ui:focus-visible:ring-ring/50 ui:focus-visible:ring-[3px] ui:aria-invalid:ring-destructive/20 ui:dark:aria-invalid:ring-destructive/40 ui:aria-invalid:border-destructive ui:cursor-pointer\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"ui:bg-primary ui:text-primary-foreground ui:shadow-xs ui:hover:bg-primary/90 ui:select-none\",\n        destructive:\n          \"ui:bg-destructive ui:text-white ui:shadow-xs ui:hover:bg-destructive/90 ui:focus-visible:ring-destructive/20 ui:dark:focus-visible:ring-destructive/40\",\n        outline:\n          \"ui:border ui:border-input ui:bg-background ui:shadow-xs ui:hover:bg-accent ui:hover:text-accent-foreground\",\n        secondary:\n          \"ui:bg-secondary ui:text-secondary-foreground ui:shadow-xs ui:hover:bg-secondary/80\",\n        ghost: \"ui:hover:bg-accent ui:hover:text-accent-foreground\",\n        link: \"ui:text-primary ui:underline-offset-4 ui:hover:underline\",\n      },\n      size: {\n        default: \"ui:h-9 ui:px-4 ui:py-2 ui:has-[>svg]:px-3\",\n        sm: \"ui:h-8 ui:rounded-sm ui:gap-1.5 ui:px-3 ui:has-[>svg]:px-2.5\",\n        lg: \"ui:h-10 ui:rounded-sm ui:px-6 ui:has-[>svg]:px-4\",\n        icon: \"ui:size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp \n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n"]}
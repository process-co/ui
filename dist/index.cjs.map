{"version":3,"sources":["/home/runner/work/proc-app/proc-app/out/process-co/ui/dist/index.cjs","../src/lib/utils.ts","../src/components/ui/input.tsx","../src/stores/expressionModeStore.ts","../src/hooks/useExpressionMode.ts","../src/components/expression/ExpressionEditor.tsx","../src/hooks/useASTParser.ts","../src/components/expression/ASTRenderer.tsx","../src/components/expression/ExpressionWrapper.tsx","../src/components/input.tsx","../../../node_modules/.pnpm/class-variance-authority@0.7.1/node_modules/class-variance-authority/dist/index.mjs","../src/components/ui/button.tsx"],"names":["p","require","pi","tailwindMerge","zustand","react","reactFontawesome","proRegularSvgIcons","reactSlot","_interopDefault","e","__esModule","default","_interopNamespace","n","Object","create","keys","forEach","k","d","getOwnPropertyDescriptor","defineProperty","get","enumerable","freeze","p__namespace","pi__default","cn","inputs","twMerge","clsx","Input","className","wrapperClassName","type","required","error","props","te","createElement","defaultState","expression","mode","isEditing","currentValue","isFullScreen","useExpressionModeStore","set","states","setState","fieldName","state","store","getState","clear","switchToValue","currentState","switchToExpression","switchToEditor","setExpression","setEditing","setFullScreen","setCurrentValue","value","useExpressionMode","useCallback","expr","editing","current","isExpressionMode","isEditorMode","inferTypeFromMonaco","editor","monaco","logPrefix","currentModel","wrappedCode","tempModel","client","exprIndex","position","quickInfo","extractedType","foundColon","typeParts","part","prevPart","typeString","trim","console","log","hasTextFocus","getModel","getModelMarkers","resource","uri","some","marker","severity","MarkerSeverity","Error","createModel","languages","typescript","getTypeScriptWorker","indexOf","getPositionAt","getQuickInfoAtPosition","toString","getOffsetAt","displayParts","push","kind","text","length","map","join","dispose","warn","InlineEditorOptions","fontSize","fontWeight","wordWrap","lineNumbers","lineNumbersMinChars","overviewRulerLanes","overviewRulerBorder","hideCursorInOverviewRuler","lineDecorationsWidth","glyphMargin","folding","scrollBeyondLastColumn","scrollbar","horizontal","vertical","alwaysConsumeMouseWheel","find","addExtraSpaceOnTop","autoFindInSelection","seedSearchStringFromSelection","minimap","enabled","wordBasedSuggestions","links","occurrencesHighlight","cursorStyle","renderLineHighlight","contextmenu","roundedSelection","hover","delay","acceptSuggestionOnEnter","automaticLayout","fixedOverflowWidgets","padding","top","bottom","fontFamily","letterSpacing","lineHeight","FullPanelEditorOptions","readOnly","domReadOnly","InlineExpressionEditor","onChange","onBlur","onEnter","onTypeInferred","onValidationChange","context","placeholder","editorRef","useRef","monacoRef","typeInferenceTimeoutRef","handleEditorWillMount","contextKeys","javascriptDefaults","addExtraLib","handleEditorDidMount","updateOptions","getDomNode","findCommand","addCommand","KeyMod","CtrlCmd","KeyCode","KEY_F","enterKeyDisposable","onKeyDown","keyCode","Enter","shiftKey","preventDefault","stopPropagation","suggestWidget","_contentWidgets","isSuggestVisible","widget","_hidden","suggestWidgetVisible","_contextKeyService","getContextKeyValue","trigger","onDidPaste","endLineNumber","newContent","textModel","lineCount","getLineCount","i","getLineContent","setValue","setPosition","column","lineNumber","onDidBlurEditorText","getValue","onDidChangeModelContent","model","markers","hasErrors","clearTimeout","setTimeout","expressionToAnalyze","inferredType","markerChangeDisposable","onDidChangeMarkers","uris","F1","cursorDisposable","onDidChangeCursorPosition","window","requestAnimationFrame","focus","_inlineDisposables","useEffect","disposables","handleEditorChange","newValue","React","Editor","theme","height","language","onMount","beforeMount","width","loading","Fragment","FontAwesomeIcon","icon","faSpinner","options","FullPanelExpressionEditor","onClose","handleFPEditorDidMount","getOption","EditorOption","escapeKeyDisposable","Escape","changeCount","changeDisposable","lastLineLength","getLineLength","_fullScreenDisposables","onClick","useASTParser","controlKey","useState","ast","setAST","tokens","setTokens","dependencies","setDependencies","isLoading","setIsLoading","setError","requestIdRef","messageHandlerRef","controlKeyRef","navigator","serviceWorker","handleMessage","event","data","payload","id","result","receivedId","expectedId","receivedKey","expectedKey","addEventListener","removeEventListener","controller","postMessage","ASTRenderer","key","variant","showTokens","getNodeColor","renderInlineNode","node","depth","start","end","name","left","operator","right","callee","object","property","renderTreeNode","indent","repeat","argument","index","children","slice","child","renderTokens","displayTokens","token","includes","ExpressionWrapper","label","valuesLoading","onValueChange","onDependenciesChange","metadata","expressionContext","availableNodes","myInterface","contextTypeDefinitions","inlineEditor","editorClassName","expressionPlaceholder","evaluateExpression","expressionResult","isEvaluating","isExpressionValid","expectedType","expressionMetadata","setExpressionMetadata","originalValue","setOriginalValue","formatValue","isNaN","parseFloat","parseInt","split","currentEditorValue","setCurrentEditorValue","currentExpressionValueExt","isExpressionValue","useMemo","isInitialMount","exprValue","exprString","expressionMode","isMetadataOutOfSync","syncedMetadata","isParsing","parseError","dependencyList","dep","exists","typeScriptInferredType","setTypeScriptInferredType","handleTypeInferred","expressionHasNewlines","inferredReturnType","hasTypeMismatch","normalizedInferred","toLowerCase","normalizedExpected","endsWith","startsWith","test","internalExpressionResult","setInternalExpressionResult","internalIsEvaluating","setInternalIsEvaluating","isHovering","setIsHovering","internalIsExpressionValid","setInternalIsExpressionValid","syntax","security","validationState","setValidationState","hasExpressionError","isProgrammaticallyClearing","isSwitchingToFullScreen","isBlur","handleValidationChange","isValid","errors","prev","checkForMultiLine","hasNewlines","isLong","internalEvaluateExpression","color","message","validation","currentMetadata","currentExpressionValue","handleValueChange","handleExpressionChange","newExpression","handleExpressionBlur","forceBlur","handleModeChange","newMode","shouldBeFullScreen","editorMetadata","handleClear","localInput","setLocalInput","controlProps","onExpressionClick","hasError","renderContent","onMouseDown","faExpand","title","JSON","stringify","onMouseEnter","onMouseLeave","htmlFor","localValue","setLocalValue","localMetadata","setLocalMetadata","ee","val","onChangeExpression","expressionValue","target","falsyToString","cx","cva","base","config","_config_compoundVariants","variants","class","defaultVariants","getVariantClassNames","variantProp","defaultVariantProp","variantKey","propsWithoutUndefined","entries","reduce","acc","param","getCompoundVariantClassNames","compoundVariants","cvClass","cvClassName","compoundVariantOptions","every","Array","isArray","buttonVariants","destructive","outline","secondary","ghost","link","size","sm","lg","Button","asChild","Je","Slot","exports","xt","ut","yi"],"mappings":"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","sourcesContent":["'use strict';var p=require('react'),pi=require('clsx'),tailwindMerge=require('tailwind-merge'),zustand=require('zustand'),react=require('@monaco-editor/react'),reactFontawesome=require('@fortawesome/react-fontawesome'),proRegularSvgIcons=require('@fortawesome/pro-regular-svg-icons'),reactSlot=require('@radix-ui/react-slot');function _interopDefault(e){return e&&e.__esModule?e:{default:e}}function _interopNamespace(e){if(e&&e.__esModule)return e;var n=Object.create(null);if(e){Object.keys(e).forEach(function(k){if(k!=='default'){var d=Object.getOwnPropertyDescriptor(e,k);Object.defineProperty(n,k,d.get?d:{enumerable:true,get:function(){return e[k]}});}})}n.default=e;return Object.freeze(n)}var p__namespace=/*#__PURE__*/_interopNamespace(p);var pi__default=/*#__PURE__*/_interopDefault(pi);function M(...u){return tailwindMerge.twMerge(pi.clsx(u))}function Ie({className:u,wrapperClassName:i,type:t,required:c,error:o,...f}){return p__namespace.createElement(\"div\",{className:M(\"uii:relative\",i)},p__namespace.createElement(\"input\",{\"aria-invalid\":o,type:t,\"data-slot\":\"input\",className:M(\"uii:border-input uii:file:text-foreground uii:placeholder:text-muted-foreground uii:selection:bg-primary uii:selection:text-primary-foreground uii:flex uii:h-9 uii:w-full uii:min-w-0 uii:rounded-sm uii:border uii:bg-transparent uii:px-3 uii:py-1 uii:text-base uii:shadow-xs uii:transition-[color,box-shadow] uii:outline-none uii:file:inline-flex uii:file:h-7 uii:file:border-0 uii:file:bg-transparent uii:file:text-sm uii:file:font-medium uii:disabled:pointer-events-none uii:disabled:cursor-not-allowed uii:disabled:opacity-50 uii:md:text-sm\",\"uii:focus-visible:border-ring uii:focus-visible:ring-ring/50 uii:focus-visible:ring-[3px]\",\"uii:aria-invalid:ring-destructive/20 uii:dark:aria-invalid:ring-destructive/40 uii:aria-invalid:border-destructive\",{\"uii:pr-30\":o},u),...f}),o&&p__namespace.createElement(\"span\",{className:\"uii:absolute uii:inset-y-0 uii:right-0 uii:flex uii:items-center uii:pr-2 uii:border-l-10 uii:border-l-background uii:my-[6px] uii:pointer-events-none \"},p__namespace.createElement(\"span\",{className:\"uii:bg-destructive uii:text-white uii:px-1.5 uii:py-1.5 uii:rounded-xs uii:uppercase uii:tracking-wide uii:font-medium uii:text-xs uii:leading-none uii:font-sans\"},o&&c?\"required\":\"error\")))}var Le={expression:\"\",mode:\"value\",isEditing:false,currentValue:void 0,isFullScreen:false},le=zustand.create((u,i)=>({states:{},setState:(t,c)=>{u(o=>({states:{...o.states,[t]:c}}));},getState:t=>i().states[t]||Le,clear:t=>{u(c=>({states:{...c.states,[t]:Le}}));},switchToValue:t=>{let c=i().getState(t);i().setState(t,{...c,mode:\"value\",isEditing:false});},switchToExpression:t=>{let c=i().getState(t);i().setState(t,{...c,mode:\"expression\",isEditing:false});},switchToEditor:t=>{let c=i().getState(t);i().setState(t,{...c,mode:\"expression\",isEditing:true});},setExpression:(t,c)=>{let o=i().getState(t);i().setState(t,{...o,expression:c});},setEditing:(t,c)=>{let o=i().getState(t);i().setState(t,{...o,isEditing:c});},setFullScreen:(t,c)=>{let o=i().getState(t);i().setState(t,{...o,isFullScreen:c});},setCurrentValue:(t,c)=>{let o=i().getState(t);i().setState(t,{...o,currentValue:c});}}));function Pe(u){let i=le(),t=i.getState(u),c=p.useCallback(()=>{i.switchToValue(u);},[i,u]),o=p.useCallback(()=>{i.switchToExpression(u);},[i,u]),f=p.useCallback(()=>{i.switchToEditor(u);},[i,u]),N=p.useCallback(()=>{i.clear(u);},[i,u]),m=p.useCallback(n=>{i.setExpression(u,n);},[i,u]),b=p.useCallback(n=>{i.setEditing(u,n);},[i,u]),y=p.useCallback(n=>{i.setCurrentValue(u,n);},[i,u]),e=p.useCallback(n=>{i.setFullScreen(u,n);},[i,u]);return {current:t.mode,switchToValue:c,switchToExpression:o,switchToEditor:f,clear:N,isExpressionMode:t.mode===\"expression\",isEditorMode:t.isEditing,expression:t.expression,setExpression:m,isEditing:t.isEditing,setEditing:b,currentValue:t.currentValue,setCurrentValue:y,isFullScreen:t.isFullScreen,setFullScreen:e}}async function q(u,i,t,c=\"\\u{1F537}\"){if(!t.trim())return console.log(`${c} Type inference skipped - no expression`),null;if(!u.hasTextFocus())return console.log(`${c} Skipping type inference - editor does not have focus`),null;console.log(`${c} Running type inference, expression:`,t);try{let o=u.getModel();if(o&&i.editor.getModelMarkers({resource:o.uri}).some(s=>s.severity===i.MarkerSeverity.Error))return console.log(`${c} Type inference skipped - expression has validation errors`),\"error\";let f=`const __expr__ = (${t});`,N=i.editor.createModel(f,\"typescript\"),b=await(await i.languages.typescript.getTypeScriptWorker())(N.uri),y=f.indexOf(\"__expr__\"),e=N.getPositionAt(y),n=await b.getQuickInfoAtPosition(N.uri.toString(),N.getOffsetAt(e));console.log(`${c} QuickInfo response:`,n);let S=null;if(n&&n.displayParts){let C=!1,d=[];for(let s of n.displayParts)if(C&&d.push(s),s.kind===\"punctuation\"&&s.text===\":\"&&!C){let v=n.displayParts[n.displayParts.indexOf(s)-1];v&&(v.kind===\"localName\"||v.kind===\"parameterName\")&&(C=!0);}if(d.length>0){let s=d.map(v=>v.text).join(\"\").trim();console.log(`${c} Extracted type:`,s),s&&s!==\"any\"&&(S=s);}}return N.dispose(),S}catch(o){return console.warn(`${c} Type inference failed:`,o),null}}var De={fontSize:\"14px\",fontWeight:\"normal\",wordWrap:\"off\",lineNumbers:\"off\",lineNumbersMinChars:0,overviewRulerLanes:0,overviewRulerBorder:false,hideCursorInOverviewRuler:true,lineDecorationsWidth:0,glyphMargin:false,folding:false,scrollBeyondLastColumn:0,scrollbar:{horizontal:\"hidden\",vertical:\"hidden\",alwaysConsumeMouseWheel:false},find:{addExtraSpaceOnTop:false,autoFindInSelection:\"never\",seedSearchStringFromSelection:false},minimap:{enabled:false},wordBasedSuggestions:true,links:false,occurrencesHighlight:false,cursorStyle:\"line\",renderLineHighlight:\"none\",contextmenu:false,roundedSelection:false,hover:{delay:300},acceptSuggestionOnEnter:\"on\",automaticLayout:true,fixedOverflowWidgets:true,padding:{top:4,bottom:4},fontFamily:\"inherit\",letterSpacing:\"normal\",lineHeight:\"normal\"},Oe={fontSize:\"14px\",fontWeight:\"normal\",wordWrap:\"on\",lineNumbers:\"on\",lineNumbersMinChars:3,overviewRulerLanes:3,overviewRulerBorder:true,hideCursorInOverviewRuler:false,lineDecorationsWidth:10,glyphMargin:true,folding:true,scrollBeyondLastColumn:5,scrollbar:{horizontal:\"auto\",vertical:\"auto\",alwaysConsumeMouseWheel:false},find:{addExtraSpaceOnTop:false,autoFindInSelection:\"never\",seedSearchStringFromSelection:false},minimap:{enabled:true},wordBasedSuggestions:true,links:true,occurrencesHighlight:true,cursorStyle:\"line\",renderLineHighlight:\"line\",contextmenu:true,roundedSelection:true,hover:{delay:300},acceptSuggestionOnEnter:\"off\",automaticLayout:true,fixedOverflowWidgets:true,readOnly:false,domReadOnly:false};function je({value:u,onChange:i,onBlur:t,onEnter:c,onTypeInferred:o,onValidationChange:f,context:N={},className:m,placeholder:b=\"Enter expression...\"}){let y=p.useRef(null),e=p.useRef(null),n=p.useRef(null),S=s=>{e.current=s;let v=Object.keys(N);v.length>0&&s.languages.typescript.javascriptDefaults.addExtraLib(`\n        declare const ${v.join(\", \")}: any;\n      `,\"context.d.ts\");},C=(s,v)=>{y.current=s,s.updateOptions(De),console.log(\"\\u{1F537} Inline editor mounted!\");s.getDomNode();let L=s.addCommand(v.KeyMod.CtrlCmd|v.KeyCode.KEY_F,()=>{}),V=s.onKeyDown(l=>{if(l.keyCode===v.KeyCode.Enter){if(!s.hasTextFocus()){console.log(\"\\u{1F537} Enter keydown but inline editor does NOT have focus - allowing default\");return}if(l.shiftKey){console.log(\"\\u{1F537} Shift+Enter in INLINE editor - switching to full-screen\"),l.preventDefault(),l.stopPropagation(),c&&c();return}let x=s._contentWidgets?.[\"editor.widget.suggestWidget\"],E=x?.widget&&!x.widget._hidden&&x.widget.state!==void 0&&x.widget.state!==0,k=s._contextKeyService?.getContextKeyValue?.(\"suggestWidgetVisible\");E||k?(console.log(\"\\u{1F537} Enter in INLINE editor - accepting autocomplete\"),l.preventDefault(),l.stopPropagation(),s.trigger(\"\",\"acceptSelectedSuggestion\")):(console.log(\"\\u{1F537} Enter in INLINE editor - blurring (finishing edit)\"),l.preventDefault(),l.stopPropagation(),t?.({}));}});s.onDidPaste(l=>{if(l.endLineNumber<=1)return;let x=\"\",E=s.getModel(),w=E.getLineCount();for(let k=0;k<w;k+=1)x+=E.getLineContent(k+1);E.setValue(x),s.setPosition({column:x.length+1,lineNumber:1});}),s.onDidBlurEditorText(l=>{let x=s.getValue();t?.({...l,currentValue:x});}),s.onDidChangeModelContent(()=>{let l=s.getModel();if(l){if(f){let x=v.editor.getModelMarkers({resource:l.uri}),E=x.some(w=>w.severity===v.MarkerSeverity.Error);f(!E,x);}o&&(n.current&&clearTimeout(n.current),console.log(\"\\u{1F537} Content changed - debouncing type inference\"),n.current=setTimeout(async()=>{let x=l.getValue(),E=await q(s,v,x,\"\\u{1F537}\");E&&o(E);},200));}});let W=v.editor.onDidChangeMarkers(l=>{let x=s.getModel();if(!x||!o||!l.some(T=>T.toString()===x.uri.toString()))return;let k=v.editor.getModelMarkers({resource:x.uri}).some(T=>T.severity===v.MarkerSeverity.Error);console.log(\"\\u{1F537} Monaco markers changed - hasErrors:\",k),k?(n.current&&(clearTimeout(n.current),n.current=null),console.log(\"\\u{1F537} ERROR detected - immediately setting type to error\"),o(\"error\")):(n.current&&clearTimeout(n.current),console.log(\"\\u{1F537} Errors cleared - triggering type inference\"),n.current=setTimeout(async()=>{let T=x.getValue(),B=await q(s,v,T,\"\\u{1F537}\");B&&o(B);},100));});s.addCommand(v.KeyCode.F1,()=>{});let J=s.onDidChangeCursorPosition(async()=>{if(o&&s.hasTextFocus()){let l=s.getModel();if(l&&l.getValue().trim()){n.current&&clearTimeout(n.current);let x=l.getValue(),E=await q(s,v,x,\"\\u{1F537}\");E&&o(E);}}});s.setPosition({lineNumber:1,column:999999}),window.requestAnimationFrame(()=>{s.focus(),setTimeout(async()=>{let l=s.getModel();if(o&&l&&l.getValue())if(console.log(\"\\u{1F537} Triggering initial type inference for inline editor\"),v.editor.getModelMarkers({resource:l.uri}).some(w=>w.severity===v.MarkerSeverity.Error))o(\"error\");else {let w=l.getValue(),k=await q(s,v,w,\"\\u{1F537}\");k&&o(k);}},100);}),y.current._inlineDisposables={enterKeyDisposable:V,findCommand:L,markerChangeDisposable:W,cursorDisposable:J};};p.useEffect(()=>()=>{if(y.current){if(console.log(\"\\u{1F537} Inline editor unmounting - cleaning up\"),n.current&&clearTimeout(n.current),y.current._inlineDisposables){let s=y.current._inlineDisposables;s.enterKeyDisposable?.dispose?.(),s.findCommand?.dispose?.(),s.markerChangeDisposable?.dispose?.(),s.cursorDisposable?.dispose?.();}y.current=null;}},[]);let d=s=>{i(s||\"\");};return p__namespace.default.createElement(\"div\",{className:M(\"uii:relative uii:flex-1\",m)},p__namespace.default.createElement(react.Editor,{theme:\"vs-dark\",height:\"26px\",language:\"typescript\",value:u,onChange:d,onMount:C,beforeMount:S,width:\"100%\",loading:p__namespace.default.createElement(p__namespace.default.Fragment,null,p__namespace.default.createElement(reactFontawesome.FontAwesomeIcon,{icon:proRegularSvgIcons.faSpinner,className:\"uii:animate-spin\"})),options:De,className:\"uii:-ml-[4px] uii:-mt-[1px] inline-editor\"}),!u&&p__namespace.default.createElement(\"div\",{className:\"uii:absolute uii:inset-0 uii:flex uii:items-center uii:pointer-events-none uii:text-muted-foreground uii:text-sm\"},b))}function Ke({value:u,onChange:i,onClose:t,onBlur:c,onTypeInferred:o,context:f={},className:N,placeholder:m=\"Enter expression...\"}){let b=p.useRef(null),y=p.useRef(null),e=p.useRef(null),n=d=>{y.current=d;let s=Object.keys(f);s.length>0&&d.languages.typescript.javascriptDefaults.addExtraLib(`\n        declare const ${s.join(\", \")}: any;\n      `,\"context.d.ts\");},S=(d,s)=>{b.current=d,d.updateOptions(Oe),console.log(\"\\u{1F7E6} FULL-SCREEN panel editor mounted!\"),console.log(\"Full-screen editor is read-only?\",d.getOption(s.editor.EditorOption.readOnly));let v=d.onKeyDown(l=>{if(l.keyCode===s.KeyCode.Escape&&(console.log(\"\\u{1F7E6} Escape pressed in FULL-SCREEN editor - closing\"),l.preventDefault(),l.stopPropagation(),t()),l.keyCode===s.KeyCode.Enter){let x=d._contentWidgets?.[\"editor.widget.suggestWidget\"],E=x?.widget&&!x.widget._hidden&&x.widget.state!==void 0&&x.widget.state!==0,k=d._contextKeyService?.getContextKeyValue?.(\"suggestWidgetVisible\");E||k?(console.log(\"\\u{1F7E6} Enter in FULL-SCREEN - accepting autocomplete\"),l.preventDefault(),l.stopPropagation(),d.trigger(\"\",\"acceptSelectedSuggestion\")):console.log(\"\\u{1F7E6} Enter in FULL-SCREEN - allowing newline (default behavior)\");}}),$=0,L=d.onDidChangeModelContent(l=>{$++;let x=d.getValue();console.log(`\\u{1F7E6} FULL-SCREEN content changed (${$}):`,x),console.log(`\\u{1F7E6} Line count: ${d.getModel()?.getLineCount()}`),o&&(e.current&&clearTimeout(e.current),console.log(\"\\u{1F7E6} Content changed - debouncing type inference\"),e.current=setTimeout(async()=>{let w=await q(d,s,x,\"\\u{1F7E6}\");w&&o(w);},200));}),V=s.editor.onDidChangeMarkers(l=>{let x=d.getModel();if(!x||!o||!l.some(T=>T.toString()===x.uri.toString()))return;let k=s.editor.getModelMarkers({resource:x.uri}).some(T=>T.severity===s.MarkerSeverity.Error);console.log(\"\\u{1F7E6} Monaco markers changed - hasErrors:\",k),k?(e.current&&(clearTimeout(e.current),e.current=null),console.log(\"\\u{1F7E6} ERROR detected - immediately setting type to error\"),o(\"error\")):(e.current&&clearTimeout(e.current),console.log(\"\\u{1F7E6} Errors cleared - triggering type inference\"),e.current=setTimeout(async()=>{let T=x.getValue(),B=await q(d,s,T,\"\\u{1F7E6}\");B&&o(B);},100));});d.onDidBlurEditorText(l=>{let x=d.getValue();c?.({...l,currentValue:x});});let W=d.getModel();if(W){let l=W.getLineCount(),x=W.getLineLength(l);d.setPosition({lineNumber:l,column:x+1});}d.focus(),setTimeout(async()=>{if(o&&W)if(console.log(\"\\u{1F7E6} Triggering initial type inference for full-screen editor\"),s.editor.getModelMarkers({resource:W.uri}).some(E=>E.severity===s.MarkerSeverity.Error))console.log(\"\\u{1F7E6} Initial load has error - setting type to error\"),o(\"error\");else {let E=W.getValue(),w=await q(d,s,E,\"\\u{1F7E6}\");w&&o(w);}},100);let J=d.onDidChangeCursorPosition(async()=>{if(o&&d.hasTextFocus()){let l=d.getModel();if(l&&l.getValue().trim()){e.current&&clearTimeout(e.current);let x=l.getValue(),E=await q(d,s,x,\"\\u{1F7E6}\");E&&o(E);}}});b.current._fullScreenDisposables={escapeKeyDisposable:v,changeDisposable:L,markerChangeDisposable:V,cursorDisposable:J};};p.useEffect(()=>()=>{if(b.current){if(console.log(\"\\u{1F7E6} Full-screen editor unmounting - cleaning up\"),e.current&&clearTimeout(e.current),b.current._fullScreenDisposables){let d=b.current._fullScreenDisposables;d.escapeKeyDisposable?.dispose?.(),d.changeDisposable?.dispose?.(),d.markerChangeDisposable?.dispose?.(),d.cursorDisposable?.dispose?.();}b.current=null;}},[]);let C=d=>{i(d||\"\");};return p__namespace.default.createElement(\"div\",{className:M(\"uii:relative uii:border uii:rounded-md uii:bg-background\",N)},p__namespace.default.createElement(\"div\",{className:\"uii:flex uii:items-center uii:justify-between uii:p-2 uii:border-b uii:bg-muted/50\"},p__namespace.default.createElement(\"span\",{className:\"uii:text-sm uii:font-medium\"},\"Expression Editor\"),p__namespace.default.createElement(\"button\",{type:\"button\",onClick:t,className:\"uii:text-muted-foreground hover:uii:text-foreground uii:p-1 uii:rounded uii:cursor-pointer uii:text-xs\"},\"\\u2715\")),p__namespace.default.createElement(react.Editor,{height:\"300px\",theme:\"vs-dark\",language:\"typescript\",value:u,onChange:C,onMount:S,beforeMount:n,options:Oe}),!u&&p__namespace.default.createElement(\"div\",{className:\"uii:absolute uii:inset-0 uii:flex uii:items-center uii:justify-center uii:pointer-events-none uii:text-muted-foreground\"},m))}function _e(u,i){let[t,c]=p.useState(null),[o,f]=p.useState([]),[N,m]=p.useState([]),[b,y]=p.useState(false),[e,n]=p.useState(null),S=p.useRef(0),C=p.useRef(null),d=p.useRef(i||\"default\");return p.useEffect(()=>{d.current=i||\"default\";},[i]),p.useEffect(()=>{if(typeof window>\"u\"||!navigator.serviceWorker){n(\"Service worker not available\");return}let s=v=>{if(v.data.type===\"AST_PARSE_RESULT\"){let{id:$,controlKey:L,result:V}=v.data.payload;$===S.current&&L===d.current?(console.log(\"Service worker AST response:\",{id:$,controlKey:L,result:V}),c(V.ast),f(V.tokens),m(V.dependencies||[]),n(V.error||null),y(false)):console.log(\"Ignoring AST response - wrong control:\",{receivedId:$,expectedId:S.current,receivedKey:L,expectedKey:d.current});}};return C.current=s,navigator.serviceWorker.addEventListener(\"message\",s),()=>{C.current&&navigator.serviceWorker.removeEventListener(\"message\",C.current);}},[]),p.useEffect(()=>{if(!u.trim()){c(null),f([]),m([]),n(null),y(false);return}if(!navigator.serviceWorker||!navigator.serviceWorker.controller){n(\"Service worker not ready\"),y(false);return}y(true),n(null),S.current++,console.log(\"Sending expression to service worker:\",{expression:u.trim(),controlKey:d.current,id:S.current}),navigator.serviceWorker.controller.postMessage({type:\"PARSE_AST\",payload:{expression:u.trim(),id:S.current,controlKey:d.current}});},[u]),{ast:t,tokens:o,dependencies:N,isLoading:b,error:e}}function Ee({ast:u,key:i,className:t,variant:c=\"inline\",showTokens:o=false,tokens:f=[]}){let N=e=>{switch(e){case \"StringLiteral\":return \"uii:text-green-600 uii:bg-green-100\";case \"NumericLiteral\":return \"uii:text-purple-600 uii:bg-purple-100\";case \"Identifier\":return \"uii:text-blue-600 uii:bg-blue-100\";case \"Keyword\":case \"Literal\":return \"uii:text-orange-600 uii:bg-orange-100\";case \"BinaryExpression\":return \"uii:text-gray-700 uii:bg-gray-100\";case \"CallExpression\":return \"uii:text-indigo-600 uii:bg-indigo-100\";case \"MemberExpression\":return \"uii:text-cyan-600 uii:bg-cyan-100\";case \"UnaryExpression\":return \"uii:text-pink-600 uii:bg-pink-100\";case \"ParenthesizedExpression\":return \"uii:text-yellow-600 uii:bg-yellow-100\";default:return \"uii:text-gray-600 uii:bg-gray-100\"}},m=(e,n=0)=>n>2?null:e.type===\"Identifier\"?p__namespace.default.createElement(\"span\",{key:`${e.start}-${e.end}`,className:\"uii:inline-flex uii:items-center uii:mr-1\"},p__namespace.default.createElement(\"span\",{className:\"uii:px-1 uii:py-0.5 uii:rounded uii:text-xs uii:bg-blue-100 uii:text-blue-800 uii:font-mono\"},e.name||e.value)):e.type===\"StringLiteral\"||e.type===\"NumericLiteral\"?p__namespace.default.createElement(\"span\",{key:`${e.start}-${e.end}`,className:\"uii:inline-flex uii:items-center uii:mr-1\"},p__namespace.default.createElement(\"span\",{className:\"uii:px-1 uii:py-0.5 uii:rounded uii:text-xs uii:bg-green-100 uii:text-green-800 uii:font-mono\"},e.value)):e.type===\"BinaryExpression\"?p__namespace.default.createElement(\"span\",{key:`${e.start}-${e.end}`,className:\"uii:inline-flex uii:items-center uii:mr-1\"},e.left&&m(e.left,n+1),p__namespace.default.createElement(\"span\",{className:\"uii:px-1 uii:py-0.5 uii:rounded uii:text-xs uii:bg-purple-100 uii:text-purple-800 uii:font-mono uii:mx-1\"},e.operator),e.right&&m(e.right,n+1)):e.type===\"CallExpression\"?p__namespace.default.createElement(\"span\",{key:`${e.start}-${e.end}`,className:\"uii:inline-flex uii:items-center uii:mr-1\"},e.callee&&m(e.callee,n+1),p__namespace.default.createElement(\"span\",{className:\"text-xs text-gray-600\"},\"()\")):e.type===\"PropertyAccessExpression\"?p__namespace.default.createElement(\"span\",{key:`${e.start}-${e.end}`,className:\"uii:inline-flex uii:items-center uii:mr-1\"},e.object&&m(e.object,n+1),p__namespace.default.createElement(\"span\",{className:\"text-xs text-gray-600\"},\".\"),e.property&&m(e.property,n+1)):p__namespace.default.createElement(\"span\",{key:`${e.start}-${e.end}`,className:\"uii:inline-flex uii:items-center uii:mr-1\"},p__namespace.default.createElement(\"span\",{className:\"px-1 py-0.5 rounded text-xs bg-gray-100 text-gray-600 font-mono\"},e.type)),b=(e,n=0)=>{if(n>4)return null;let S=\"  \".repeat(n);return p__namespace.default.createElement(\"div\",{key:`${e.start}-${e.end}`,className:\"font-mono text-xs\"},p__namespace.default.createElement(\"div\",{className:\"uii:flex uii:items-start uii:gap-2\"},p__namespace.default.createElement(\"span\",{className:\"uii:text-gray-400\"},S),p__namespace.default.createElement(\"span\",{className:M(\"uii:px-1 uii:py-0.5 uii:rounded uii:text-xs uii:font-semibold\",N(e.type))},e.type),e.value&&p__namespace.default.createElement(\"span\",{className:\"uii:text-green-600\"},'\"',e.value,'\"'),e.operator&&p__namespace.default.createElement(\"span\",{className:\"uii:text-purple-600\"},e.operator),e.name&&p__namespace.default.createElement(\"span\",{className:\"uii:text-blue-600\"},e.name)),e.left&&p__namespace.default.createElement(\"div\",{className:\"uii:ml-2\"},p__namespace.default.createElement(\"span\",{className:\"uii:text-gray-500 uii:text-xs\"},\"left: \"),b(e.left,n+1)),e.right&&p__namespace.default.createElement(\"div\",{className:\"uii:ml-2\"},p__namespace.default.createElement(\"span\",{className:\"uii:text-gray-500 uii:text-xs\"},\"right: \"),b(e.right,n+1)),e.argument&&p__namespace.default.createElement(\"div\",{className:\"uii:ml-2\"},p__namespace.default.createElement(\"span\",{className:\"uii:text-gray-500 uii:text-xs\"},\"arg: \"),b(e.argument,n+1)),e.object&&p__namespace.default.createElement(\"div\",{className:\"uii:ml-2\"},p__namespace.default.createElement(\"span\",{className:\"uii:text-gray-500 uii:text-xs\"},\"obj: \"),b(e.object,n+1)),e.property&&p__namespace.default.createElement(\"div\",{className:\"uii:ml-2\"},p__namespace.default.createElement(\"span\",{className:\"uii:text-gray-500 uii:text-xs\"},\"prop: \"),b(e.property,n+1)),e.index&&p__namespace.default.createElement(\"div\",{className:\"uii:ml-2\"},p__namespace.default.createElement(\"span\",{className:\"uii:text-gray-500 uii:text-xs\"},\"idx: \"),b(e.index,n+1)),!e.left&&!e.right&&!e.argument&&!e.object&&!e.property&&!e.index&&e.children&&e.children.length>0&&p__namespace.default.createElement(\"div\",{className:\"uii:ml-2\"},e.children.slice(0,3).map((C,d)=>b(C,n+1)),e.children.length>3&&p__namespace.default.createElement(\"div\",{className:\"uii:ml-2 uii:text-gray-500 uii:text-xs\"},\"... and \",e.children.length-3,\" more\")))},y=()=>{if(f.length===0)return null;let e=f.slice(0,10);return p__namespace.default.createElement(\"div\",{className:\"uii:space-y-2\"},p__namespace.default.createElement(\"div\",{className:\"uii:text-sm uii:font-semibold uii:text-gray-700\"},\"Tokens \",f.length>10&&`(${f.length} total)`,\":\"),p__namespace.default.createElement(\"div\",{className:\"uii:flex uii:flex-wrap uii:gap-1\"},e.map((n,S)=>p__namespace.default.createElement(\"span\",{key:S,className:M(\"uii:px-1 uii:py-0.5 uii:rounded uii:text-xs uii:font-mono\",n.type.includes(\"Keyword\")&&\"uii:bg-blue-100 uii:text-blue-800\",n.type.includes(\"Identifier\")&&\"uii:bg-green-100 uii:text-green-800\",n.type.includes(\"String\")&&\"uii:bg-yellow-100 uii:text-yellow-800\",n.type.includes(\"Numeric\")&&\"uii:bg-purple-100 uii:text-purple-800\",n.type.includes(\"Punctuation\")&&\"uii:bg-gray-100 uii:text-gray-800\",\"uii:bg-gray-100 uii:text-gray-600\")},n.value)),f.length>10&&p__namespace.default.createElement(\"span\",{className:\"uii:px-1 uii:py-0.5 uii:rounded uii:text-xs uii:bg-gray-200 uii:text-gray-600\"},\"+\",f.length-10,\" more\")))};return u?c===\"inline\"?p__namespace.default.createElement(\"div\",{className:M(\"uii:inline-flex uii:items-center uii:gap-2\",t)},m(u)):c===\"compact\"?p__namespace.default.createElement(\"div\",{className:M(\"uii:space-y-2\",t)},p__namespace.default.createElement(\"div\",{className:\"uii:flex uii:flex-wrap uii:gap-1\"},m(u)),o&&y()):p__namespace.default.createElement(\"div\",{className:M(\"uii:space-y-3\",t)},p__namespace.default.createElement(\"div\",{className:\"uii:space-y-2\"},p__namespace.default.createElement(\"div\",{className:\"uii:text-sm uii:font-semibold uii:text-gray-700\"},\"AST Tree:\"),p__namespace.default.createElement(\"div\",{className:\"uii:p-3 uii:border uii:rounded-md uii:bg-gray-50 uii:max-h-64 uii:overflow-auto\"},b(u))),o&&y()):p__namespace.default.createElement(\"div\",{className:M(\"uii:text-gray-500 uii:text-sm uii:italic\",t)},\"No AST available\")}function Be({label:u,value:i,type:t,valuesLoading:c=false,key:o,onValueChange:f,onDependenciesChange:N,metadata:m,children:b,fieldName:y,expressionContext:e={},availableNodes:n,myInterface:S,contextTypeDefinitions:C,inlineEditor:d=true,className:s,editorClassName:v,expressionPlaceholder:$=\"Enter expression...\",evaluateExpression:L,expressionResult:V,isEvaluating:W=false,isExpressionValid:J=true,expectedType:l=\"any\"}){let[x,E]=p.useState(()=>({...m||{expression:\"\",mode:\"value\",isEditing:false,isFullScreen:false,value:void 0},isEditing:false,isFullScreen:false,mode:\"value\"})),[w,k]=p.useState(i&&typeof i==\"object\"&&\"expression\"in i&&\"type\"in i&&i.type===\"expression\"?i.value:i),[T,B]=p.useState(i&&typeof i==\"object\"&&\"expression\"in i&&\"type\"in i&&i.type===\"expression\"?i.value:i),D=p.useCallback(a=>{switch(t){case \"float\":return typeof a==\"string\"&&!isNaN(parseFloat(a))?parseFloat(a):a;case \"integer\":case \"number\":return typeof a==\"string\"&&!isNaN(parseInt(a))?parseInt(a):a;case \"string[]\":return typeof a==\"string\"?a.split(\",\"):a;case \"string\":default:return a}},[t]),[vi,Qe]=p.useState(),Ze=le.getState().getState(y).expression;p.useEffect(()=>{m&&E({...m,isEditing:false,isFullScreen:false});},[m]);let Ye=p.useMemo(()=>i&&typeof i==\"object\"&&\"expression\"in i&&\"type\"in i&&i.type===\"expression\",[i]),ie=p.useRef(true);p.useEffect(()=>{if(i&&typeof i==\"object\"&&\"expression\"in i&&\"type\"in i&&i.type===\"expression\"){let a=i.value,h=i.expression;a!==void 0&&(B(D(a)),k(D(a))),h&&r.expression!==h&&(r.setExpression(h),ie.current&&!r.isEditing&&r.switchToExpression());let I=!m||m.expression!==h||m.mode===\"value\"||m.isEditing===true||m.isFullScreen===true;if(ie.current&&I){let F={expression:h||\"\",value:D(a),mode:\"expression\",isEditing:false,isFullScreen:false};setTimeout(()=>{f(i,{...F,value:D(i)});},0);}}else if(!c&&(B(D(i)),k(D(i)),ie.current&&(m?.expression||m?.mode===\"expression\"))){let a={expression:\"\",value:D(i),mode:\"value\",isEditing:false,isFullScreen:false};setTimeout(()=>{f(D(i),{...a,value:D(i)});},0);}ie.current&&setTimeout(()=>{ie.current=false;},100);},[i,c]);let r=Pe(y),{ast:Q,tokens:he,dependencies:z,isLoading:Se,error:G}=_e(r.expression,y),de=p.useMemo(()=>!Q||z.length===0?[]:z.map(a=>({name:a,exists:e?a in e:false,value:e?e[a]:void 0})),[z,e,Q]),[pe,Ge]=p.useState(null),Te=p.useCallback(a=>{Ge(a);},[]),H=p.useMemo(()=>r.expression.includes(`\n`)||r.expression.includes(\"\\r\"),[r.expression]),A=p.useMemo(()=>pe||\"unknown\",[pe]),se=p.useMemo(()=>{if(!A||A===\"unknown\"||A===\"any\"||A===\"error\")return  false;let a=A.toLowerCase().trim(),h=(t||l||\"any\").toLowerCase().trim();return !(h===\"array\"&&a.endsWith(\"[]\")||a===h||h===\"any\"||h===\"string\"&&(a.startsWith('\"')||a.startsWith(\"'\"))||h===\"number\"&&/^-?\\d+(\\.\\d+)?([eE][+-]?\\d+)?$/.test(a)||h===\"integer\"&&/^-?\\d+(\\.\\d+)?([eE][+-]?\\d+)?$/.test(a)||h===\"integer\"&&a===\"number\"||h===\"float\"&&/^-?\\d+(\\.\\d+)?([eE][+-]?\\d+)?$/.test(a)||h===\"float\"&&a===\"number\"||h===\"boolean\"&&(a===\"true\"||a===\"false\"))},[A,t,l]),[ne,Ne]=p.useState(null),[Xe,we]=p.useState(false),[Re,ke]=p.useState(false),[ge,ei]=p.useState(true),[fe,ii]=p.useState({syntax:true,expression:true,context:true,type:true,security:true}),Me=p.useMemo(()=>!r.expression||!r.expression.trim()?false:!!(!ge||!J||G||!fe.syntax||!fe.expression||V?.error||ne?.error),[r.expression,ge,J,G,fe,V,ne]),oe=p.useRef(false),X=p.useRef(false),ae=p.useRef(false),ti=p.useCallback((a,h)=>{ei(a),ii(I=>({...I,syntax:a}));},[]),Ce=p.useCallback(a=>{let h=a.includes(`\n`),I=a.length>80;r.isFullScreen||r.setFullScreen(h||I);},[r.isFullScreen]),ri=p.useCallback(async(a,h)=>{if(!(!L||!a.trim())){we(true);try{let I=await L(a,h);Ne(I);}catch(I){Ne({value:null,ast:{kind:0,text:\"\",color:\"#ff0000\"},error:I instanceof Error?I.message:\"Unknown error\",isValid:false,validation:{syntax:false,expression:false,context:false,type:false,security:false}});}finally{we(false);}}},[L]),j=p.useMemo(()=>({expression:r.expression,value:T,mode:r.current,isEditing:r.isEditing,isFullScreen:r.isFullScreen}),[r.expression,r.current,r.isFullScreen,r.isEditing,T]),si=p.useMemo(()=>({expression:r.expression,type:\"expression\"}),[r.currentValue||r.expression]),Fe=p.useCallback(a=>{f(D(a),{...j,value:D(a)});},[f,r,Ye,T]),ue=p.useCallback(a=>{oe.current=false,r.setExpression(a),Qe(a),Ce(a),f({expression:a,type:\"expression\"},{...j,expression:a});},[r,e,f,L,ri,Ce]),xe=p.useCallback(async(a,h=false)=>{if(oe.current){oe.current=false;return}if(X.current){X.current=false;return}r.isFullScreen&&!h||H&&!h||(ae.current=true,r.setEditing(false),r.setFullScreen(false));},[r,V,ne,e,f,T,W,Xe,si,H]);p.useEffect(()=>{f(T,{...j,isFullScreen:r.isFullScreen});},[r.isFullScreen]),p.useEffect(()=>{r.isEditing&&H&&!r.isFullScreen&&r.setFullScreen(true);},[H,r.isEditing,r.isFullScreen]);let Z=p.useCallback(a=>{switch(a){case \"value\":r.switchToValue(),r.setFullScreen(false),f(w||i,void 0);break;case \"editor\":r.switchToEditor();let h=H;h&&r.setFullScreen(true);let I={expression:r.expression,value:T,mode:\"expression\",isEditing:true,isFullScreen:h};f(r.expression?{expression:r.expression,type:\"expression\"}:T,I);break;case \"expression\":k(T),r.switchToExpression(),H&&r.setFullScreen(true);break}},[r,T,f,H,w,i]);p.useEffect(()=>{ae.current&&(r.expression&&r.expression.trim()?f(j.mode===\"value\"?j.value??\"\":{expression:j.expression.trim(),type:\"expression\"},{...j,isEditing:false,isFullScreen:false}):(r.switchToValue(),f(j.value??\"\",{...j,mode:\"value\",expression:\"\",isEditing:false,isFullScreen:false})),ae.current=false);},[r.isEditing,r.isFullScreen,ae.current]),p.useEffect(()=>{N&&N(z);},[z,N]);let me=p.useCallback(()=>{oe.current=true,f(T,j),Z(\"value\"),r.setFullScreen(false);},[f,r,w]),[ni,Ae]=p.useState(T);p.useEffect(()=>{Ae(T);},[T]);let Ve=p.useMemo(()=>({value:T,onChange:Fe,onExpressionClick:()=>Z(\"editor\"),inferredType:A,hasTypeMismatch:se,hasError:Me,localInput:ni,setLocalInput:Ae,expressionMode:{current:r.current,switchToValue:()=>Z(\"value\"),switchToExpression:()=>Z(\"expression\"),switchToEditor:()=>Z(\"editor\"),clear:me,isExpressionMode:r.isExpressionMode,isEditorMode:r.isEditorMode,expression:r.expression,setExpression:ue,isEditing:r.isEditing,setEditing:r.setEditing,isFullScreen:r.isFullScreen,setFullScreen:r.setFullScreen}}),[T,Fe,r,Z,me,ue,A,se,Me]),oi=()=>{switch(r.current){case \"expression\":r.expression&&r.expression.trim();(V||ne)?.isValid;return Ve.expressionMode.isEditing?p__namespace.default.createElement(\"div\",{key:`${o}-expression`,className:M(\"relative\",s)},d&&!r.isFullScreen&&!H?p__namespace.default.createElement(\"div\",{className:M(`uii:flex uii:h-9 uii:w-full \n              uii:min-w-0 uii:rounded-sm \n              uii:border uii:border-ring \n              uii:bg-background uii:px-3 uii:py-1 uii:text-base uii:shadow-xs \n              uii:ring-ring/50 uii:ring-[3px] uii:transition-[color,box-shadow] \n              uii:outline-none uii:md:text-sm uii:cursor-pointer\n              uii:mt-0.5 `,v)},p__namespace.default.createElement(je,{value:r.expression,onChange:F=>{ue(F);},onEnter:()=>{X.current=true,r.setFullScreen(true),setTimeout(()=>{X.current=false;},100);},onBlur:xe,onTypeInferred:Te,onValidationChange:ti,context:e,placeholder:$}),p__namespace.default.createElement(\"div\",{className:\"uii:flex uii:items-center uii:gap-2 uii:mt-0.5\"},p__namespace.default.createElement(\"span\",{className:\"uii:text-xs uii:font-mono uii:cursor-pointer uii:text-muted-foreground\",onMouseDown:F=>{F.preventDefault(),F.stopPropagation(),X.current=true,r.setFullScreen(true),setTimeout(()=>{X.current=false;},100);}},p__namespace.default.createElement(reactFontawesome.FontAwesomeIcon,{icon:proRegularSvgIcons.faExpand})),p__namespace.default.createElement(\"span\",{className:\"uii:text-xs uii:font-mono uii:cursor-pointer uii:text-muted-foreground\",onMouseDown:F=>{F.preventDefault(),me();}},\"Clear\"))):p__namespace.default.createElement(\"div\",{className:\"uii:space-y-4\"},p__namespace.default.createElement(Ke,{value:r.expression,onChange:F=>{ue(F);},onClose:()=>{xe(void 0,true),r.setFullScreen(false);},onBlur:xe,onTypeInferred:Te,context:e,placeholder:$}),(Q||z.length>0)&&p__namespace.default.createElement(\"div\",{className:\"uii:space-y-3\"},A&&A!==\"unknown\"&&p__namespace.default.createElement(\"div\",{className:\"uii:space-y-2\"},p__namespace.default.createElement(\"div\",{className:\"uii:flex uii:items-center uii:gap-2\"},p__namespace.default.createElement(\"div\",{className:\"uii:text-sm uii:font-semibold uii:text-gray-700\"},\"Inferred Return Type:\"),pe&&A!==\"error\"&&p__namespace.default.createElement(\"span\",{className:\"uii:px-1.5 uii:py-0.5 uii:text-xs uii:rounded uii:bg-blue-100 uii:text-blue-700 uii:border uii:border-blue-200\"},\"TypeScript\")),p__namespace.default.createElement(\"div\",{className:\"uii:flex uii:items-center uii:gap-2\"},A===\"error\"?p__namespace.default.createElement(\"span\",{className:\"uii:px-3 uii:py-1.5 uii:text-sm uii:font-mono uii:rounded uii:border uii:bg-red-50 uii:text-red-800 uii:border-red-200\"},\"\\u274C Syntax Error\"):p__namespace.default.createElement(p__namespace.default.Fragment,null,p__namespace.default.createElement(\"span\",{className:\"uii:px-3 uii:py-1.5 uii:text-sm uii:font-mono uii:rounded uii:border uii:bg-purple-50 uii:text-purple-800 uii:border-purple-200\"},A),se&&p__namespace.default.createElement(\"span\",{className:\"uii:text-xs uii:text-orange-600 uii:font-semibold\"},\"\\u26A0\\uFE0F Expected: \",t||l)))),de.length>0&&p__namespace.default.createElement(\"div\",{className:\"uii:space-y-2\"},p__namespace.default.createElement(\"div\",{className:\"uii:text-sm uii:font-semibold uii:text-gray-700\"},\"Dependencies (\",de.length,\"):\"),p__namespace.default.createElement(\"div\",{className:\"uii:flex uii:flex-wrap uii:gap-2\"},de.map((F,ye)=>p__namespace.default.createElement(\"span\",{key:ye,className:M(\"uii:px-2 uii:py-1 uii:text-sm uii:rounded uii:border\",F.exists?\"uii:bg-blue-100 uii:text-blue-800 uii:border-blue-200\":\"uii:bg-red-100 uii:text-red-800 uii:border-red-200\"),title:F.exists?`Value: ${JSON.stringify(F.value)}`:\"Not found in context\"},F.name)))),Q&&p__namespace.default.createElement(Ee,{ast:Q,tokens:he,variant:\"tree\",showTokens:true,className:\"uii:w-full\"}),Se&&p__namespace.default.createElement(\"div\",{className:\"uii:text-sm uii:text-gray-500 uii:italic\"},\"Parsing expression...\"),G&&p__namespace.default.createElement(\"div\",{className:\"uii:text-sm uii:text-red-600\"},\"Parse Error: \",G)))):p__namespace.default.createElement(\"div\",{className:M(\"uii:relative\",s),key:`${o}-expression-display`},p__namespace.default.createElement(\"div\",{className:pi__default.default(\"uii:flex uii:h-9 uii:w-full uii:min-w-0 uii:rounded-sm uii:border uii:border-input uii:bg-transparent uii:px-3 uii:py-1 uii:text-base uii:shadow-xs uii:transition-[color,box-shadow] uii:outline-none uii:focus-visible:border-ring uii:focus-visible:ring-ring/50 uii:focus-visible:ring-[3px] uii:md:text-sm uii:cursor-pointer uii:hover:bg-muted/50\",\"uii:mt-0.5 uii:bg-white uii:rounded-md uii:items-center\"),onClick:()=>Z(\"editor\"),onMouseEnter:()=>ke(true),onMouseLeave:()=>ke(false)},p__namespace.default.createElement(\"span\",{className:\"uii:flex-1 uii:truncate uii:text-foreground uii:items-center\"},Re?p__namespace.default.createElement(\"div\",{className:\"uii:flex uii:items-center uii:gap-2\"},Q?p__namespace.default.createElement(Ee,{key:`${o}-ast`,ast:Q,tokens:he,variant:\"inline\",showTokens:false,className:\"uii:text-xs\"}):p__namespace.default.createElement(\"div\",{className:\"uii:text-xs uii:text-gray-500\"},Se?\"Parsing...\":G?`Error: ${G}`:\"No AST available\"),z.length>0&&p__namespace.default.createElement(\"div\",{className:\"uii:flex uii:gap-1\"},z.map((F,ye)=>p__namespace.default.createElement(\"span\",{key:ye,className:\"uii:px-1 uii:py-0.5 uii:bg-blue-100 uii:text-blue-800 uii:text-xs uii:rounded\"},F)))):p__namespace.default.createElement(\"span\",{className:\"uii:font-mono uii:text-sm\"},Ze||\"No expression\"))));default:return b(Ve)}};return p__namespace.default.createElement(p__namespace.default.Fragment,null,p__namespace.default.createElement(\"div\",{className:\"uii:flex uii:items-center uii:gap-2 uii:mt-2\"},p__namespace.default.createElement(\"label\",{className:\"uii:text-xs uii:text-muted-foreground uii:font-bold\",htmlFor:o},u,\":\"),p__namespace.default.createElement(\"span\",{className:\"uii:-mt-2 uii:inline-flex uii:px-1 uii:py-0.5 uii:bg-gray-200 uii:rounded-sm uii:text-[10px] uii:font-mono uii:text-muted-foreground uii:font-light\"},t),se||A===\"error\"?p__namespace.default.createElement(p__namespace.default.Fragment,null,r.current===\"expression\"?p__namespace.default.createElement(p__namespace.default.Fragment,null,p__namespace.default.createElement(\"span\",{className:\"uii:-mt-2 uii:inline-flex uii:px-1 uii:py-0.5 uii:bg-gray-200 uii:rounded-sm uii:text-[10px] uii:font-mono uii:text-muted-foreground uii:font-light\"},r.expression.trim()!==\"\"?A:\"empty\"),p__namespace.default.createElement(\"span\",{className:\"uii:-mt-2 uii:inline-flex uii:px-1 uii:py-0.5 uii:bg-gray-200 uii:rounded-sm uii:text-[10px] uii:font-mono uii:font-light uii:text-orange-600 \"},\"\\u26A0\\uFE0F Expected: \",t||l)):p__namespace.default.createElement(p__namespace.default.Fragment,null)):p__namespace.default.createElement(p__namespace.default.Fragment,null)),oi())}function ut({className:u,expectedType:i,...t}){let[c,o]=p.useState(t.value),[f,N]=p.useState({});return p__namespace.createElement(Be,{label:t.label??\"Test Entry\",key:t.name,type:i??\"string\",valuesLoading:false,value:t.value,onValueChange:(m,b)=>{o(m),b&&N(b);},expectedType:i,fieldName:t.name,children:({onExpressionClick:m,onChange:b,value:y,localInput:e,setLocalInput:n})=>p__namespace.createElement(\"div\",{className:\"uii:relative uii:text-xs uii:mt-0.5\"},p__namespace.createElement(Ie,{type:\"text\",value:e,onChange:S=>{n(S.target.value),b(S.target.value);},placeholder:t.placeholder??\"Enter value...\"}),p__namespace.createElement(\"div\",{className:\"uii:flex uii:bg-white uii:border-white/40 uii:border-l-8 uii:items-center uii:gap-1 uii:absolute uii:right-1.5 uii:top-2.5 uii:cursor-pointer uii:truncate\",onClick:()=>m()},p__namespace.createElement(\"span\",{className:\"uii:border-l uii:border-gray-200 uii:px-2\"},\"Custom Expression\")))})}var He=u=>typeof u==\"boolean\"?`${u}`:u===0?\"0\":u,Ue=pi.clsx,qe=(u,i)=>t=>{var c;if(i?.variants==null)return Ue(u,t?.class,t?.className);let{variants:o,defaultVariants:f}=i,N=Object.keys(o).map(y=>{let e=t?.[y],n=f?.[y];if(e===null)return null;let S=He(e)||He(n);return o[y][S]}),m=t&&Object.entries(t).reduce((y,e)=>{let[n,S]=e;return S===void 0||(y[n]=S),y},{}),b=i==null||(c=i.compoundVariants)===null||c===void 0?void 0:c.reduce((y,e)=>{let{class:n,className:S,...C}=e;return Object.entries(C).every(d=>{let[s,v]=d;return Array.isArray(v)?v.includes({...f,...m}[s]):{...f,...m}[s]===v})?[...y,n,S]:y},[]);return Ue(u,N,b,t?.class,t?.className)};var yi=qe(\"ui:inline-flex ui:items-center ui:justify-center ui:gap-2 ui:whitespace-nowrap ui:rounded-sm ui:text-sm ui:font-medium ui:transition-[color,box-shadow] ui:disabled:pointer-events-none ui:disabled:opacity-50 ui:[&_svg]:pointer-events-none ui:[&_svg:not([class*=size-])]:size-4 ui:shrink-0 ui:[&_svg]:shrink-0 ui:outline-none ui:focus-visible:border-ring ui:focus-visible:ring-ring/50 ui:focus-visible:ring-[3px] ui:aria-invalid:ring-destructive/20 ui:dark:aria-invalid:ring-destructive/40 ui:aria-invalid:border-destructive ui:cursor-pointer\",{variants:{variant:{default:\"ui:bg-primary ui:text-primary-foreground ui:shadow-xs ui:hover:bg-primary/90 ui:select-none\",destructive:\"ui:bg-destructive ui:text-white ui:shadow-xs ui:hover:bg-destructive/90 ui:focus-visible:ring-destructive/20 ui:dark:focus-visible:ring-destructive/40\",outline:\"ui:border ui:border-input ui:bg-background ui:shadow-xs ui:hover:bg-accent ui:hover:text-accent-foreground\",secondary:\"ui:bg-secondary ui:text-secondary-foreground ui:shadow-xs ui:hover:bg-secondary/80\",ghost:\"ui:hover:bg-accent ui:hover:text-accent-foreground\",link:\"ui:text-primary ui:underline-offset-4 ui:hover:underline\"},size:{default:\"ui:h-9 ui:px-4 ui:py-2 ui:has-[>svg]:px-3\",sm:\"ui:h-8 ui:rounded-sm ui:gap-1.5 ui:px-3 ui:has-[>svg]:px-2.5\",lg:\"ui:h-10 ui:rounded-sm ui:px-6 ui:has-[>svg]:px-4\",icon:\"ui:size-9\"}},defaultVariants:{variant:\"default\",size:\"default\"}});function xt({className:u,variant:i,size:t,asChild:c=false,...o}){return p__namespace.createElement(c?reactSlot.Slot:\"button\",{\"data-slot\":\"button\",className:M(yi({variant:i,size:t,className:u})),...o})}exports.Button=xt;exports.Input=ut;exports.buttonVariants=yi;//# sourceMappingURL=index.cjs.map\n","import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Returns the object if it is in the browser, otherwise returns an empty object.\n * This is useful for ensuring that the object is only used in the browser.\n * @param obj - The object to check.\n * @returns The object if it is in the browser, otherwise an empty object.\n */\nexport function useClient<T>(obj: T): T {\n  if (typeof globalThis.window === 'undefined') {\n    return {} as T;\n  }\n  return obj;\n}\n \n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n \n \n \n/**\n * ### Get the src of an image\n * #### Note: This should not be needed but importing `Images` is not consistent between various bundlers.\n * This function is used to get the src of an imported asset. It is used in the `Image` component.\n * @param image - The image to get the src of\n * @returns The src of the image\n * @example\n * getImageSrc('https://example.com/image.jpg') // 'https://example.com/image.jpg'\n * getImageSrc({ src: 'https://example.com/image.jpg' }) // 'https://example.com/image.jpg'\n * getImageSrc({ src: 'https://example.com/image.jpg', alt: 'Example Image' }) // 'https://example.com/image.jpg'\n *\n */\nexport function getImageSrc(image: string | { src: string } | any) {\n  if (typeof image === 'string') {\n    return image;\n  }\n  return image.src;\n}\n","import * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nfunction Input({\n  className,\n  wrapperClassName,\n  type,\n  required,\n  error,\n  ...props\n}: React.ComponentProps<'input'> & { error?: boolean, wrapperClassName?: string }) {\n  return (\n    <div className={cn('uii:relative', wrapperClassName)}>\n      <input\n        aria-invalid={error}\n        type={type}\n        data-slot=\"input\"\n        className={cn(\n          'uii:border-input uii:file:text-foreground uii:placeholder:text-muted-foreground uii:selection:bg-primary uii:selection:text-primary-foreground uii:flex uii:h-9 uii:w-full uii:min-w-0 uii:rounded-sm uii:border uii:bg-transparent uii:px-3 uii:py-1 uii:text-base uii:shadow-xs uii:transition-[color,box-shadow] uii:outline-none uii:file:inline-flex uii:file:h-7 uii:file:border-0 uii:file:bg-transparent uii:file:text-sm uii:file:font-medium uii:disabled:pointer-events-none uii:disabled:cursor-not-allowed uii:disabled:opacity-50 uii:md:text-sm',\n          'uii:focus-visible:border-ring uii:focus-visible:ring-ring/50 uii:focus-visible:ring-[3px]',\n          'uii:aria-invalid:ring-destructive/20 uii:dark:aria-invalid:ring-destructive/40 uii:aria-invalid:border-destructive',\n          {\n            'uii:pr-30': error,\n          },\n          className,\n        )}\n        {...props}\n      />\n      {error && (\n        <span className=\"uii:absolute uii:inset-y-0 uii:right-0 uii:flex uii:items-center uii:pr-2 uii:border-l-10 uii:border-l-background uii:my-[6px] uii:pointer-events-none \">\n          <span className=\"uii:bg-destructive uii:text-white uii:px-1.5 uii:py-1.5 uii:rounded-xs uii:uppercase uii:tracking-wide uii:font-medium uii:text-xs uii:leading-none uii:font-sans\">\n            {error && required ? 'required' : 'error'}\n          </span>\n        </span>\n      )}\n    </div>\n  );\n}\n\nexport { Input };\n","import { create } from 'zustand';\nimport { ExpressionModeState } from '../hooks/useExpressionMode';\n\ninterface ExpressionModeStore {\n  // Store state by field name\n  states: Record<string, ExpressionModeState>;\n\n  // Actions\n  setState: (fieldName: string, state: ExpressionModeState) => void;\n  getState: (fieldName: string) => ExpressionModeState;\n  clear: (fieldName: string) => void;\n\n  // Helper actions\n  switchToValue: (fieldName: string) => void;\n  switchToExpression: (fieldName: string) => void;\n  switchToEditor: (fieldName: string) => void;\n  setExpression: (fieldName: string, expression: string) => void;\n  setEditing: (fieldName: string, isEditing: boolean) => void;\n  setCurrentValue: (fieldName: string, value: any) => void;\n  setFullScreen: (fieldName: string, isFullScreen: boolean) => void;\n}\n\nconst defaultState: ExpressionModeState = {\n  expression: '',\n  mode: 'value',\n  isEditing: false,\n  currentValue: undefined,\n  isFullScreen: false\n};\n\nexport const useExpressionModeStore = create<ExpressionModeStore>((set, get) => ({\n  states: {},\n\n  setState: (fieldName: string, state: ExpressionModeState) => {\n    set((store) => ({\n      states: {\n        ...store.states,\n        [fieldName]: state\n      }\n    }));\n  },\n\n  getState: (fieldName: string) => {\n    const store = get();\n    return store.states[fieldName] || defaultState;\n  },\n\n  clear: (fieldName: string) => {\n    set((store) => ({\n      states: {\n        ...store.states,\n        [fieldName]: defaultState\n      }\n    }));\n  },\n\n  switchToValue: (fieldName: string) => {\n    const currentState = get().getState(fieldName);\n    get().setState(fieldName, {\n      ...currentState,\n      mode: 'value',\n      isEditing: false\n    });\n  },\n\n  switchToExpression: (fieldName: string) => {\n    const currentState = get().getState(fieldName);\n    get().setState(fieldName, {\n      ...currentState,\n      mode: 'expression',\n      isEditing: false\n    });\n  },\n\n  switchToEditor: (fieldName: string) => {\n    const currentState = get().getState(fieldName);\n    get().setState(fieldName, {\n      ...currentState,\n      mode: 'expression',\n      isEditing: true\n    });\n  },\n\n  setExpression: (fieldName: string, expression: string) => {\n    const currentState = get().getState(fieldName);\n    get().setState(fieldName, {\n      ...currentState,\n      expression\n    });\n  },\n\n  setEditing: (fieldName: string, isEditing: boolean) => {\n    const currentState = get().getState(fieldName);\n    get().setState(fieldName, {\n      ...currentState,\n      isEditing\n    });\n  },\n  setFullScreen: (fieldName: string, isFullScreen: boolean) => {\n    const currentState = get().getState(fieldName);\n    get().setState(fieldName, {\n      ...currentState,\n      isFullScreen\n    });\n  },\n  setCurrentValue: (fieldName: string, value: any) => {\n    const currentState = get().getState(fieldName);\n    get().setState(fieldName, {\n      ...currentState,\n      currentValue: value\n    });\n  }\n}));\n","import { useCallback } from 'react';\nimport { useExpressionModeStore } from '../stores/expressionModeStore';\n\nexport interface ExpressionModeState {\n  expression: string;\n  mode: 'value' | 'expression';\n  isEditing: boolean;\n  isFullScreen: boolean;\n  currentValue?: any;\n}\n\nexport interface ExpressionModeControls {\n  current: 'value' | 'expression';\n  switchToValue: () => void;\n  switchToExpression: () => void;\n  switchToEditor: () => void;\n  clear: () => void;\n  isExpressionMode: boolean;\n  isEditorMode: boolean;\n  expression: string;\n  setExpression: (expr: string) => void;\n  isEditing: boolean;\n  setEditing: (editing: boolean) => void;\n  currentValue?: any;\n  isFullScreen: boolean;\n  setFullScreen: (isFullScreen: boolean) => void;\n  setCurrentValue: (value: any) => void;\n\n  localInput: string,\n\n  setLocalInput: (value: any) => void;\n}\n\n/**\n * Hook for managing expression mode state using Zustand store\n * @param fieldName - Unique identifier for the field\n * @returns Expression mode controls and state\n */\nexport function useExpressionMode(fieldName: string): Omit<ExpressionModeControls, \"localInput\" | \"setLocalInput\"> {\n  const store = useExpressionModeStore();\n  const state = store.getState(fieldName);\n\n  const switchToValue = useCallback(() => {\n    store.switchToValue(fieldName);\n  }, [store, fieldName]);\n\n  const switchToExpression = useCallback(() => {\n    store.switchToExpression(fieldName);\n  }, [store, fieldName]);\n\n  const switchToEditor = useCallback(() => {\n    store.switchToEditor(fieldName);\n  }, [store, fieldName]);\n\n  const clear = useCallback(() => {\n    store.clear(fieldName);\n  }, [store, fieldName]);\n\n  const setExpression = useCallback((expr: string) => {\n    store.setExpression(fieldName, expr);\n  }, [store, fieldName]);\n\n  const setEditing = useCallback((editing: boolean) => {\n    store.setEditing(fieldName, editing);\n  }, [store, fieldName]);\n\n  const setCurrentValue = useCallback((value: any) => {\n    store.setCurrentValue(fieldName, value);\n  }, [store, fieldName]);\n\n  const setFullScreen = useCallback((isFullScreen: boolean) => {\n    store.setFullScreen(fieldName, isFullScreen);\n  }, [store, fieldName]);\n\n  return {\n    current: state.mode,\n    switchToValue,\n    switchToExpression,\n    switchToEditor,\n    clear,\n    isExpressionMode: state.mode === 'expression',\n    isEditorMode: state.isEditing,\n    expression: state.expression,\n    setExpression,\n    isEditing: state.isEditing,\n    setEditing,\n    currentValue: state.currentValue,\n    setCurrentValue,\n    isFullScreen: state.isFullScreen,\n    setFullScreen,\n  };\n}\n","import React, { useRef, useEffect, useCallback } from 'react';\nimport { Editor } from '@monaco-editor/react';\nimport { cn } from '@/lib/utils';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/pro-regular-svg-icons';\n\nexport interface ExpressionContext {\n  [key: string]: any;\n}\n\nexport interface InlineExpressionEditorProps {\n  value: string;\n  onChange: (value: string) => void;\n  onBlur?: (e: any) => void;\n  onEnter?: () => void; // Called when Enter is pressed (to switch to full-screen)\n  onTypeInferred?: (type: string) => void; // Callback when TypeScript infers the type\n  onValidationChange?: (isValid: boolean, errors: any[]) => void;\n  context?: ExpressionContext;\n  className?: string;\n  placeholder?: string;\n}\n\nexport interface FullPanelExpressionEditorProps {\n  value: string;\n  onChange: (value: string) => void;\n  onClose: () => void;\n  onBlur?: (e: any) => void;\n  onTypeInferred?: (type: string) => void; // Callback when TypeScript infers the type\n  context?: ExpressionContext;\n  className?: string;\n  placeholder?: string;\n}\n\n/**\n * Shared function to infer TypeScript type from an expression\n * Used by both inline and full-screen editors\n * Returns 'error' if there are Monaco validation errors\n */\nasync function inferTypeFromMonaco(\n  editor: any,\n  monaco: any,\n  expression: string,\n  logPrefix: string = '🔷'\n): Promise<string | null> {\n  if (!expression.trim()) {\n    console.log(`${logPrefix} Type inference skipped - no expression`);\n    return null;\n  }\n  \n  // Only infer type if THIS editor has focus\n  if (!editor.hasTextFocus()) {\n    console.log(`${logPrefix} Skipping type inference - editor does not have focus`);\n    return null;\n  }\n\n  console.log(`${logPrefix} Running type inference, expression:`, expression);\n\n  try {\n    // Check for Monaco validation errors first\n    const currentModel = editor.getModel();\n    if (currentModel) {\n      const markers = monaco.editor.getModelMarkers({ resource: currentModel.uri });\n      const hasErrors = markers.some((marker: any) => marker.severity === monaco.MarkerSeverity.Error);\n      \n      if (hasErrors) {\n        console.log(`${logPrefix} Type inference skipped - expression has validation errors`);\n        return 'error';\n      }\n    }\n\n    // Create a temporary model with the expression wrapped\n    // This allows TypeScript to infer the type properly\n    const wrappedCode = `const __expr__ = (${expression});`;\n    const tempModel = monaco.editor.createModel(wrappedCode, 'typescript');\n    \n    // Get TypeScript worker\n    const worker = await monaco.languages.typescript.getTypeScriptWorker();\n    const client = await worker(tempModel.uri);\n\n    // Find position of __expr__ variable\n    const exprIndex = wrappedCode.indexOf('__expr__');\n    const position = tempModel.getPositionAt(exprIndex);\n\n    const quickInfo = await client.getQuickInfoAtPosition(\n      tempModel.uri.toString(),\n      tempModel.getOffsetAt(position)\n    );\n\n    console.log(`${logPrefix} QuickInfo response:`, quickInfo);\n\n    let extractedType: string | null = null;\n\n    if (quickInfo && quickInfo.displayParts) {\n      // Extract type from displayParts\n      let foundColon = false;\n      const typeParts: any[] = [];\n      \n      for (const part of quickInfo.displayParts) {\n        if (foundColon) typeParts.push(part);\n        if (part.kind === 'punctuation' && part.text === ':' && !foundColon) {\n          const prevPart = quickInfo.displayParts[quickInfo.displayParts.indexOf(part) - 1];\n          if (prevPart && (prevPart.kind === 'localName' || prevPart.kind === 'parameterName')) {\n            foundColon = true;\n          }\n        }\n      }\n\n      if (typeParts.length > 0) {\n        const typeString = typeParts.map((p: any) => p.text).join('').trim();\n        console.log(`${logPrefix} Extracted type:`, typeString);\n        if (typeString && typeString !== 'any') {\n          extractedType = typeString;\n        }\n      }\n    }\n    \n    // Clean up temporary model\n    tempModel.dispose();\n    return extractedType;\n  } catch (error) {\n    console.warn(`${logPrefix} Type inference failed:`, error);\n    return null;\n  }\n}\n\n// Monaco options to match Input component styling\nconst InlineEditorOptions = {\n  fontSize: '14px', // md:text-sm\n  fontWeight: 'normal',\n  wordWrap: 'off',\n  lineNumbers: 'off',\n  lineNumbersMinChars: 0,\n  overviewRulerLanes: 0,\n  overviewRulerBorder: false,\n  hideCursorInOverviewRuler: true,\n  lineDecorationsWidth: 0,\n  glyphMargin: false,\n  folding: false,\n  scrollBeyondLastColumn: 0,\n  scrollbar: {\n    horizontal: 'hidden',\n    vertical: 'hidden',\n    alwaysConsumeMouseWheel: false,\n  },\n  find: {\n    addExtraSpaceOnTop: false,\n    autoFindInSelection: 'never',\n    seedSearchStringFromSelection: false,\n  },\n  minimap: { enabled: false },\n  wordBasedSuggestions: true, // Enable for better UX\n  links: false,\n  occurrencesHighlight: false,\n  cursorStyle: 'line', // Match input cursor\n  renderLineHighlight: 'none',\n  contextmenu: false,\n  roundedSelection: false,\n  hover: {\n    delay: 300,\n  },\n  acceptSuggestionOnEnter: 'on',\n  automaticLayout: true,\n  fixedOverflowWidgets: true,\n  // Match Input component styling\n  padding: { top: 4, bottom: 4 }, // py-1 equivalent\n  fontFamily: 'inherit', // Use system font\n  letterSpacing: 'normal',\n  lineHeight: 'normal',\n} as any;\n\nconst FullPanelEditorOptions = {\n  fontSize: '14px',\n  fontWeight: 'normal',\n  wordWrap: 'on',\n  lineNumbers: 'on',\n  lineNumbersMinChars: 3,\n  overviewRulerLanes: 3,\n  overviewRulerBorder: true,\n  hideCursorInOverviewRuler: false,\n  lineDecorationsWidth: 10,\n  glyphMargin: true,\n  folding: true,\n  scrollBeyondLastColumn: 5,\n  scrollbar: {\n    horizontal: 'auto',\n    vertical: 'auto',\n    alwaysConsumeMouseWheel: false,\n  },\n  find: {\n    addExtraSpaceOnTop: false,\n    autoFindInSelection: 'never',\n    seedSearchStringFromSelection: false,\n  },\n  minimap: { enabled: true },\n  wordBasedSuggestions: true,\n  links: true,\n  occurrencesHighlight: true,\n  cursorStyle: 'line',\n  renderLineHighlight: 'line',\n  contextmenu: true,\n  roundedSelection: true,\n  hover: {\n    delay: 300,\n  },\n  // IMPORTANT: Don't accept suggestions on Enter - let Enter create new lines\n  acceptSuggestionOnEnter: 'off',\n  automaticLayout: true,\n  fixedOverflowWidgets: true,\n  readOnly: false,  // Explicitly allow editing\n  domReadOnly: false, // Allow DOM manipulation\n} as any;\n\n/**\n * Inline Monaco editor for expressions - based on your SingleLineEditor\n */\nexport function InlineExpressionEditor({\n  value,\n  onChange,\n  onBlur,\n  onEnter,\n  onTypeInferred,\n  onValidationChange,\n  context = {},\n  className,\n  placeholder = 'Enter expression...',\n}: InlineExpressionEditorProps) {\n  const editorRef = useRef<any>(null);\n  const monacoRef = useRef<any>(null);\n  const typeInferenceTimeoutRef = useRef<any>(null);\n\n  const handleEditorWillMount = (monaco: any) => {\n    monacoRef.current = monaco;\n\n    // Add context variables to completion\n    const contextKeys = Object.keys(context);\n    if (contextKeys.length > 0) {\n      monaco.languages.typescript.javascriptDefaults.addExtraLib(`\n        declare const ${contextKeys.join(', ')}: any;\n      `, 'context.d.ts');\n    }\n  };\n\n  const handleEditorDidMount = (editor: any, monaco: any) => {\n    editorRef.current = editor;\n\n    // Apply your proven configuration\n    editor.updateOptions(InlineEditorOptions);\n\n    console.log('🔷 Inline editor mounted!');\n\n    // Use CSS filter to invert colors for inline editor (light theme effect)\n    const editorElement = editor.getDomNode();\n    // if (editorElement) {\n    //   // editorElement.style = editorElement.style + \" background-color: #1e1e1e !important;\";\n    //   // editorElement.style.filter = 'invert(1) hue-rotate(180deg)';\n    // }\n\n    // Disable Find widget\n    const findCommand = editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_F, () => { });\n\n    // Handle Enter and Shift+Enter using onKeyDown\n    const enterKeyDisposable = editor.onKeyDown((e: any) => {\n      if (e.keyCode === monaco.KeyCode.Enter) {\n        // Only handle if THIS editor has focus\n        if (!editor.hasTextFocus()) {\n          console.log('🔷 Enter keydown but inline editor does NOT have focus - allowing default');\n          return;\n        }\n        \n        // Check if Shift is pressed (Shift+Enter)\n        if (e.shiftKey) {\n          console.log('🔷 Shift+Enter in INLINE editor - switching to full-screen');\n          e.preventDefault();\n          e.stopPropagation();\n          // Switch to full-screen for multi-line editing\n          if (onEnter) {\n            onEnter();\n          }\n          return;\n        }\n        \n        // Regular Enter (no Shift)\n        // Check if autocomplete is visible\n        const suggestWidget = editor._contentWidgets?.['editor.widget.suggestWidget'];\n        const isSuggestVisible = \n          suggestWidget?.widget &&\n          !suggestWidget.widget._hidden &&\n          suggestWidget.widget.state !== undefined &&\n          suggestWidget.widget.state !== 0;\n        \n        const contextKeyService = editor._contextKeyService;\n        const suggestWidgetVisible = contextKeyService?.getContextKeyValue?.('suggestWidgetVisible');\n        \n        if (isSuggestVisible || suggestWidgetVisible) {\n          console.log('🔷 Enter in INLINE editor - accepting autocomplete');\n          e.preventDefault();\n          e.stopPropagation();\n        editor.trigger('', 'acceptSelectedSuggestion');\n      } else {\n          console.log('🔷 Enter in INLINE editor - blurring (finishing edit)');\n          e.preventDefault();\n          e.stopPropagation();\n          // Blur to finish editing\n        onBlur?.({});\n        }\n      }\n    });\n\n    // Handle paste - remove line breaks (like your implementation)\n    editor.onDidPaste((e: any) => {\n      if (e.endLineNumber <= 1) {\n        return;\n      }\n      let newContent = '';\n      const textModel = editor.getModel();\n      const lineCount = textModel.getLineCount();\n      for (let i = 0; i < lineCount; i += 1) {\n        newContent += textModel.getLineContent(i + 1);\n      }\n      textModel.setValue(newContent);\n      editor.setPosition({ column: newContent.length + 1, lineNumber: 1 });\n    });\n\n    // Handle blur - switch to expression mode when editor loses focus\n    editor.onDidBlurEditorText((e: any) => {\n      const currentValue = editor.getValue();\n      onBlur?.({ ...e, currentValue });\n    });\n\n    // Track validation errors on content change\n      editor.onDidChangeModelContent(() => {\n        const model = editor.getModel();\n        if (model) {\n        // Validation\n        if (onValidationChange) {\n          const markers = monaco.editor.getModelMarkers({ resource: model.uri });\n          const hasErrors = markers.some((marker: any) => marker.severity === monaco.MarkerSeverity.Error);\n          onValidationChange(!hasErrors, markers);\n        }\n        \n        // Debounce type inference - will be cancelled if errors appear via marker change listener\n        if (onTypeInferred) {\n          if (typeInferenceTimeoutRef.current) {\n            clearTimeout(typeInferenceTimeoutRef.current);\n          }\n          \n          console.log('🔷 Content changed - debouncing type inference');\n          typeInferenceTimeoutRef.current = setTimeout(async () => {\n            const expressionToAnalyze = model.getValue();\n            const inferredType = await inferTypeFromMonaco(editor, monaco, expressionToAnalyze, '🔷');\n            if (inferredType) {\n              onTypeInferred(inferredType);\n            }\n          }, 200); // Reduced from 500ms to 200ms for better responsiveness\n        }\n      }\n    });\n    \n    // Listen to MONACO'S marker changes - fires when TypeScript detects errors\n    const markerChangeDisposable = monaco.editor.onDidChangeMarkers((uris: any[]) => {\n      const model = editor.getModel();\n      if (!model || !onTypeInferred) return;\n      \n      // Check if this marker change is for our model\n      const isOurModel = uris.some((uri: any) => uri.toString() === model.uri.toString());\n      if (!isOurModel) return;\n      \n      const markers = monaco.editor.getModelMarkers({ resource: model.uri });\n      const hasErrors = markers.some((marker: any) => marker.severity === monaco.MarkerSeverity.Error);\n      \n      console.log('🔷 Monaco markers changed - hasErrors:', hasErrors);\n      \n      if (hasErrors) {\n        // Cancel any pending type inference and immediately set to error\n        if (typeInferenceTimeoutRef.current) {\n          clearTimeout(typeInferenceTimeoutRef.current);\n          typeInferenceTimeoutRef.current = null;\n        }\n        console.log('🔷 ERROR detected - immediately setting type to error');\n        onTypeInferred('error');\n      } else {\n        // Errors cleared - trigger type inference\n        if (typeInferenceTimeoutRef.current) {\n          clearTimeout(typeInferenceTimeoutRef.current);\n        }\n        console.log('🔷 Errors cleared - triggering type inference');\n        typeInferenceTimeoutRef.current = setTimeout(async () => {\n          const expressionToAnalyze = model.getValue();\n          const inferredType = await inferTypeFromMonaco(editor, monaco, expressionToAnalyze, '🔷');\n          if (inferredType) {\n            onTypeInferred(inferredType);\n          }\n        }, 100); // Shorter delay when recovering from error\n      }\n    });\n\n    // Disable F1 command palette\n    editor.addCommand(monaco.KeyCode.F1, () => { });\n\n    // Add immediate type inference on cursor movement (for better responsiveness)\n    const cursorDisposable = editor.onDidChangeCursorPosition(async () => {\n      if (onTypeInferred && editor.hasTextFocus()) {\n        const model = editor.getModel();\n        if (model && model.getValue().trim()) {\n          // Clear any pending debounced inference\n          if (typeInferenceTimeoutRef.current) {\n            clearTimeout(typeInferenceTimeoutRef.current);\n          }\n          \n          // Immediate type inference on cursor movement\n          const expressionToAnalyze = model.getValue();\n          const inferredType = await inferTypeFromMonaco(editor, monaco, expressionToAnalyze, '🔷');\n          if (inferredType) {\n            onTypeInferred(inferredType);\n          }\n        }\n      }\n    });\n\n    // Set cursor to end and focus\n    editor.setPosition({\n      lineNumber: 1,\n      column: 999999,\n    });\n\n    window.requestAnimationFrame(() => {\n      editor.focus();\n      \n      // Trigger initial type inference after editor settles\n      setTimeout(async () => {\n        const model = editor.getModel();\n        if (onTypeInferred && model && model.getValue()) {\n          console.log('🔷 Triggering initial type inference for inline editor');\n          \n          // Check for errors first\n          const markers = monaco.editor.getModelMarkers({ resource: model.uri });\n          const hasErrors = markers.some((marker: any) => marker.severity === monaco.MarkerSeverity.Error);\n          \n          if (hasErrors) {\n            onTypeInferred('error');\n          } else {\n            const expressionToAnalyze = model.getValue();\n            const inferredType = await inferTypeFromMonaco(editor, monaco, expressionToAnalyze, '🔷');\n            if (inferredType) {\n              onTypeInferred(inferredType);\n            }\n          }\n        }\n      }, 100);\n    });\n\n    // Store disposables for cleanup\n    editorRef.current._inlineDisposables = {\n      enterKeyDisposable,\n      findCommand,\n      markerChangeDisposable,\n      cursorDisposable\n    };\n  };\n\n  // Cleanup when unmounting\n  useEffect(() => {\n    return () => {\n      if (editorRef.current) {\n        console.log('🔷 Inline editor unmounting - cleaning up');\n        // Clear type inference timeout\n        if (typeInferenceTimeoutRef.current) {\n          clearTimeout(typeInferenceTimeoutRef.current);\n        }\n        // Dispose of event listeners\n        if (editorRef.current._inlineDisposables) {\n          const disposables = editorRef.current._inlineDisposables;\n          disposables.enterKeyDisposable?.dispose?.();\n          disposables.findCommand?.dispose?.();\n          disposables.markerChangeDisposable?.dispose?.();\n          disposables.cursorDisposable?.dispose?.();\n        }\n        editorRef.current = null;\n      }\n    };\n  }, []);\n\n  const handleEditorChange = (newValue: string | undefined) => {\n    onChange(newValue || '');\n  };\n\n  return (\n    <div className={cn(\"uii:relative uii:flex-1\", className)}>\n      <Editor\n        theme=\"vs-dark\"\n        height=\"26px\"\n        language=\"typescript\"\n        value={value}\n        onChange={handleEditorChange}\n        onMount={handleEditorDidMount}\n        beforeMount={handleEditorWillMount}\n        width=\"100%\"\n        loading={<><FontAwesomeIcon icon={faSpinner} className=\"uii:animate-spin\" /></>}\n        options={InlineEditorOptions}\n        className=\"uii:-ml-[4px] uii:-mt-[1px] inline-editor\"\n      />\n      {!value && (\n        <div className=\"uii:absolute uii:inset-0 uii:flex uii:items-center uii:pointer-events-none uii:text-muted-foreground uii:text-sm\">\n          {placeholder}\n        </div>\n      )}\n    </div>\n  );\n}\n\n/**\n * Full panel Monaco editor for expressions\n */\nexport function FullPanelExpressionEditor({\n  value,\n  onChange,\n  onClose,\n  onBlur,\n  onTypeInferred,\n  context = {},\n  className,\n  placeholder = 'Enter expression...',\n}: FullPanelExpressionEditorProps) {\n  const editorRef = useRef<any>(null);\n  const monacoRef = useRef<any>(null);\n  const typeInferenceTimeoutRef = useRef<any>(null);\n\n  const handleEditorWillMount = (monaco: any) => {\n    monacoRef.current = monaco;\n\n    // Add context variables to completion\n    const contextKeys = Object.keys(context);\n    if (contextKeys.length > 0) {\n      monaco.languages.typescript.javascriptDefaults.addExtraLib(`\n        declare const ${contextKeys.join(', ')}: any;\n      `, 'context.d.ts');\n    }\n  };\n\n  const handleFPEditorDidMount = (editor: any, monaco: any) => {\n    editorRef.current = editor;\n\n    // Apply full panel configuration\n    editor.updateOptions(FullPanelEditorOptions);\n\n    console.log('🟦 FULL-SCREEN panel editor mounted!');\n    console.log('Full-screen editor is read-only?', editor.getOption(monaco.editor.EditorOption.readOnly));\n\n    // Handle Escape and Enter with onKeyDown\n    const escapeKeyDisposable = editor.onKeyDown((e: any) => {\n      if (e.keyCode === monaco.KeyCode.Escape) {\n        console.log('🟦 Escape pressed in FULL-SCREEN editor - closing');\n        e.preventDefault();\n        e.stopPropagation();\n      onClose();\n      }\n      \n      // Handle Enter key - check for autocomplete first\n      if (e.keyCode === monaco.KeyCode.Enter) {\n        // Check if suggestion widget is visible\n        const suggestWidget = editor._contentWidgets?.['editor.widget.suggestWidget'];\n        const isSuggestVisible = \n          suggestWidget?.widget &&\n          !suggestWidget.widget._hidden &&\n          suggestWidget.widget.state !== undefined &&\n          suggestWidget.widget.state !== 0;\n        \n        const contextKeyService = editor._contextKeyService;\n        const suggestWidgetVisible = contextKeyService?.getContextKeyValue?.('suggestWidgetVisible');\n        \n        if (isSuggestVisible || suggestWidgetVisible) {\n          console.log('🟦 Enter in FULL-SCREEN - accepting autocomplete');\n          e.preventDefault();\n          e.stopPropagation();\n          editor.trigger('', 'acceptSelectedSuggestion');\n        } else {\n          console.log('🟦 Enter in FULL-SCREEN - allowing newline (default behavior)');\n          // Don't prevent default - let Monaco insert newline\n        }\n      }\n    });\n\n    // Track content changes\n    let changeCount = 0;\n    const changeDisposable = editor.onDidChangeModelContent((e: any) => {\n      changeCount++;\n      const newValue = editor.getValue();\n      console.log(`🟦 FULL-SCREEN content changed (${changeCount}):`, newValue);\n      console.log(`🟦 Line count: ${editor.getModel()?.getLineCount()}`);\n      \n      // Debounce type inference - will be cancelled if errors appear via marker change listener\n      if (onTypeInferred) {\n        if (typeInferenceTimeoutRef.current) {\n          clearTimeout(typeInferenceTimeoutRef.current);\n        }\n        \n        console.log('🟦 Content changed - debouncing type inference');\n        typeInferenceTimeoutRef.current = setTimeout(async () => {\n          const expressionToAnalyze = newValue;\n          const inferredType = await inferTypeFromMonaco(editor, monaco, expressionToAnalyze, '🟦');\n          if (inferredType) {\n            onTypeInferred(inferredType);\n          }\n        }, 200); // Reduced from 500ms to 200ms for better responsiveness\n      }\n    });\n    \n    // Listen to MONACO'S marker changes - fires when TypeScript detects errors\n    const markerChangeDisposable = monaco.editor.onDidChangeMarkers((uris: any[]) => {\n      const model = editor.getModel();\n      if (!model || !onTypeInferred) return;\n      \n      // Check if this marker change is for our model\n      const isOurModel = uris.some((uri: any) => uri.toString() === model.uri.toString());\n      if (!isOurModel) return;\n      \n      const markers = monaco.editor.getModelMarkers({ resource: model.uri });\n      const hasErrors = markers.some((marker: any) => marker.severity === monaco.MarkerSeverity.Error);\n      \n      console.log('🟦 Monaco markers changed - hasErrors:', hasErrors);\n      \n      if (hasErrors) {\n        // Cancel any pending type inference and immediately set to error\n        if (typeInferenceTimeoutRef.current) {\n          clearTimeout(typeInferenceTimeoutRef.current);\n          typeInferenceTimeoutRef.current = null;\n        }\n        console.log('🟦 ERROR detected - immediately setting type to error');\n        onTypeInferred('error');\n      } else {\n        // Errors cleared - trigger type inference\n        if (typeInferenceTimeoutRef.current) {\n          clearTimeout(typeInferenceTimeoutRef.current);\n        }\n        console.log('🟦 Errors cleared - triggering type inference');\n        typeInferenceTimeoutRef.current = setTimeout(async () => {\n          const expressionToAnalyze = model.getValue();\n          const inferredType = await inferTypeFromMonaco(editor, monaco, expressionToAnalyze, '🟦');\n          if (inferredType) {\n            onTypeInferred(inferredType);\n          }\n        }, 100); // Shorter delay when recovering from error\n      }\n    });\n\n    // Handle blur - switch to expression mode when editor loses focus\n    editor.onDidBlurEditorText((e: any) => {\n      const currentValue = editor.getValue();\n      onBlur?.({ ...e, currentValue });\n    });\n\n    // Focus the editor and position cursor at the end\n    const model = editor.getModel();\n    if (model) {\n      const lineCount = model.getLineCount();\n      const lastLineLength = model.getLineLength(lineCount);\n      editor.setPosition({ lineNumber: lineCount, column: lastLineLength + 1 });\n    }\n    editor.focus();\n\n    // Trigger initial type inference after a short delay (let editor settle)\n    setTimeout(async () => {\n      if (onTypeInferred && model) {\n        console.log('🟦 Triggering initial type inference for full-screen editor');\n        \n        // Check for errors first\n        const markers = monaco.editor.getModelMarkers({ resource: model.uri });\n        const hasErrors = markers.some((marker: any) => marker.severity === monaco.MarkerSeverity.Error);\n        \n        if (hasErrors) {\n          console.log('🟦 Initial load has error - setting type to error');\n          onTypeInferred('error');\n        } else {\n          const expressionToAnalyze = model.getValue();\n          const inferredType = await inferTypeFromMonaco(editor, monaco, expressionToAnalyze, '🟦');\n          if (inferredType) {\n            onTypeInferred(inferredType);\n          }\n        }\n      }\n    }, 100);\n\n    // Add immediate type inference on cursor movement (for better responsiveness)\n    const cursorDisposable = editor.onDidChangeCursorPosition(async () => {\n      if (onTypeInferred && editor.hasTextFocus()) {\n        const model = editor.getModel();\n        if (model && model.getValue().trim()) {\n          // Clear any pending debounced inference\n          if (typeInferenceTimeoutRef.current) {\n            clearTimeout(typeInferenceTimeoutRef.current);\n          }\n          \n          // Immediate type inference on cursor movement\n          const expressionToAnalyze = model.getValue();\n          const inferredType = await inferTypeFromMonaco(editor, monaco, expressionToAnalyze, '🟦');\n          if (inferredType) {\n            onTypeInferred(inferredType);\n          }\n        }\n      }\n    });\n\n    // Store disposables for cleanup\n    editorRef.current._fullScreenDisposables = {\n      escapeKeyDisposable,\n      changeDisposable,\n      markerChangeDisposable,\n      cursorDisposable\n    };\n  };\n\n  // Cleanup when unmounting\n  useEffect(() => {\n    return () => {\n      if (editorRef.current) {\n        console.log('🟦 Full-screen editor unmounting - cleaning up');\n        // Clear type inference timeout\n        if (typeInferenceTimeoutRef.current) {\n          clearTimeout(typeInferenceTimeoutRef.current);\n        }\n        // Dispose of event listeners\n        if (editorRef.current._fullScreenDisposables) {\n          const disposables = editorRef.current._fullScreenDisposables;\n          disposables.escapeKeyDisposable?.dispose?.();\n          disposables.changeDisposable?.dispose?.();\n          disposables.markerChangeDisposable?.dispose?.();\n          disposables.cursorDisposable?.dispose?.();\n        }\n        editorRef.current = null;\n      }\n    };\n  }, []);\n\n  const handleEditorChange = (newValue: string | undefined) => {\n    onChange(newValue || '');\n  };\n\n  return (\n    <div\n      className={cn(\n        \"uii:relative uii:border uii:rounded-md uii:bg-background\",\n        className\n      )}\n    >\n      <div className=\"uii:flex uii:items-center uii:justify-between uii:p-2 uii:border-b uii:bg-muted/50\">\n        <span className=\"uii:text-sm uii:font-medium\">Expression Editor</span>\n        <button\n          type=\"button\"\n          onClick={onClose}\n          className=\"uii:text-muted-foreground hover:uii:text-foreground uii:p-1 uii:rounded uii:cursor-pointer uii:text-xs\"\n        >\n          ✕\n        </button>\n      </div>\n      <Editor\n        height=\"300px\"\n        theme=\"vs-dark\"\n        language=\"typescript\"\n        value={value}\n        onChange={handleEditorChange}\n        onMount={handleFPEditorDidMount}\n        beforeMount={handleEditorWillMount}\n        options={FullPanelEditorOptions}\n      />\n      {!value && (\n        <div className=\"uii:absolute uii:inset-0 uii:flex uii:items-center uii:justify-center uii:pointer-events-none uii:text-muted-foreground\">\n          {placeholder}\n        </div>\n      )}\n    </div>\n  );\n}\n","import { useState, useEffect, useRef } from 'react';\n\ninterface ASTNode {\n  type: string;\n  value?: string;\n  start: number;\n  end: number;\n  children: ASTNode[];\n  name?: string;\n  operator?: string;\n  left?: ASTNode;\n  right?: ASTNode;\n  argument?: ASTNode;\n  object?: ASTNode;\n  property?: ASTNode;\n  index?: ASTNode;\n  elements?: ASTNode[];\n  params?: ASTNode[];\n  raw?: string;\n  callee?: ASTNode;\n  arguments?: ASTNode[];\n  kind?: string;\n  text?: string;\n}\n\ninterface ParseResult {\n  ast: ASTNode | null;\n  tokens: Array<{type: string, value: string, start: number, end: number}>;\n  dependencies: string[];\n  error?: string;\n}\n\ninterface UseASTParserResult {\n  ast: ASTNode | null;\n  tokens: Array<{type: string, value: string, start: number, end: number}>;\n  dependencies: string[];\n  isLoading: boolean;\n  error: string | null;\n}\n\nexport function useASTParser(expression: string, controlKey?: string): UseASTParserResult {\n  const [ast, setAST] = useState<ASTNode | null>(null);\n  const [tokens, setTokens] = useState<Array<{type: string, value: string, start: number, end: number}>>([]);\n  const [dependencies, setDependencies] = useState<string[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const requestIdRef = useRef<number>(0);\n  const messageHandlerRef = useRef<((event: MessageEvent) => void) | null>(null);\n  const controlKeyRef = useRef<string>(controlKey || 'default');\n  \n  // Update controlKey ref when prop changes\n  useEffect(() => {\n    controlKeyRef.current = controlKey || 'default';\n  }, [controlKey]);\n\n  // Initialize service worker message listener\n  useEffect(() => {\n    if (typeof window === 'undefined' || !navigator.serviceWorker) {\n      setError('Service worker not available');\n      return;\n    }\n\n    // Create message handler\n    const handleMessage = (event: MessageEvent) => {\n      if (event.data.type === 'AST_PARSE_RESULT') {\n        const { id, controlKey, result } = event.data.payload;\n        // Match by both request ID and control key to avoid cross-control contamination\n        if (id === requestIdRef.current && controlKey === controlKeyRef.current) {\n          console.log('Service worker AST response:', { id, controlKey, result });\n          setAST(result.ast);\n          setTokens(result.tokens);\n          setDependencies(result.dependencies || []);\n          setError(result.error || null);\n          setIsLoading(false);\n        } else {\n          console.log('Ignoring AST response - wrong control:', { \n            receivedId: id, \n            expectedId: requestIdRef.current,\n            receivedKey: controlKey,\n            expectedKey: controlKeyRef.current\n          });\n        }\n      }\n    };\n\n    messageHandlerRef.current = handleMessage;\n    navigator.serviceWorker.addEventListener('message', handleMessage);\n\n    return () => {\n      if (messageHandlerRef.current) {\n        navigator.serviceWorker.removeEventListener('message', messageHandlerRef.current);\n      }\n    };\n  }, []);\n\n  // Parse expression when it changes\n  useEffect(() => {\n    if (!expression.trim()) {\n      setAST(null);\n      setTokens([]);\n      setDependencies([]);\n      setError(null);\n      setIsLoading(false);\n      return;\n    }\n\n    if (!navigator.serviceWorker || !navigator.serviceWorker.controller) {\n      setError('Service worker not ready');\n      setIsLoading(false);\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n    requestIdRef.current++;\n    \n    console.log('Sending expression to service worker:', { \n      expression: expression.trim(), \n      controlKey: controlKeyRef.current,\n      id: requestIdRef.current \n    });\n    \n    // Send message to service worker with control key\n    navigator.serviceWorker.controller.postMessage({\n      type: 'PARSE_AST',\n      payload: {\n        expression: expression.trim(),\n        id: requestIdRef.current,\n        controlKey: controlKeyRef.current\n      }\n    });\n  }, [expression]);\n\n  return {\n    ast,\n    tokens,\n    dependencies,\n    isLoading,\n    error\n  };\n}","import React from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface ASTNode {\n  type: string;\n  value?: string;\n  start: number;\n  end: number;\n  children: ASTNode[];\n  name?: string;\n  operator?: string;\n  left?: ASTNode;\n  right?: ASTNode;\n  argument?: ASTNode;\n  object?: ASTNode;\n  property?: ASTNode;\n  index?: ASTNode;\n  elements?: ASTNode[];\n  params?: ASTNode[];\n}\n\ninterface ASTRendererProps {\n  ast: ASTNode | null;\n  key?: string;\n  className?: string;\n  variant?: 'inline' | 'tree' | 'compact';\n  showTokens?: boolean;\n  tokens?: Array<{ type: string, value: string, start: number, end: number }>;\n}\n\nexport function ASTRenderer({\n  ast, key,\n  className,\n  variant = 'inline',\n  showTokens = false,\n  tokens = []\n}: ASTRendererProps) {\n\n  const getNodeColor = (type: string): string => {\n    switch (type) {\n      case 'StringLiteral':\n        return 'uii:text-green-600 uii:bg-green-100';\n      case 'NumericLiteral':\n        return 'uii:text-purple-600 uii:bg-purple-100';\n      case 'Identifier':\n        return 'uii:text-blue-600 uii:bg-blue-100';\n      case 'Keyword':\n      case 'Literal':\n        return 'uii:text-orange-600 uii:bg-orange-100';\n      case 'BinaryExpression':\n        return 'uii:text-gray-700 uii:bg-gray-100';\n      case 'CallExpression':\n        return 'uii:text-indigo-600 uii:bg-indigo-100';\n      case 'MemberExpression':\n        return 'uii:text-cyan-600 uii:bg-cyan-100';\n      case 'UnaryExpression':\n        return 'uii:text-pink-600 uii:bg-pink-100';\n      case 'ParenthesizedExpression':\n        return 'uii:text-yellow-600 uii:bg-yellow-100';\n      default:\n        return 'uii:text-gray-600 uii:bg-gray-100';\n    }\n  };\n\n  const renderInlineNode = (node: ASTNode, depth: number = 0): React.ReactNode => {\n    if (depth > 2) return null; // Limit depth for inline display\n\n    // For inline display, show a simplified view\n    if (node.type === 'Identifier') {\n      return (\n        <span key={`${node.start}-${node.end}`} className=\"uii:inline-flex uii:items-center uii:mr-1\">\n          <span className=\"uii:px-1 uii:py-0.5 uii:rounded uii:text-xs uii:bg-blue-100 uii:text-blue-800 uii:font-mono\">\n            {node.name || node.value}\n          </span>\n        </span>\n      );\n    }\n\n    if (node.type === 'StringLiteral' || node.type === 'NumericLiteral') {\n      return (\n        <span key={`${node.start}-${node.end}`} className=\"uii:inline-flex uii:items-center uii:mr-1\">\n          <span className=\"uii:px-1 uii:py-0.5 uii:rounded uii:text-xs uii:bg-green-100 uii:text-green-800 uii:font-mono\">\n            {node.value}\n          </span>\n        </span>\n      );\n    }\n\n    if (node.type === 'BinaryExpression') {\n      return (\n        <span key={`${node.start}-${node.end}`} className=\"uii:inline-flex uii:items-center uii:mr-1\">\n          {node.left && renderInlineNode(node.left, depth + 1)}\n          <span className=\"uii:px-1 uii:py-0.5 uii:rounded uii:text-xs uii:bg-purple-100 uii:text-purple-800 uii:font-mono uii:mx-1\">\n            {node.operator}\n          </span>\n          {node.right && renderInlineNode(node.right, depth + 1)}\n        </span>\n      );\n    }\n\n    if (node.type === 'CallExpression') {\n      return (\n        <span key={`${node.start}-${node.end}`} className=\"uii:inline-flex uii:items-center uii:mr-1\">\n          {(node as any).callee && renderInlineNode((node as any).callee, depth + 1)}\n          <span className=\"text-xs text-gray-600\">()</span>\n        </span>\n      );\n    }\n\n    if (node.type === 'PropertyAccessExpression') {\n      return (\n        <span key={`${node.start}-${node.end}`} className=\"uii:inline-flex uii:items-center uii:mr-1\">\n          {node.object && renderInlineNode(node.object, depth + 1)}\n          <span className=\"text-xs text-gray-600\">.</span>\n          {node.property && renderInlineNode(node.property, depth + 1)}\n        </span>\n      );\n    }\n\n    // For other types, show a simplified version\n    return (\n      <span key={`${node.start}-${node.end}`} className=\"uii:inline-flex uii:items-center uii:mr-1\">\n        <span className=\"px-1 py-0.5 rounded text-xs bg-gray-100 text-gray-600 font-mono\">\n          {node.type}\n        </span>\n      </span>\n    );\n  };\n\n  const renderTreeNode = (node: ASTNode, depth: number = 0): React.ReactNode => {\n    if (depth > 4) return null; // Limit depth to prevent excessive nesting\n\n    const indent = '  '.repeat(depth);\n\n    return (\n      <div key={`${node.start}-${node.end}`} className=\"font-mono text-xs\">\n        <div className=\"uii:flex uii:items-start uii:gap-2\">\n          <span className=\"uii:text-gray-400\">{indent}</span>\n          <span className={cn(\"uii:px-1 uii:py-0.5 uii:rounded uii:text-xs uii:font-semibold\", getNodeColor(node.type))}>\n            {node.type}\n          </span>\n          {node.value && (\n            <span className=\"uii:text-green-600\">\"{node.value}\"</span>\n          )}\n          {node.operator && (\n            <span className=\"uii:text-purple-600\">{node.operator}</span>\n          )}\n          {node.name && (\n            <span className=\"uii:text-blue-600\">{node.name}</span>\n          )}\n        </div>\n\n        {/* Render specific properties more concisely - only if they exist */}\n        {/* Don't render children array if we have specific properties to avoid duplication */}\n        {node.left && (\n          <div className=\"uii:ml-2\">\n            <span className=\"uii:text-gray-500 uii:text-xs\">left: </span>\n            {renderTreeNode(node.left, depth + 1)}\n          </div>\n        )}\n        {node.right && (\n          <div className=\"uii:ml-2\">\n            <span className=\"uii:text-gray-500 uii:text-xs\">right: </span>\n            {renderTreeNode(node.right, depth + 1)}\n          </div>\n        )}\n        {node.argument && (\n          <div className=\"uii:ml-2\">\n            <span className=\"uii:text-gray-500 uii:text-xs\">arg: </span>\n            {renderTreeNode(node.argument, depth + 1)}\n          </div>\n        )}\n        {node.object && (\n          <div className=\"uii:ml-2\">\n            <span className=\"uii:text-gray-500 uii:text-xs\">obj: </span>\n            {renderTreeNode(node.object, depth + 1)}\n          </div>\n        )}\n        {node.property && (\n          <div className=\"uii:ml-2\">\n            <span className=\"uii:text-gray-500 uii:text-xs\">prop: </span>\n            {renderTreeNode(node.property, depth + 1)}\n          </div>\n        )}\n        {node.index && (\n          <div className=\"uii:ml-2\">\n            <span className=\"uii:text-gray-500 uii:text-xs\">idx: </span>\n            {renderTreeNode(node.index, depth + 1)}\n          </div>\n        )}\n\n        {/* Only render children array if we don't have specific properties (to avoid duplication) */}\n        {!node.left && !node.right && !node.argument && !node.object && !node.property && !node.index &&\n          node.children && node.children.length > 0 && (\n            <div className=\"uii:ml-2\">\n              {node.children.slice(0, 3).map((child, index) => renderTreeNode(child, depth + 1))}\n              {node.children.length > 3 && (\n                <div className=\"uii:ml-2 uii:text-gray-500 uii:text-xs\">\n                  ... and {node.children.length - 3} more\n                </div>\n              )}\n            </div>\n          )}\n      </div>\n    );\n  };\n\n  const renderTokens = (): React.ReactNode => {\n    if (tokens.length === 0) return null;\n\n    // Show only the first 10 tokens to avoid overwhelming the UI\n    const displayTokens = tokens.slice(0, 10);\n\n    return (\n      <div className=\"uii:space-y-2\">\n        <div className=\"uii:text-sm uii:font-semibold uii:text-gray-700\">\n          Tokens {tokens.length > 10 && `(${tokens.length} total)`}:\n        </div>\n        <div className=\"uii:flex uii:flex-wrap uii:gap-1\">\n          {displayTokens.map((token, index) => (\n            <span\n              key={index}\n              className={cn(\n                \"uii:px-1 uii:py-0.5 uii:rounded uii:text-xs uii:font-mono\",\n                token.type.includes('Keyword') && \"uii:bg-blue-100 uii:text-blue-800\",\n                token.type.includes('Identifier') && \"uii:bg-green-100 uii:text-green-800\",\n                token.type.includes('String') && \"uii:bg-yellow-100 uii:text-yellow-800\",\n                token.type.includes('Numeric') && \"uii:bg-purple-100 uii:text-purple-800\",\n                token.type.includes('Punctuation') && \"uii:bg-gray-100 uii:text-gray-800\",\n                \"uii:bg-gray-100 uii:text-gray-600\"\n              )}\n            >\n              {token.value}\n            </span>\n          ))}\n          {tokens.length > 10 && (\n            <span className=\"uii:px-1 uii:py-0.5 uii:rounded uii:text-xs uii:bg-gray-200 uii:text-gray-600\">\n              +{tokens.length - 10} more\n            </span>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  if (!ast) {\n    return (\n      <div className={cn(\"uii:text-gray-500 uii:text-sm uii:italic\", className)}>\n        No AST available\n      </div>\n    );\n  }\n\n  if (variant === 'inline') {\n    return (\n      <div className={cn(\"uii:inline-flex uii:items-center uii:gap-2\", className)}>\n        {renderInlineNode(ast)}\n      </div>\n    );\n  }\n\n  if (variant === 'compact') {\n    return (\n      <div className={cn(\"uii:space-y-2\", className)}>\n        <div className=\"uii:flex uii:flex-wrap uii:gap-1\">\n          {renderInlineNode(ast)}\n        </div>\n        {showTokens && renderTokens()}\n      </div>\n    );\n  }\n\n  // Tree variant\n  return (\n    <div className={cn(\"uii:space-y-3\", className)}>\n      <div className=\"uii:space-y-2\">\n        <div className=\"uii:text-sm uii:font-semibold uii:text-gray-700\">AST Tree:</div>\n        <div className=\"uii:p-3 uii:border uii:rounded-md uii:bg-gray-50 uii:max-h-64 uii:overflow-auto\">\n          {renderTreeNode(ast)}\n        </div>\n      </div>\n      {showTokens && renderTokens()}\n    </div>\n  );\n}\n","import React, {\n  useMemo,\n  useCallback,\n  useState,\n  cloneElement,\n  isValidElement,\n  useRef,\n  useEffect,\n} from 'react';\nimport { cn } from '@/lib/utils';\nimport {\n  useExpressionMode,\n  ExpressionModeControls,\n  ExpressionModeState,\n} from '../../hooks/useExpressionMode';\nimport {\n  InlineExpressionEditor,\n  FullPanelExpressionEditor,\n} from './ExpressionEditor';\nimport { ExpressionASTRenderer } from './ExpressionASTRenderer';\nimport { useASTParser } from '../../hooks/useASTParser';\nimport { ASTRenderer } from './ASTRenderer';\nimport clsx from 'clsx';\nimport { useExpressionModeStore } from '../../stores/expressionModeStore';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faChevronLeft,\n  faExpand,\n} from '@fortawesome/pro-regular-svg-icons';\n\n// Types that will come from your API via TRPC\nexport interface ExpressionContext {\n  [key: string]: any;\n}\n\nexport interface ExpressionResult {\n  value: any;\n  ast: ExpressionAST;\n  error?: string;\n  isValid: boolean;\n  validation: {\n    syntax: boolean;\n    expression: boolean;\n    context: boolean;\n    type?: boolean;\n    security?: boolean;\n  };\n}\n\nexport interface ExpressionAST {\n  kind: number;\n  color?: string;\n  left?: ExpressionAST;\n  right?: ExpressionAST;\n  name?: ExpressionAST;\n  argumentExpression?: ExpressionAST;\n  arguments?: ExpressionAST[];\n  expression?: ExpressionAST;\n  escapedText?: string;\n  text?: string;\n  operator?: string;\n  type?: string;\n}\n\nexport interface ExpressionMetadata {\n  expression: string;\n  mode: 'value' | 'expression';\n  value: any;\n  isEditing: boolean;\n  isFullScreen: boolean;\n}\n\nexport interface ExpressionWrapperProps<T = any> {\n  /** The label for the field */\n  label: string;\n  /** The type of the field */\n  type: string;\n  /** The actual value from the form field */\n  value: T | { expression: string; type: 'expression'; value: T };\n  /** Unique key for the field (used for debugging/logging) */\n  key: string;\n  /** Whether the values are loading */\n  valuesLoading?: boolean;\n  /** Callback when the value changes - second parameter contains expression metadata */\n  onValueChange: (\n    value: T | { expression: string; type: 'expression' },\n    metadata?: ExpressionMetadata\n  ) => void;\n  /** Callback when dependencies change - called with array of dependency names */\n  onDependenciesChange?: (dependencies: string[]) => void;\n  /** Current expression metadata (for controlled mode) */\n  metadata?: ExpressionMetadata;\n  /** Render prop function that receives control props */\n  children: (props: {\n\n    value: T;\n\n    onChange: (value: T) => void;\n\n    localInput: T,\n\n    setLocalInput: (value: T) => void;\n\n    expressionMode: ExpressionModeControls;\n\n    onExpressionClick: () => void; // Click handler to trigger expression mode\n\n    inferredType?: string; // TypeScript inferred type of the expression\n\n    hasTypeMismatch?: boolean; // Whether inferred type doesn't match expected type\n\n    hasError?: boolean; // Whether expression has syntax/validation errors\n\n  }) => React.ReactNode;\n  /** Unique field name for the field (used for debugging/logging) */\n  fieldName: string;\n  /** Available nodes for the expression */\n  availableNodes?: any;\n  /** My interface for the expression */\n  myInterface?: any;\n  /** Context variables available in expressions */\n  expressionContext?: ExpressionContext;\n  /** TypeScript type definitions for context variables (for better type inference) */\n  contextTypeDefinitions?: string;\n  /** Whether to use inline editor (default: true = looks like text input) */\n  inlineEditor?: boolean;\n  /** Custom className for the wrapper container */\n  className?: string;\n  /** Custom className for the editor container (when in editor mode) */\n  editorClassName?: string;\n  /** Custom placeholder for expression editor */\n  expressionPlaceholder?: string;\n  /** Function to evaluate expressions - can be TRPC mutation, mock, or any other method */\n  evaluateExpression?: (\n    expression: string,\n    context: ExpressionContext\n  ) => Promise<ExpressionResult>;\n  /** Result of expression evaluation (if parent manages evaluation) */\n  expressionResult?: ExpressionResult | null;\n  /** Whether expression is currently being evaluated (if parent manages evaluation) */\n  isEvaluating?: boolean;\n  /** Whether the current expression is valid (for validation states) */\n  isExpressionValid?: boolean;\n  /** Expected type for the property - used for type coercion validation */\n  expectedType?: 'string' | 'number' | 'boolean' | 'array' | 'object' | 'any';\n}\n\n/**\n * Safely evaluate JavaScript expressions with context\n * TODO: Add more security hardening, sandboxing, and error handling\n */\nfunction evaluateExpressionLocally(\n  expression: string,\n  context: ExpressionContext = {}\n): any {\n  try {\n    // Basic validation\n    if (!expression || typeof expression !== 'string') {\n      return null;\n    }\n\n    // TODO: Add expression validation/whitelist for security\n    // TODO: Add timeout for long-running expressions\n    // TODO: Add memory limits\n    // TODO: Add more comprehensive sandboxing\n\n    // Create a safe evaluation context\n    const safeContext = {\n      ...context,\n      // Add common utility functions\n      Math,\n      Date,\n      JSON,\n      // Add safe array methods\n      Array,\n      // Add safe string methods\n      String,\n      // Add safe number methods\n      Number,\n      // Add safe boolean methods\n      Boolean,\n      // Add safe object methods\n      Object,\n    };\n\n    // Create function with context\n    const func = new Function(\n      ...Object.keys(safeContext),\n      `\"use strict\"; return (${expression});`\n    );\n\n    const result = func(...Object.values(safeContext));\n\n    // TODO: Add result validation and sanitization\n    return result;\n  } catch (error) {\n    console.warn('Expression evaluation failed:', error);\n    // TODO: Add better error reporting and user feedback\n    return null;\n  }\n}\n\n// Validate expression locally for different validation classes\nfunction validateExpressionLocally(\n  expression: string,\n  context: ExpressionContext = {},\n  expectedType: string = 'any'\n): {\n  syntax: boolean;\n  expression: boolean;\n  context: boolean;\n  type: boolean;\n  security: boolean;\n} {\n  const validation = {\n    syntax: true,\n    expression: true,\n    context: true,\n    type: true,\n    security: true,\n  };\n\n  try {\n    // Syntax validation - check if it's valid JavaScript\n    new Function(expression);\n    validation.syntax = true;\n  } catch (error) {\n    validation.syntax = false;\n    return validation; // If syntax is invalid, other validations don't matter\n  }\n\n  try {\n    // Expression validation - check if it's an expression (not a statement)\n    // This is a simple heuristic - expressions typically don't start with keywords\n    const trimmed = expression.trim();\n    const statementKeywords = [\n      'var',\n      'let',\n      'const',\n      'function',\n      'class',\n      'if',\n      'for',\n      'while',\n      'return',\n      'throw',\n    ];\n    validation.expression = !statementKeywords.some((keyword) =>\n      trimmed.startsWith(keyword)\n    );\n  } catch (error) {\n    validation.expression = false;\n  }\n\n  try {\n    // Context validation - check if referenced variables exist in context\n    const contextKeys = Object.keys(context);\n    const variableRegex = /\\b[a-zA-Z_$][a-zA-Z0-9_$]*\\b/g;\n    const matches = expression.match(variableRegex) || [];\n    const referencedVars = Array.from(new Set(matches));\n\n    // Filter out JavaScript built-ins and keywords\n    const jsBuiltins = [\n      'true',\n      'false',\n      'null',\n      'undefined',\n      'this',\n      'new',\n      'typeof',\n      'instanceof',\n    ];\n    const userVars = referencedVars.filter((v) => !jsBuiltins.includes(v));\n\n    validation.context = userVars.every((v) => contextKeys.includes(v));\n  } catch (error) {\n    validation.context = false;\n  }\n\n  // Type validation - check if expression result can be coerced to expected type\n  try {\n    const evaluated = evaluateExpressionLocally(expression, context);\n    validation.type =\n      evaluated !== null\n        ? validateTypeCoercion(evaluated, expectedType)\n        : false;\n  } catch (error) {\n    validation.type = false;\n  }\n\n  // Security validation - check for dangerous operations\n  const dangerousPatterns = [\n    /eval\\s*\\(/,\n    /Function\\s*\\(/,\n    /setTimeout\\s*\\(/,\n    /setInterval\\s*\\(/,\n    /import\\s*\\(/,\n    /require\\s*\\(/,\n  ];\n  validation.security = !dangerousPatterns.some((pattern) =>\n    pattern.test(expression)\n  );\n\n  return validation;\n}\n\n// Validate if a value can be coerced to the expected type\nfunction validateTypeCoercion(value: any, expectedType: string): boolean {\n  if (expectedType === 'any') return true;\n\n  try {\n    switch (expectedType) {\n      case 'string':\n        // Most values can be coerced to string\n        return value !== null && value !== undefined;\n\n      case 'number':\n        // Check if value can be converted to a valid number\n        if (typeof value === 'number') return !isNaN(value);\n        if (typeof value === 'string') {\n          const num = Number(value);\n          return !isNaN(num) && isFinite(num);\n        }\n        if (typeof value === 'boolean') return true; // true -> 1, false -> 0\n        return false;\n\n      case 'boolean':\n        // Most values can be coerced to boolean\n        return true; // JavaScript's truthy/falsy conversion\n\n      case 'array':\n        // Check if value is already an array or can be converted\n        if (Array.isArray(value)) return true;\n        if (typeof value === 'string') return true; // String can be split into array\n        if (typeof value === 'object' && value !== null) return true; // Object can be Object.entries()\n        return false;\n\n      case 'object':\n        // Check if value is an object or can be converted\n        if (typeof value === 'object' && value !== null) return true;\n        if (typeof value === 'string') return true; // String can be parsed as JSON\n        if (typeof value === 'number' || typeof value === 'boolean')\n          return true; // Can be wrapped in object\n        return false;\n\n      default:\n        return true;\n    }\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * ExpressionWrapper - Wraps any control with expression capabilities\n *\n * This component provides three modes:\n * 1. Value mode: Shows the wrapped control normally\n * 2. Expression mode: Shows the evaluated expression result\n * 3. Editor mode: Shows the Monaco editor for editing expressions\n */\nexport function ExpressionWrapper<T = any>({\n  label,\n  value,\n  type,\n  valuesLoading = false,\n  key,\n  onValueChange,\n  onDependenciesChange,\n  metadata,\n  children,\n  fieldName,\n  expressionContext = {},\n  availableNodes,\n  myInterface,\n  contextTypeDefinitions,\n  inlineEditor = true,\n  className,\n  editorClassName,\n  expressionPlaceholder = 'Enter expression...',\n  evaluateExpression,\n  expressionResult,\n  isEvaluating = false,\n  isExpressionValid = true,\n  expectedType = 'any',\n}: ExpressionWrapperProps<T>) {\n  // Internal state to track expression metadata (preserves expression when switching modes)\n  const [expressionMetadata, setExpressionMetadata] =\n    useState<ExpressionMetadata>(\n      () => {\n        // On initial load, always start in value mode (not editing)\n        // Even if metadata says isEditing: true, that's stale state from previous session\n        const initialMetadata = metadata || {\n          expression: '',\n          mode: 'value',\n          isEditing: false,\n          isFullScreen: false,\n          value: undefined,\n        };\n\n        // Force isEditing and isFullScreen to false on initial load\n        return {\n          ...initialMetadata,\n          isEditing: false,\n          isFullScreen: false,\n          mode: 'value', // Always start in value mode\n        };\n      }\n    );\n\n  // Track the original value before any expression was set\n  const [originalValue, setOriginalValue] = useState<T>(\n    value &&\n      typeof value === 'object' &&\n      'expression' in value &&\n      'type' in value &&\n      value.type === 'expression'\n      ? value.value\n      : (value as T)\n  );\n  const [currentValue, setCurrentValue] = useState<T>(\n    value &&\n      typeof value === 'object' &&\n      'expression' in value &&\n      'type' in value &&\n      value.type === 'expression'\n      ? value.value\n      : (value as T)\n  );\n\n  const formatValue = useCallback((value: T | unknown) => {\n\n    switch (type) {\n      case \"float\":\n        {\n          return (typeof value === \"string\") && !isNaN(parseFloat(value as string)) ? parseFloat(value as string) : value\n        }\n      case \"integer\":\n      case \"number\":\n        {\n          return (typeof value === \"string\") && !isNaN(parseInt(value as string)) ? parseInt(value as string) : value\n          break\n        }\n      case \"string[]\":\n        {\n          return (typeof value === \"string\") ? (value as string).split(',') : value as T\n          break\n        }\n      case \"string\":\n      default:\n        {\n          return value as T\n        }\n    }\n  }, [type])\n\n  const [currentEditorValue, setCurrentEditorValue] = useState<string>();\n\n  const currentExpressionValueExt = useExpressionModeStore\n    .getState()\n    .getState(fieldName).expression;\n\n  // Update internal metadata when external metadata changes\n  useEffect(() => {\n    if (metadata) {\n      // When receiving external metadata updates, preserve editing state but\n      // don't automatically enter editing mode on initial load\n      setExpressionMetadata({\n        ...metadata,\n        // Don't restore editing/fullscreen state from metadata\n        // User needs to explicitly click to edit\n        isEditing: false,\n        isFullScreen: false,\n      });\n    }\n  }, [metadata]);\n\n  // Detect if incoming value is an expression object\n  const isExpressionValue = useMemo(() => {\n    return (\n      value &&\n      typeof value === 'object' &&\n      'expression' in value &&\n      'type' in value &&\n      value.type === 'expression'\n    );\n  }, [value]);\n\n  // Track if this is the initial mount\n  const isInitialMount = useRef(true);\n\n  useEffect(() => {\n\n\n    if (\n      value &&\n      typeof value === 'object' &&\n      'expression' in value &&\n      'type' in value &&\n      value.type === 'expression'\n    ) {\n      // Expression object detected\n      const exprValue = (value as any).value;\n      const exprString = (value as any).expression;\n\n      // Set the current value (the evaluated result to display)\n      if (exprValue !== undefined) {\n        setCurrentValue(formatValue(exprValue) as T);\n        setOriginalValue(formatValue(exprValue) as T);\n      }\n\n      // Set the expression in the store AND switch to expression mode (non-editing)\n      // This ensures the expression display is shown\n      if (exprString && expressionMode.expression !== exprString) {\n        expressionMode.setExpression(exprString);\n        // Only switch to expression mode on initial load, not during editing\n        if (isInitialMount.current && !expressionMode.isEditing) {\n          expressionMode.switchToExpression();\n        }\n      }\n\n      // On initial load, sync metadata to match the expression in the value\n      // Check if metadata is out of sync\n      const isMetadataOutOfSync =\n        !metadata ||\n        metadata.expression !== exprString ||\n        metadata.mode === 'value' ||  // If value has expression but mode is 'value', it's out of sync\n        metadata.isEditing === true ||  // Should never start editing on load\n        metadata.isFullScreen === true; // Should never start full-screen on load\n\n      if (isInitialMount.current && isMetadataOutOfSync) {\n        const syncedMetadata: ExpressionMetadata = {\n          expression: exprString || '',\n          value: formatValue(exprValue),\n          mode: 'expression', // Show expression display (not editing)\n          isEditing: false,\n          isFullScreen: false,\n        };\n\n        // Use setTimeout to avoid calling onValueChange during render\n        setTimeout(() => {\n          onValueChange(value, { ...syncedMetadata, value: formatValue(value) });\n        }, 0);\n      }\n    } else {\n      // Regular value (not an expression object)\n      if (!valuesLoading) {\n        setCurrentValue(formatValue(value) as T);\n        setOriginalValue(formatValue(value) as T);\n\n        // Sync metadata - clear any expression metadata since we have a plain value\n        if (isInitialMount.current && (metadata?.expression || metadata?.mode === 'expression')) {\n          const syncedMetadata: ExpressionMetadata = {\n            expression: '',\n            value: formatValue(value),\n            mode: 'value',\n            isEditing: false,\n            isFullScreen: false,\n          };\n\n          // Use setTimeout to avoid calling onValueChange during render\n          setTimeout(() => {\n            onValueChange(formatValue(value) as T, { ...syncedMetadata, value: formatValue(value) });\n          }, 0);\n        }\n      }\n    }\n\n    // Mark that initial mount is complete after a short delay\n    if (isInitialMount.current) {\n      setTimeout(() => {\n        isInitialMount.current = false;\n      }, 100);\n    }\n  }, [value, valuesLoading]);\n\n  // Update metadata when value changes to/from expression\n  // useEffect(() => {\n  //   if (isExpressionValue) {\n  //     // Value is an expression object, switch to expression mode\n  //     const newMetadata: ExpressionMetadata = {\n  //       expression: (value as any).expression,\n  //       mode: 'expression',\n  //       isEditing: false\n  //     };\n  //     setExpressionMetadata(newMetadata);\n  //   } else if (expressionMetadata.mode === 'value') {\n  //     // This is a regular value and we're in value mode, update original value\n  //     setOriginalValue(value);\n  //   }\n  // }, [value, isExpressionValue, expressionMetadata.mode]);\n\n  // Convert internal metadata to ExpressionModeState format\n  // const externalState: ExpressionModeState = {\n  //   expression: expressionMetadata.expression,\n  //   mode: expressionMetadata.mode,\n  //   isEditing: expressionMetadata.isEditing,\n  //   isFullScreen: expressionMetadata.isFullScreen,\n  //   currentValue: value\n  // };\n\n  // // Handle state changes by updating internal metadata and parent\n  // const handleStateChange = useCallback((newState: ExpressionModeState) => {\n\n  //   // const newMetadata: ExpressionMetadata = {\n  //   //   expression: newState.expression,\n  //   //   mode: newState.mode,\n  //   //   isEditing: newState.isEditing\n  //   // };\n\n  //   // // Update internal state\n  //   // setExpressionMetadata(newMetadata);\n\n  //   // // Notify parent\n  //   // onValueChange(value, newMetadata);\n\n  //   console.log(\"handleStateChange called with:\", newState);\n\n  // }, [onValueChange, value]);\n\n  const expressionMode = useExpressionMode(fieldName);\n\n  // Parse expression and extract AST + dependencies\n  const {\n    ast,\n    tokens,\n    dependencies,\n    isLoading: isParsing,\n    error: parseError,\n  } = useASTParser(expressionMode.expression, fieldName);\n\n  // Memoized dependency list with additional metadata\n  const dependencyList = useMemo(() => {\n    if (!ast || dependencies.length === 0) {\n      return [];\n    }\n\n    // Create a structured list of dependencies with metadata\n    // The service worker now filters out built-in methods properly\n    return dependencies.map((dep) => ({\n      name: dep,\n      exists: expressionContext ? dep in expressionContext : false,\n      value: expressionContext ? expressionContext[dep] : undefined,\n    }));\n  }, [dependencies, expressionContext, ast]);\n\n  // Store TypeScript type information from Monaco editor\n  const [typeScriptInferredType, setTypeScriptInferredType] = useState<string | null>(null);\n\n  // Callback to receive type information from the editor\n  const handleTypeInferred = useCallback((type: string) => {\n    setTypeScriptInferredType(type);\n  }, []);\n\n  // Type inference is now handled directly by the editors (inline and full-screen)\n  // No need for the legacy async approach - editors call handleTypeInferred callback\n\n  // Check if expression contains newlines - if so, we should use full-screen editor\n  const expressionHasNewlines = useMemo(() => {\n    return expressionMode.expression.includes('\\n') || expressionMode.expression.includes('\\r');\n  }, [expressionMode.expression]);\n\n  // Use TypeScript-based type inference from Monaco (always available)\n  const inferredReturnType = useMemo(() => {\n    // Monaco's TypeScript language service provides accurate type inference\n    return typeScriptInferredType || 'unknown';\n  }, [typeScriptInferredType]);\n\n  // Check if inferred type matches the expected type prop\n  const hasTypeMismatch = useMemo(() => {\n    // Don't show type mismatch if there's an error or unknown type\n    if (!inferredReturnType || inferredReturnType === 'unknown' || inferredReturnType === 'any' || inferredReturnType === 'error') {\n      return false;\n    }\n\n    // Normalize types for comparison\n    const normalizedInferred = inferredReturnType.toLowerCase().trim();\n    const normalizedExpected = (type || expectedType || 'any').toLowerCase().trim();\n\n    // Handle array types: 'string[]' should match 'array'\n    if (normalizedExpected === 'array' && normalizedInferred.endsWith('[]')) {\n      return false; // Not a mismatch\n    }\n\n    // Handle exact matches\n    if (normalizedInferred === normalizedExpected) {\n      return false; // Not a mismatch\n    }\n\n    // If expected type is 'any', never a mismatch\n    if (normalizedExpected === 'any') {\n      return false;\n    }\n\n    // Handle TypeScript literal types - they're compatible with their base type\n    // String literals: \"adam\" is compatible with string\n    if (normalizedExpected === 'string' &&\n      (normalizedInferred.startsWith('\"') || normalizedInferred.startsWith(\"'\"))) {\n      return false; // String literal is compatible with string\n    }\n\n    // Number literals: 123, 123.45, 10e3, etc. are compatible with number\n    if (normalizedExpected === 'number' && /^-?\\d+(\\.\\d+)?([eE][+-]?\\d+)?$/.test(normalizedInferred)) {\n      return false; // Number literal is compatible with number\n    }\n\n    // Integer literals: 123, 10e3, etc. are compatible with integer\n    if (normalizedExpected === 'integer' && /^-?\\d+(\\.\\d+)?([eE][+-]?\\d+)?$/.test(normalizedInferred)) {\n      return false; // Number literal is compatible with integer\n    }\n\n    // Number type is compatible with integer (Monaco might infer \"number\" for integers)\n    if (normalizedExpected === 'integer' && normalizedInferred === 'number') {\n      return false; // Number is compatible with integer\n    }\n\n    // Float literals: 123.45, 10e3, etc. are compatible with float\n    if (normalizedExpected === 'float' && /^-?\\d+(\\.\\d+)?([eE][+-]?\\d+)?$/.test(normalizedInferred)) {\n      return false; // Number literal is compatible with float\n    }\n\n    // Number type is compatible with float\n    if (normalizedExpected === 'float' && normalizedInferred === 'number') {\n      return false; // Number is compatible with float\n    }\n\n    // Boolean literals: true/false is compatible with boolean\n    if (normalizedExpected === 'boolean' &&\n      (normalizedInferred === 'true' || normalizedInferred === 'false')) {\n      return false; // Boolean literal is compatible with boolean\n    }\n\n    // Otherwise, there's a mismatch\n    return true;\n  }, [inferredReturnType, type, expectedType]);\n\n  // Internal state for expression evaluation (when wrapper handles it)\n  const [internalExpressionResult, setInternalExpressionResult] =\n    useState<ExpressionResult | null>(null);\n  const [internalIsEvaluating, setInternalIsEvaluating] = useState(false);\n\n  // Hover state for expression preview\n  const [isHovering, setIsHovering] = useState(false);\n\n  // Internal Monaco validation state\n  const [internalIsExpressionValid, setInternalIsExpressionValid] =\n    useState(true);\n\n  // Detailed validation state for different validation classes\n  const [validationState, setValidationState] = useState({\n    syntax: true,\n    expression: true,\n    context: true,\n    type: true,\n    security: true,\n  });\n\n  // Check if expression has any errors\n  const hasExpressionError = useMemo(() => {\n    // No expression = no error\n    if (!expressionMode.expression || !expressionMode.expression.trim()) {\n      return false;\n    }\n\n    // Check Monaco validation errors\n    if (!internalIsExpressionValid || !isExpressionValid) {\n      return true;\n    }\n\n    // Check AST parsing errors\n    if (parseError) {\n      return true;\n    }\n\n    // Check validation state\n    if (!validationState.syntax || !validationState.expression) {\n      return true;\n    }\n\n    // Check if there's an evaluation error\n    if (expressionResult?.error || internalExpressionResult?.error) {\n      return true;\n    }\n\n    return false;\n  }, [\n    expressionMode.expression,\n    internalIsExpressionValid,\n    isExpressionValid,\n    parseError,\n    validationState,\n    expressionResult,\n    internalExpressionResult\n  ]);\n\n  // Track if we should use full editor (when expression becomes multi-line)\n  // const [shouldUseFullEditor, setShouldUseFullEditor] = useState(false);\n\n  // Track if we're programmatically clearing to prevent blur handler from firing\n  const isProgrammaticallyClearing = useRef(false);\n\n  // Track if we're switching to full-screen to prevent blur handler from firing\n  const isSwitchingToFullScreen = useRef(false);\n\n  // Track if we're programmatically clearing to prevent blur handler from firing\n  const isBlur = useRef(false);\n\n  // Handle Monaco validation changes\n  const handleValidationChange = useCallback(\n    (isValid: boolean, errors: any[]) => {\n      setInternalIsExpressionValid(isValid);\n\n      // Update syntax validation (Monaco's built-in validation)\n      setValidationState((prev) => ({\n        ...prev,\n        syntax: isValid,\n      }));\n    },\n    []\n  );\n\n  // Check if expression content requires full editor\n  const checkForMultiLine = useCallback(\n    (expression: string) => {\n      const hasNewlines = expression.includes('\\n');\n      const isLong = expression.length > 80; // Arbitrary threshold for \"long\" expressions\n      if (!expressionMode.isFullScreen) {\n        expressionMode.setFullScreen(hasNewlines || isLong);\n      }\n    },\n    [expressionMode.isFullScreen]\n  );\n\n  // Internal evaluation function\n  const internalEvaluateExpression = useCallback(\n    async (expression: string, context: ExpressionContext) => {\n      if (!evaluateExpression || !expression.trim()) return;\n\n      setInternalIsEvaluating(true);\n      try {\n        const result = await evaluateExpression(expression, context);\n        setInternalExpressionResult(result);\n      } catch (error) {\n        // console.error('Expression evaluation failed:', error);\n        setInternalExpressionResult({\n          value: null,\n          ast: { kind: 0, text: '', color: '#ff0000' },\n          error: error instanceof Error ? error.message : 'Unknown error',\n          isValid: false,\n          validation: {\n            syntax: false,\n            expression: false,\n            context: false,\n            type: false,\n            security: false,\n          },\n        });\n      } finally {\n        setInternalIsEvaluating(false);\n      }\n    },\n    [evaluateExpression]\n  );\n\n  // TODO: Add error boundary for expression evaluation\n  // TODO: Add loading states for complex expressions\n  // TODO: Add validation for fieldName uniqueness\n\n  // Evaluate expression and determine current value\n  // const currentValue = useMemo(() => {\n\n  //   if (expressionMode.isExpressionMode && expressionMode.expression) {\n  //     // If we have an expression result (from parent or internal), use it\n  //     // const result = expressionResult || internalExpressionResult;\n  //     // if (result?.isValid) {\n  //     //   return result.value;\n  //     // }\n\n  //     // // Use stored currentValue from metadata if available\n  //     // if (expressionMode.currentValue !== undefined) {\n  //     //   return expressionMode.currentValue;\n  //     // }\n\n  //     // Fallback to local evaluation\n  //     // try {\n  //     //   const evaluated = evaluateExpressionLocally(expressionMode.expression, expressionContext);\n  //     //   return evaluated !== null ? evaluated : value;\n  //     // } catch (error) {\n  //     //   console.warn('Expression evaluation failed:', error);\n  //     //   return value;\n  //     // }\n  //     return currentExpressionValueExt;\n\n  //   }\n\n  //   return originalValue || value;\n\n  // }, [expressionMode.isExpressionMode, expressionMode.expression, expressionMode.currentValue, expressionContext, value, expressionResult, internalExpressionResult]);\n\n  const currentMetadata = useMemo(() => {\n    return {\n      expression: expressionMode.expression,\n      value: currentValue,\n      mode: expressionMode.current,\n      isEditing: expressionMode.isEditing,\n      isFullScreen: expressionMode.isFullScreen,\n    };\n  }, [\n    expressionMode.expression,\n    expressionMode.current,\n    expressionMode.isFullScreen,\n    expressionMode.isEditing,\n    currentValue,\n  ]);\n\n  const currentExpressionValue = useMemo(() => {\n    return { expression: expressionMode.expression, type: 'expression' };\n  }, [expressionMode.currentValue || expressionMode.expression]);\n\n  // Handle value changes from wrapped control\n  const handleValueChange = useCallback(\n    (newValue: T) => {\n      // Only pass metadata if we're in expression mode OR if the new value is an expression\n\n      // const currentMetadata: ExpressionMetadata | undefined =\n\n      // (expressionMode.current === 'value' && !isExpressionValue) ? undefined : {\n      //     expression: expressionMode.expression,\n      //     mode: expressionMode.current,\n      //     isEditing: expressionMode.isEditing\n      //   };\n\n      // console.log(\"handleValueChange called with:\", { newValue: newValue, currentMetadata: currentMetadata });\n      onValueChange(formatValue(newValue) as T, { ...currentMetadata, value: formatValue(newValue) });\n    },\n    [onValueChange, expressionMode, isExpressionValue, currentValue]\n  );\n\n  // // Handle onChange events (for controls that pass events)\n  // const handleChange = useCallback((event: any) => {\n  //   // const currentMetadata: ExpressionMetadata = {\n  //   //   expression: expressionMode.expression,\n  //   //   mode: expressionMode.current,\n  //   //   isEditing: expressionMode.isEditing\n  //   // };\n\n  //   if (event && event.target && typeof event.target.value !== 'undefined') {\n  //     // Handle input change events\n  //     onValueChange(event.target.value as T, currentMetadata);\n  //   } else if (typeof event === 'boolean') {\n  //     // Handle switch/checkbox events\n  //     onValueChange(event as T, currentMetadata);\n  //   } else {\n  //     // Handle direct value changes\n  //     onValueChange(event as T, currentMetadata);\n  //   }\n  // }, [onValueChange, expressionMode]);\n\n  // Handle expression changes\n  const handleExpressionChange = useCallback(\n    (newExpression: string) => {\n      // console.log(\"handleExpressionChange\", newExpression);\n      // console.log(\"Current expressionMode.expression before set:\", expressionMode.expression);\n\n      // Reset the clearing flag when expression changes (user is typing)\n      isProgrammaticallyClearing.current = false;\n\n      expressionMode.setExpression(newExpression);\n      setCurrentEditorValue(newExpression);\n      // console.log(\"Current expressionMode.expression after set:\", expressionMode.expression);\n\n      // Check if content requires full editor\n      checkForMultiLine(newExpression);\n\n      // Update validation state for local validation\n      // const localValidation = validateExpressionLocally(newExpression, expressionContext, expectedType);\n      // setValidationState(localValidation);\n\n      // // If wrapper handles evaluation internally, trigger it\n      // if (evaluateExpression) {\n      //   internalEvaluateExpression(newExpression, expressionContext);\n      // }\n\n      // console.log(\"handleExpressionChange calling onValueChange with:\", { expression: newExpression, type: 'expression' });\n\n      onValueChange({ expression: newExpression, type: 'expression' } as T, {\n        ...currentMetadata,\n        expression: newExpression,\n      });\n\n      // If in expression mode, update the actual value (fallback to local evaluation)\n      // if (expressionMode.isExpressionMode && !evaluateExpression) {\n      //   try {\n      //     const evaluated = evaluateExpressionLocally(newExpression, expressionContext);\n      //     if (evaluated !== null) {\n      //       // Store the evaluated value in metadata state\n      //       expressionMode.setCurrentValue(evaluated);\n\n      //       const currentMetadata: ExpressionMetadata = {\n      //         expression: newExpression,\n      //         mode: expressionMode.current,\n      //         isEditing: expressionMode.isEditing\n      //       };\n      //       onValueChange(evaluated, currentMetadata);\n      //     }\n      //   } catch (error) {\n      //     // Keep current value\n      //   }\n      // }\n    },\n    [\n      expressionMode,\n      expressionContext,\n      onValueChange,\n      evaluateExpression,\n      internalEvaluateExpression,\n      checkForMultiLine,\n    ]\n  );\n\n  // Handle expression editor blur - switch to expression mode and update value if needed\n  const handleExpressionBlur = useCallback(\n    async (e?: any, forceBlur = false) => {\n\n      // If we're programmatically clearing, don't execute blur logic\n      if (isProgrammaticallyClearing.current) {\n        isProgrammaticallyClearing.current = false;\n        return;\n      }\n\n      // If we're switching to full-screen, don't execute blur logic\n      if (isSwitchingToFullScreen.current) {\n        isSwitchingToFullScreen.current = false;\n        return;\n      }\n\n      // Don't process blur if in full-screen mode (multi-line editing)\n      // UNLESS this is a forced blur (like clicking the X button)\n      if (expressionMode.isFullScreen && !forceBlur) {\n        return;\n      }\n\n      // Don't process blur if expression has newlines (should be in full-screen)\n      // UNLESS this is a forced blur\n      if (expressionHasNewlines && !forceBlur) {\n        return;\n      }\n\n      isBlur.current = true;\n\n      expressionMode.setEditing(false);\n      expressionMode.setFullScreen(false);\n\n      // console.log(\"handleExpressionBlur called\", { currentExpressionValue: currentExpressionValue, currentEditorValue: currentEditorValue, currentExpressionValueExt: currentExpressionValueExt });\n\n      // Reset full editor flag since we're leaving editor mode\n    },\n    [\n      expressionMode,\n      expressionResult,\n      internalExpressionResult,\n      expressionContext,\n      onValueChange,\n      currentValue,\n      isEvaluating,\n      internalIsEvaluating,\n      currentExpressionValue,\n      expressionHasNewlines,\n    ]\n  );\n\n  useEffect(() => {\n    onValueChange(currentValue as T, {\n      ...currentMetadata,\n      isFullScreen: expressionMode.isFullScreen,\n    });\n  }, [expressionMode.isFullScreen]);\n\n  // Auto-switch to full-screen mode if newlines are detected while editing\n  useEffect(() => {\n    if (expressionMode.isEditing && expressionHasNewlines && !expressionMode.isFullScreen) {\n      expressionMode.setFullScreen(true);\n    }\n  }, [expressionHasNewlines, expressionMode.isEditing, expressionMode.isFullScreen]);\n\n  // // Auto-switch to value mode if expression becomes empty after blur\n  // useEffect(() => {\n  //   // Only check when blur just happened\n  //   if (isBlur.current) {\n  //     isBlur.current = false; // Reset the flag\n\n  //     // If expression is empty or only whitespace, switch to value mode\n  //     if (!expressionMode.expression || !expressionMode.expression.trim()) {\n  //       console.log('Expression is empty after blur - switching to value mode');\n  //       expressionMode.switchToValue();\n  //     }\n  //   }\n  // }, [expressionMode.isEditing]); // Trigger when isEditing changes (blur sets it to false)\n\n  const handleModeChange = useCallback(\n    (newMode: 'value' | 'expression' | 'editor') => {\n      switch (newMode) {\n        case 'value':\n          // When switching to value mode, update the original value to current value\n          // setOriginalValue(currentValue);\n\n          expressionMode.switchToValue();\n\n          expressionMode.setFullScreen(false); // Reset full editor flag\n\n          // Update form state with the actual value (not expression object)\n          onValueChange(originalValue || value, undefined);\n          break;\n        case 'editor':\n          // setOriginalValue(currentValue);\n          expressionMode.switchToEditor();\n\n          // If expression has newlines, automatically go to full-screen\n          const shouldBeFullScreen = expressionHasNewlines;\n          if (shouldBeFullScreen) {\n            expressionMode.setFullScreen(true);\n          }\n\n          // Update metadata to reflect editing state\n          const editorMetadata: ExpressionMetadata = {\n            expression: expressionMode.expression,\n            value: currentValue,\n            mode: 'expression',\n            isEditing: true,\n            isFullScreen: shouldBeFullScreen,\n          };\n\n          // Notify parent that editing started\n          onValueChange(\n            expressionMode.expression\n              ? { expression: expressionMode.expression, type: 'expression' } as T\n              : currentValue as T,\n            editorMetadata\n          );\n          break;\n        case 'expression':\n          // Store the current value before switching to expression mode\n          setOriginalValue(currentValue);\n\n          expressionMode.switchToExpression();\n\n          // If expression has newlines, automatically go to full-screen when editing\n          if (expressionHasNewlines) {\n            expressionMode.setFullScreen(true);\n          }\n\n          // break;\n          // expressionMode.switchToEditor();\n\n          break;\n      }\n    },\n    [expressionMode, currentValue, onValueChange, expressionHasNewlines, originalValue, value]\n  );\n\n  useEffect(() => {\n    // This is for blur detection ... it seems to work quite a bit better than the onBlur event as long\n    // as we use the onBlur event to trigger out of editing mode we can watch for that and update values\n    // accordinly\n    // if (\n    //   !expressionMode.isEditing &&\n    //   !(expressionMode.expression && expressionMode.expression.trim())\n    // ) {\n    //   expressionMode.switchToValue();\n    // }\n    if (isBlur.current) {\n      if (!(expressionMode.expression && expressionMode.expression.trim())) {\n        expressionMode.switchToValue();\n        onValueChange(currentMetadata.value ?? '' as T, {\n          ...currentMetadata,\n          mode: 'value',\n          expression: '',\n          isEditing: false,\n          isFullScreen: false,\n        });\n      } else {\n        onValueChange(\n          currentMetadata.mode === 'value'\n            ? (currentMetadata.value ?? '' as T)\n            : ({\n              expression: currentMetadata.expression.trim(),\n              type: 'expression',\n            } as T),\n          { ...currentMetadata, isEditing: false, isFullScreen: false }\n        );\n      }\n      isBlur.current = false;\n    }\n  }, [expressionMode.isEditing, expressionMode.isFullScreen, isBlur.current]);\n\n  // Notify parent when dependencies change\n  useEffect(() => {\n    if (onDependenciesChange) {\n      onDependenciesChange(dependencies);\n    }\n  }, [dependencies, onDependenciesChange]);\n\n  // Handle clear\n  const handleClear = useCallback(() => {\n    // Set flag to prevent blur handler from executing\n    isProgrammaticallyClearing.current = true;\n\n    // const currentMetadata: ExpressionMetadata = {\n    //   expression: '',\n    //   mode: 'value',\n    //   isEditing: false\n    // };\n\n    // Return to the original value when clearing the expression\n    onValueChange(currentValue as T, currentMetadata);\n    handleModeChange('value');\n    // expressionMode.clear();\n    expressionMode.setFullScreen(false); // Reset full editor flag\n  }, [onValueChange, expressionMode, originalValue]);\n\n\n  const [localInput, setLocalInput] = useState(currentValue);\n\n  useEffect(() => {\n\n    setLocalInput(currentValue)\n\n  }, [currentValue])\n\n  // Create control props for render prop pattern\n  const controlProps = useMemo(\n    () => ({\n      value: currentValue as T,\n      onChange: handleValueChange,\n      onExpressionClick: () => handleModeChange('editor'), // Click handler to trigger expression mode\n      inferredType: inferredReturnType, // Inferred TypeScript type\n      hasTypeMismatch: hasTypeMismatch, // Whether inferred type matches expected\n      hasError: hasExpressionError, // Whether expression has syntax/validation errors\n      localInput,\n      setLocalInput,\n      expressionMode: {\n        current: expressionMode.current,\n        switchToValue: () => handleModeChange('value'),\n        switchToExpression: () => handleModeChange('expression'),\n        switchToEditor: () => handleModeChange('editor'),\n        clear: handleClear,\n        isExpressionMode: expressionMode.isExpressionMode,\n        isEditorMode: expressionMode.isEditorMode,\n        expression: expressionMode.expression,\n        setExpression: handleExpressionChange,\n        isEditing: expressionMode.isEditing,\n        setEditing: expressionMode.setEditing,\n        isFullScreen: expressionMode.isFullScreen,\n        setFullScreen: expressionMode.setFullScreen,\n      } as ExpressionModeControls,\n    }),\n    [\n      currentValue,\n      handleValueChange,\n      expressionMode,\n      handleModeChange,\n      handleClear,\n      handleExpressionChange,\n      inferredReturnType,\n      hasTypeMismatch,\n      hasExpressionError,\n    ]\n  );\n\n  // Render based on current mode\n  const renderContent = () => {\n    switch (expressionMode.current) {\n      // case 'value':\n      //   return children(controlProps);\n\n      case 'expression':\n        // Determine what to show based on state\n        const hasExpression =\n          expressionMode.expression && expressionMode.expression.trim();\n        const hasValidAST = (expressionResult || internalExpressionResult)\n          ?.isValid;\n        const isValidExpression =\n          isExpressionValid && internalIsExpressionValid;\n\n        // If no expression is set, automatically switch back to value mode\n        // if (!hasExpression) {\n        //   console.log('Expression mode render: no expression, switching to value mode', {\n        //     expression: expressionMode.expression,\n        //     hasExpression,\n        //     currentMode: expressionMode.current\n        //   });\n        //   // Use setTimeout to avoid state update during render\n        //   setTimeout(() => {\n        //     expressionMode.switchToValue();\n        //     // Clear the expression from metadata when switching to value mode due to empty expression\n        //     const clearedMetadata: ExpressionMetadata = {\n        //       expression: '',\n        //       mode: 'value',\n        //       isEditing: false\n        //     };\n        //     onValueChange(value, clearedMetadata);\n        //   }, 0);\n        //   // Return value mode content while switching\n        //   return children(controlProps);\n        // }\n\n        return controlProps.expressionMode.isEditing ? (\n          <div key={`${key}-expression`} className={cn('relative', className)}>\n            {inlineEditor && !expressionMode.isFullScreen && !expressionHasNewlines ? (\n              <div\n                className={cn(\n                  `uii:flex uii:h-9 uii:w-full \n              uii:min-w-0 uii:rounded-sm \n              uii:border uii:border-ring \n              uii:bg-background uii:px-3 uii:py-1 uii:text-base uii:shadow-xs \n              uii:ring-ring/50 uii:ring-[3px] uii:transition-[color,box-shadow] \n              uii:outline-none uii:md:text-sm uii:cursor-pointer\n              uii:mt-0.5 `,\n                  editorClassName\n                )}\n              >\n                <InlineExpressionEditor\n                  value={expressionMode.expression}\n                  onChange={(newValue) => {\n                    // console.log(\"InlineExpressionEditor onChange called with:\", newValue);\n                    handleExpressionChange(newValue);\n                  }}\n                  onEnter={() => {\n                    // Switch to full-screen mode instead of blurring\n                    // Set flag to prevent blur handler from closing the editor\n                    isSwitchingToFullScreen.current = true;\n                    expressionMode.setFullScreen(true);\n\n                    // Reset flag after a short delay in case blur doesn't fire\n                    setTimeout(() => {\n                      isSwitchingToFullScreen.current = false;\n                    }, 100);\n                  }}\n                  onBlur={handleExpressionBlur}\n                  onTypeInferred={handleTypeInferred}\n                  onValidationChange={handleValidationChange}\n                  context={expressionContext}\n                  placeholder={expressionPlaceholder}\n                />\n                <div className=\"uii:flex uii:items-center uii:gap-2 uii:mt-0.5\">\n                  <span\n                    className=\"uii:text-xs uii:font-mono uii:cursor-pointer uii:text-muted-foreground\"\n                    onMouseDown={(e) => {\n                      e.preventDefault(); // Prevent blur from firing\n                      e.stopPropagation();\n                      isSwitchingToFullScreen.current = true;\n                      expressionMode.setFullScreen(true);\n\n                      // Reset flag after a short delay in case blur doesn't fire\n                      setTimeout(() => {\n                        isSwitchingToFullScreen.current = false;\n                      }, 100);\n                    }}\n                  >\n                    <FontAwesomeIcon icon={faExpand} />\n                  </span>\n                  <span\n                    className=\"uii:text-xs uii:font-mono uii:cursor-pointer uii:text-muted-foreground\"\n                    onMouseDown={(e) => {\n                      e.preventDefault(); // Prevent blur from firing\n                      handleClear();\n                    }}\n                  >\n                    Clear\n                  </span>\n                </div>\n              </div>\n            ) : (\n              <div className=\"uii:space-y-4\">\n                <FullPanelExpressionEditor\n                  value={expressionMode.expression}\n                  onChange={(newValue) => {\n                    // console.log(\"FullPanelExpressionEditor onChange called with:\", newValue);\n                    handleExpressionChange(newValue);\n                  }}\n                  onClose={() => {\n                    // Treat close like a blur - save the expression\n                    // Force blur to bypass full-screen checks\n                    handleExpressionBlur(undefined, true);\n                    expressionMode.setFullScreen(false);\n                  }}\n                  onBlur={handleExpressionBlur}\n                  onTypeInferred={handleTypeInferred}\n                  context={expressionContext}\n                  placeholder={expressionPlaceholder}\n                />\n\n                {/* AST and Dependencies Display */}\n                {(ast || dependencies.length > 0) && (\n                  <div className=\"uii:space-y-3\">\n                    {/* Return Type */}\n                    {inferredReturnType && inferredReturnType !== 'unknown' && (\n                      <div className=\"uii:space-y-2\">\n                        <div className=\"uii:flex uii:items-center uii:gap-2\">\n                          <div className=\"uii:text-sm uii:font-semibold uii:text-gray-700\">\n                            Inferred Return Type:\n                          </div>\n                          {typeScriptInferredType && inferredReturnType !== 'error' && (\n                            <span className=\"uii:px-1.5 uii:py-0.5 uii:text-xs uii:rounded uii:bg-blue-100 uii:text-blue-700 uii:border uii:border-blue-200\">\n                              TypeScript\n                            </span>\n                          )}\n                        </div>\n                        <div className=\"uii:flex uii:items-center uii:gap-2\">\n                          {inferredReturnType === 'error' ? (\n                            <span className=\"uii:px-3 uii:py-1.5 uii:text-sm uii:font-mono uii:rounded uii:border uii:bg-red-50 uii:text-red-800 uii:border-red-200\">\n                              ❌ Syntax Error\n                            </span>\n                          ) : (\n                            <>\n                              <span className=\"uii:px-3 uii:py-1.5 uii:text-sm uii:font-mono uii:rounded uii:border uii:bg-purple-50 uii:text-purple-800 uii:border-purple-200\">\n                                {inferredReturnType}\n                              </span>\n                              {hasTypeMismatch && (\n                                <span className=\"uii:text-xs uii:text-orange-600 uii:font-semibold\">\n                                  ⚠️ Expected: {type || expectedType}\n                                </span>\n                              )}\n                            </>\n                          )}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Dependencies */}\n                    {dependencyList.length > 0 && (\n                      <div className=\"uii:space-y-2\">\n                        <div className=\"uii:text-sm uii:font-semibold uii:text-gray-700\">\n                          Dependencies ({dependencyList.length}):\n                        </div>\n                        <div className=\"uii:flex uii:flex-wrap uii:gap-2\">\n                          {dependencyList.map((dep, index) => (\n                            <span\n                              key={index}\n                              className={cn(\n                                \"uii:px-2 uii:py-1 uii:text-sm uii:rounded uii:border\",\n                                dep.exists\n                                  ? \"uii:bg-blue-100 uii:text-blue-800 uii:border-blue-200\"\n                                  : \"uii:bg-red-100 uii:text-red-800 uii:border-red-200\"\n                              )}\n                              title={dep.exists ? `Value: ${JSON.stringify(dep.value)}` : 'Not found in context'}\n                            >\n                              {dep.name}\n                            </span>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* AST Tree */}\n                    {ast && (\n                      <ASTRenderer\n                        ast={ast}\n                        tokens={tokens}\n                        variant=\"tree\"\n                        showTokens={true}\n                        className=\"uii:w-full\"\n                      />\n                    )}\n\n                    {/* Parse Status */}\n                    {isParsing && (\n                      <div className=\"uii:text-sm uii:text-gray-500 uii:italic\">\n                        Parsing expression...\n                      </div>\n                    )}\n                    {parseError && (\n                      <div className=\"uii:text-sm uii:text-red-600\">\n                        Parse Error: {parseError}\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        ) : (\n          <div\n            className={cn('uii:relative', className)}\n            key={`${key}-expression-display`}\n          >\n            <div\n              className={clsx(\n                'uii:flex uii:h-9 uii:w-full uii:min-w-0 uii:rounded-sm uii:border uii:border-input uii:bg-transparent uii:px-3 uii:py-1 uii:text-base uii:shadow-xs uii:transition-[color,box-shadow] uii:outline-none uii:focus-visible:border-ring uii:focus-visible:ring-ring/50 uii:focus-visible:ring-[3px] uii:md:text-sm uii:cursor-pointer uii:hover:bg-muted/50',\n                'uii:mt-0.5 uii:bg-white uii:rounded-md uii:items-center'\n              )}\n              onClick={() => handleModeChange('editor')}\n              onMouseEnter={() => setIsHovering(true)}\n              onMouseLeave={() => setIsHovering(false)}\n            >\n              <span className=\"uii:flex-1 uii:truncate uii:text-foreground uii:items-center\">\n                {isHovering ? (\n                  // Hover state: show AST preview with dependencies\n                  <div className=\"uii:flex uii:items-center uii:gap-2\">\n                    {ast ? (\n                      <ASTRenderer\n                        key={`${key}-ast`}\n                        ast={ast}\n                        tokens={tokens}\n                        variant=\"inline\"\n                        showTokens={false}\n                        className=\"uii:text-xs\"\n                      />\n                    ) : (\n                      <div className=\"uii:text-xs uii:text-gray-500\">\n                        {isParsing\n                          ? 'Parsing...'\n                          : parseError\n                            ? `Error: ${parseError}`\n                            : 'No AST available'}\n                      </div>\n                    )}\n                    {dependencies.length > 0 && (\n                      <div className=\"uii:flex uii:gap-1\">\n                        {dependencies.map((dep, index) => (\n                          <span\n                            key={index}\n                            className=\"uii:px-1 uii:py-0.5 uii:bg-blue-100 uii:text-blue-800 uii:text-xs uii:rounded\"\n                          >\n                            {dep}\n                          </span>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                ) : (\n                  // At rest: show the expression text\n                  <span className=\"uii:font-mono uii:text-sm\">\n                    {currentExpressionValueExt || 'No expression'}\n                  </span>\n                )}\n              </span>\n            </div>\n          </div>\n        );\n\n      default:\n        return children(controlProps);\n    }\n  };\n\n  return (\n    <><div className=\"uii:flex uii:items-center uii:gap-2 uii:mt-2\"><label className=\"uii:text-xs uii:text-muted-foreground uii:font-bold\" htmlFor={key}>{label}:</label>\n      <span className=\"uii:-mt-2 uii:inline-flex uii:px-1 uii:py-0.5 uii:bg-gray-200 uii:rounded-sm uii:text-[10px] uii:font-mono uii:text-muted-foreground uii:font-light\">{type}</span>\n      {hasTypeMismatch || inferredReturnType === 'error' ? (\n        <>\n          {expressionMode.current === 'expression' ? <><span className=\"uii:-mt-2 uii:inline-flex uii:px-1 uii:py-0.5 uii:bg-gray-200 uii:rounded-sm uii:text-[10px] uii:font-mono uii:text-muted-foreground uii:font-light\">{expressionMode.expression.trim() !== '' ? inferredReturnType : 'empty'}</span>\n            <span className=\"uii:-mt-2 uii:inline-flex uii:px-1 uii:py-0.5 uii:bg-gray-200 uii:rounded-sm uii:text-[10px] uii:font-mono uii:font-light uii:text-orange-600 \">\n              ⚠️ Expected: {type || expectedType}\n            </span></> : <></>}</>) : <></>}\n    </div>\n      {renderContent()}\n\n      {/* {<>availableNodes:{JSON.stringify(availableNodes)}</>}<br />\n      {<>myInterface:{JSON.stringify(myInterface)}</>}<br /> */}\n      {/* {<>cv:{JSON.stringify(currentValue)}</>}<br />\n    {<>ov:{JSON.stringify(originalValue)}</>}<br />\n    {<>cevExt:{JSON.stringify(currentExpressionValueExt)}</>}<br />\n    {<>cev:{JSON.stringify(currentExpressionValue)}</>}<br />\n    {<>exp:{JSON.stringify(expressionMode.expression)}</>}<br />\n    {<>ie:{JSON.stringify(expressionMode.isEditing)}</>}<br />\n    {<>fs:{JSON.stringify(expressionMode.isFullScreen)}</>}<br />\n    {<>expm:{JSON.stringify(expressionMode.isExpressionMode)}</>}<br />\n    {<>em:{JSON.stringify(expressionMode.isEditorMode)}</>}<br /> */}\n    </>\n  );\n}\n\nexport default ExpressionWrapper;\n","import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nimport { Button } from '@/components/ui/button'\nimport { Input as InputComponent } from '@/components/ui/input'\nimport { ExpressionAST, ExpressionContext, ExpressionWrapper } from \"@/components/expression/ExpressionWrapper\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useState } from \"react\";\n// import { faCode } from \"@fortawesome/pro-regular-svg-icons\";\nexport interface InputProps\n    extends React.InputHTMLAttributes<HTMLInputElement> { }\n\nexport interface ExpressionResult {\n    value: any;\n    ast: ExpressionAST;\n    error?: string;\n    isValid: boolean;\n    validation: {\n        syntax: boolean;\n        expression: boolean;\n        context: boolean;\n        type?: boolean;\n        security?: boolean;\n    };\n}\n\nexport function Input({ className, expectedType, ...props }: React.ComponentProps<'input'> & {\n    error?: boolean, label?: string,\n    rapperClassName?: string,\n    expressionContext?: ExpressionContext,\n    expressionResult?: ExpressionResult,\n    isEvaluating?: boolean,\n    isExpressionValid?: boolean,\n    expectedType?: string\n}) {\n\n    const [localValue, setLocalValue] = useState(props.value as any);\n    const [localMetadata, setLocalMetadata] = useState({} as any);\n\n\n    return (<ExpressionWrapper\n        label={props.label as string ?? \"Test Entry\"}\n        key={props.name as string}\n        type={expectedType ?? \"string\"}\n        valuesLoading={false}\n        value={props.value}\n        onValueChange={(val, metadata) => {\n            setLocalValue(val);\n            if (metadata) {\n                setLocalMetadata(metadata);\n            }\n        }}\n        expectedType={expectedType as \"string\" | \"number\" | \"boolean\" | \"object\" | \"array\" | \"any\"}\n        fieldName={props.name as string}\n        // availableNodes={availableNodes}\n        // myInterface={myInterface}\n        children={({ onExpressionClick, onChange: onChangeExpression, value: expressionValue, localInput, setLocalInput }) => (\n            <div className=\"uii:relative uii:text-xs uii:mt-0.5\"><InputComponent\n                type=\"text\"\n                value={localInput}\n                onChange={(e) => {\n                    setLocalInput(e.target.value)\n                    onChangeExpression(e.target.value)\n                }}\n                // disabled={!props.disabled}\n                placeholder={props.placeholder as string ?? \"Enter value...\"}\n            />\n                <div className=\"uii:flex uii:bg-white uii:border-white/40 uii:border-l-8 uii:items-center uii:gap-1 uii:absolute uii:right-1.5 uii:top-2.5 uii:cursor-pointer uii:truncate\" onClick={() => onExpressionClick()}>\n                    {/* <FontAwesomeIcon icon={[\"fas\", \"code\"]} className=\"text-blue-500\" /> */}\n                    <span className=\"uii:border-l uii:border-gray-200 uii:px-2\">Custom Expression</span>\n                </div>\n            </div>\n        )}\n    // <Button onClick={() => onExpressionClick()}>\n    //     <FontAwesomeIcon icon={[\"fas\", \"code\"]} className=\"text-blue-500\" />\n    //     <span className=\"border-l border-gray-200 px-2\">Custom Expression</span>\n    // </Button>   \n\n    // <div className=\"relative overflow-clip\">\n    //     <Input type=\"text\"\n    //         spellCheck={false}\n    //         autoComplete=\"off\"\n    //         onKeyDown={(e) => {\n    //             if (e.key === 'Enter') {\n    //                 e.preventDefault();\n    //             }\n    //         }}\n    //         autoFocus={false}\n    //         id={props.name as string} key={props.name as string}\n    //         onBlur={() => {\n    //             // onBlur && onBlur(value);\n    //         }}\n    //         name={props.name as string}\n    //         readOnly={false}\n    //         className={cn(!false ? 'cursor-not-allowed' : '', '!bg-white !text-sm ')}\n    //         defaultValue={\"\"}\n    //         value={localInput}\n    //         onChange={(e) => {\n    //             setLocalInput(e.target.value);\n    //             onChangeExpression && onChangeExpression(e.target.value);\n    //         }}\n    //     />\n    //     <div className=\"flex bg-white border-white/40 border-l-8 items-center gap-1 absolute right-1.5 top-2.5 cursor-pointer truncate\" onClick={() => onExpressionClick()}>\n    //         <FontAwesomeIcon icon={[\"fas\", \"code\"]} className=\"text-blue-500\" />\n    //         <span className=\"border-l border-gray-200 px-2\">Custom Expression</span>\n    //     </div>\n    // </div>\n\n\n    />)\n}","/**\n * Copyright 2022 Joe Bell. All rights reserved.\n *\n * This file is licensed to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with the\n * License. You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR REPRESENTATIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */ import { clsx } from \"clsx\";\nconst falsyToString = (value)=>typeof value === \"boolean\" ? `${value}` : value === 0 ? \"0\" : value;\nexport const cx = clsx;\nexport const cva = (base, config)=>(props)=>{\n        var _config_compoundVariants;\n        if ((config === null || config === void 0 ? void 0 : config.variants) == null) return cx(base, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);\n        const { variants, defaultVariants } = config;\n        const getVariantClassNames = Object.keys(variants).map((variant)=>{\n            const variantProp = props === null || props === void 0 ? void 0 : props[variant];\n            const defaultVariantProp = defaultVariants === null || defaultVariants === void 0 ? void 0 : defaultVariants[variant];\n            if (variantProp === null) return null;\n            const variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);\n            return variants[variant][variantKey];\n        });\n        const propsWithoutUndefined = props && Object.entries(props).reduce((acc, param)=>{\n            let [key, value] = param;\n            if (value === undefined) {\n                return acc;\n            }\n            acc[key] = value;\n            return acc;\n        }, {});\n        const getCompoundVariantClassNames = config === null || config === void 0 ? void 0 : (_config_compoundVariants = config.compoundVariants) === null || _config_compoundVariants === void 0 ? void 0 : _config_compoundVariants.reduce((acc, param)=>{\n            let { class: cvClass, className: cvClassName, ...compoundVariantOptions } = param;\n            return Object.entries(compoundVariantOptions).every((param)=>{\n                let [key, value] = param;\n                return Array.isArray(value) ? value.includes({\n                    ...defaultVariants,\n                    ...propsWithoutUndefined\n                }[key]) : ({\n                    ...defaultVariants,\n                    ...propsWithoutUndefined\n                })[key] === value;\n            }) ? [\n                ...acc,\n                cvClass,\n                cvClassName\n            ] : acc;\n        }, []);\n        return cx(base, getVariantClassNames, getCompoundVariantClassNames, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);\n    };\n\n","import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"ui:inline-flex ui:items-center ui:justify-center ui:gap-2 ui:whitespace-nowrap ui:rounded-sm ui:text-sm ui:font-medium ui:transition-[color,box-shadow] ui:disabled:pointer-events-none ui:disabled:opacity-50 ui:[&_svg]:pointer-events-none ui:[&_svg:not([class*=size-])]:size-4 ui:shrink-0 ui:[&_svg]:shrink-0 ui:outline-none ui:focus-visible:border-ring ui:focus-visible:ring-ring/50 ui:focus-visible:ring-[3px] ui:aria-invalid:ring-destructive/20 ui:dark:aria-invalid:ring-destructive/40 ui:aria-invalid:border-destructive ui:cursor-pointer\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"ui:bg-primary ui:text-primary-foreground ui:shadow-xs ui:hover:bg-primary/90 ui:select-none\",\n        destructive:\n          \"ui:bg-destructive ui:text-white ui:shadow-xs ui:hover:bg-destructive/90 ui:focus-visible:ring-destructive/20 ui:dark:focus-visible:ring-destructive/40\",\n        outline:\n          \"ui:border ui:border-input ui:bg-background ui:shadow-xs ui:hover:bg-accent ui:hover:text-accent-foreground\",\n        secondary:\n          \"ui:bg-secondary ui:text-secondary-foreground ui:shadow-xs ui:hover:bg-secondary/80\",\n        ghost: \"ui:hover:bg-accent ui:hover:text-accent-foreground\",\n        link: \"ui:text-primary ui:underline-offset-4 ui:hover:underline\",\n      },\n      size: {\n        default: \"ui:h-9 ui:px-4 ui:py-2 ui:has-[>svg]:px-3\",\n        sm: \"ui:h-8 ui:rounded-sm ui:gap-1.5 ui:px-3 ui:has-[>svg]:px-2.5\",\n        lg: \"ui:h-10 ui:rounded-sm ui:px-6 ui:has-[>svg]:px-4\",\n        icon: \"ui:size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp \n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n"]}